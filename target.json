{
  "id": "beaglebone",
  "platformid": "pxtbeagle",
  "nickname": "beaglebone",
  "name": "MakeCode Beaglebone",
  "title": "MakeCode Beaglebone - Blocks / Javascript editor",
  "description": "A Blocks / JavaScript code editor for Beaglebone Boards",
  "corepkg": "beagleboneblack",
  "bundleddirs": [
    "libs/core",
    "libs/base",
    "libs/pocketbeagle",
    "libs/beagleboneblack"
  ],
  "serial": {
    "useEditor": true,
    "log": true,
    "editorTheme": {
      "graphBackground": "#d9d9d9",
      "lineColors": [
        "#CC2936",
        "#FFC914",
        "#2EB7ED",
        "#FB48C7",
        "#08415C",
        "#C200C0"
      ]
    }
  },
  "simulator": {
    "autoRun": true,
    "streams": false,
    "aspectRatio": 1,
    "parts": true,
    "instructions": false,
    "partsAspectRatio": 0.69,
    "dynamicBoardDefinition": true
  },
  "cloud": {
    "workspace": false,
    "packages": true,
    "sharing": true,
    "publishing": true,
    "importing": true,
    "preferredPackages": [],
    "githubPackages": true
  },
  "runtime": {
    "mathBlocks": true,
    "loopsBlocks": true,
    "logicBlocks": true,
    "variablesBlocks": true,
    "textBlocks": true,
    "listsBlocks": true,
    "functionBlocks": true,
    "onStartNamespace": "loops",
    "onStartColor": "#40bf4a",
    "onStartWeight": 100,
    "pauseUntilBlock": {
      "category": "loops"
    }
  },
  "compile": {
    "isNative": false,
    "switches": {},
    "jsRefCounting": false,
    "vtableShift": 2,
    "noSourceInFlash": true,
    "utf8": true
  },
  "appTheme": {
    "accentColor": "#ecf0f1",
    "backgroundColor": "#ffffff",
    "logoUrl": "https://github.com/vaishnav98/pxt-maker",
    "logo": "docs/static/logo.svg",
    "docsLogo": "docs/static/logo.svg",
    "portraitLogo": "docs/static/logo.svg",
    "footerLogo": "docs/static/logo.svg",
    "organization": "Microsoft MakeCode",
    "organizationUrl": "https://makecode.com/",
    "organizationLogo": "docs/static/Microsoft-logo_rgb_c-gray-square.png",
    "organizationWideLogo": "docs/static/Microsoft-logo_rgb_c-gray.png",
    "homeUrl": "/pxt-beaglebone/",
    "embedUrl": "https://maker.makecode.com/",
    "privacyUrl": "https://go.microsoft.com/fwlink/?LinkId=521839",
    "termsOfUseUrl": "https://go.microsoft.com/fwlink/?LinkID=206977",
    "githubUrl": "https://github.com/vaishnav98/pxt-maker",
    "feedbackUrl": "https://github.com/vaishnav98/pxt-maker/issues",
    "betaUrl": "https://github.com/vaishnav98/pxt-maker",
    "boardName": "board",
    "homeScreenHero": "docs/static/hero.png",
    "debugger": true,
    "print": true,
    "chooseBoardOnNewProject": true,
    "lightToc": true,
    "instructions": true,
    "docMenu": [
      {
        "name": "About",
        "path": "/pxt-beaglebone/docs/about"
      },
      {
        "name": "Boards",
        "path": "/pxt-beaglebone/docs/boards"
      },
      {
        "name": "Blocks",
        "path": "/pxt-beaglebone/docs/blocks"
      },
      {
        "name": "JavaScript",
        "path": "/pxt-beaglebone/docs/javascript"
      },
      {
        "name": "Reference",
        "path": "/pxt-beaglebone/docs/reference"
      },
      {
        "name": "GitHub",
        "path": "https://github.com/vaishnav98/pxt-maker"
      }
    ],
    "invertedMenu": false,
    "invertedToolbox": false,
    "invertedMonaco": false,
    "monacoToolbox": true,
    "highContrast": true,
    "greenScreen": true,
    "simAnimationEnter": "fly right in",
    "simAnimationExit": "fly right out",
    "hasAudio": false,
    "disableBlockIcons": true,
    "blocklyOptions": {
      "grid": {
        "spacing": 20,
        "length": 2,
        "colour": "rgba(189, 195, 199, 0.20)",
        "snap": true
      }
    },
    "blockColors": {
      "loops": "#40bf4a",
      "logic": "#4cbfe6",
      "math": "#9966ff",
      "variables": "#FF6680",
      "text": "#ffab19",
      "advanced": "#00272B",
      "functions": "#005a9e",
      "arrays": "#8A1C7C"
    },
    "allowPackageExtensions": true,
    "extendEditor": true,
    "crowdinProject": "kindscript",
    "scriptManager": true,
    "TOC": [
      {
        "name": "About",
        "subitems": [],
        "path": "/about"
      },
      {
        "name": "FAQ",
        "subitems": [],
        "path": "/faq"
      },
      {
        "name": "Projects",
        "subitems": [],
        "path": "/projects"
      },
      {
        "name": "Reference",
        "subitems": [],
        "path": "/reference"
      },
      {
        "name": "Blocks",
        "subitems": [
          {
            "name": "On Start",
            "subitems": [],
            "path": "/blocks/on-start"
          },
          {
            "name": "Loops",
            "subitems": [
              {
                "name": "repeat",
                "subitems": [],
                "path": "/blocks/loops/repeat"
              },
              {
                "name": "for",
                "subitems": [],
                "path": "/blocks/loops/for"
              },
              {
                "name": "while",
                "subitems": [],
                "path": "/blocks/loops/while"
              },
              {
                "name": "for of",
                "subitems": [],
                "path": "/blocks/loops/for-of"
              }
            ],
            "path": "/blocks/loops"
          },
          {
            "name": "Logic",
            "subitems": [
              {
                "name": "if",
                "subitems": [],
                "path": "/blocks/logic/if"
              },
              {
                "name": "Boolean",
                "subitems": [],
                "path": "/blocks/logic/boolean"
              }
            ],
            "path": "/blocks/logic"
          },
          {
            "name": "Variables",
            "subitems": [
              {
                "name": "assign",
                "subitems": [],
                "path": "/blocks/variables/assign"
              },
              {
                "name": "change var",
                "subitems": [],
                "path": "/blocks/variables/change"
              },
              {
                "name": "var",
                "subitems": [],
                "path": "/blocks/variables/var"
              }
            ],
            "path": "/blocks/variables"
          },
          {
            "name": "Math",
            "subitems": [],
            "path": "/blocks/math"
          },
          {
            "name": "JavaScript blocks",
            "subitems": [],
            "path": "/blocks/javascript-blocks"
          },
          {
            "name": "Custom blocks",
            "subitems": [],
            "path": "/blocks/custom"
          }
        ],
        "path": "/blocks"
      },
      {
        "name": "JavaScript",
        "subitems": [
          {
            "name": "Calling",
            "subitems": [],
            "path": "/javascript/call"
          },
          {
            "name": "Sequencing",
            "subitems": [],
            "path": "/javascript/sequence"
          },
          {
            "name": "Variables",
            "subitems": [],
            "path": "/javascript/variables"
          },
          {
            "name": "Operators",
            "subitems": [],
            "path": "/javascript/operators"
          },
          {
            "name": "Statements",
            "subitems": [],
            "path": "/javascript/statements"
          },
          {
            "name": "Functions",
            "subitems": [],
            "path": "/javascript/functions"
          },
          {
            "name": "Types",
            "subitems": [],
            "path": "/javascript/types"
          },
          {
            "name": "Classes",
            "subitems": [],
            "path": "/javascript/classes"
          },
          {
            "name": "Interfaces",
            "subitems": [],
            "path": "/javascript/interfaces"
          },
          {
            "name": "Generics",
            "subitems": [],
            "path": "/javascript/generics"
          }
        ],
        "path": "/javascript"
      },
      {
        "name": "Types",
        "subitems": [
          {
            "name": "Number",
            "subitems": [],
            "path": "/types/number"
          },
          {
            "name": "String",
            "subitems": [],
            "path": "/types/string"
          },
          {
            "name": "Boolean",
            "subitems": [],
            "path": "/types/boolean"
          },
          {
            "name": "Array",
            "subitems": [],
            "path": "/types/array"
          },
          {
            "name": "Function",
            "subitems": [],
            "path": "/types/function"
          }
        ],
        "path": "/types"
      },
      {
        "name": "",
        "subitems": [
          {
            "name": "About",
            "subitems": [],
            "path": "/about"
          },
          {
            "name": "Support",
            "subitems": [],
            "path": "/support"
          },
          {
            "name": "Translate",
            "subitems": [],
            "path": "/translate"
          },
          {
            "name": "Sharing projects",
            "subitems": [],
            "path": "/share"
          },
          {
            "name": "Offline support",
            "subitems": [],
            "path": "/offline"
          },
          {
            "name": "Save",
            "subitems": [],
            "path": "/save"
          }
        ]
      },
      {
        "name": "",
        "subitems": [
          {
            "name": "Command Line Interface",
            "subitems": [],
            "path": "/cli"
          },
          {
            "name": "Visual Studio Code support",
            "subitems": [],
            "path": "/code"
          },
          {
            "name": "Blocks Embed",
            "subitems": [],
            "path": "/blocks-embed"
          }
        ]
      }
    ],
    "id": "beaglebone",
    "title": "MakeCode Beaglebone - Blocks / Javascript editor",
    "name": "MakeCode Beaglebone",
    "description": "A Blocks / JavaScript code editor for Beaglebone Boards",
    "htmlDocIncludes": {}
  },
  "ignoreDocsErrors": true,
  "versions": {
    "target": "0.0.1",
    "pxt": "5.4.7"
  },
  "blocksprj": {
    "id": "blocksprj",
    "config": {
      "name": "{0}",
      "dependencies": {
        "beagleboneblack": "*"
      },
      "description": "",
      "files": [
        "main.blocks",
        "main.ts",
        "README.md"
      ],
      "additionalFilePaths": []
    },
    "files": {
      "main.blocks": "<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n  <block type=\"forever\" x=\"176\" y=\"0\"></block>\n</xml>",
      "main.ts": "\n",
      "README.md": ""
    }
  },
  "tsprj": {
    "id": "tsprj",
    "config": {
      "name": "{0}",
      "dependencies": {
        "beagleboneblack": "*"
      },
      "description": "",
      "files": [
        "main.ts",
        "README.md"
      ],
      "additionalFilePaths": []
    },
    "files": {
      "main.ts": "\n",
      "README.md": ""
    }
  },
  "bundledpkgs": {
    "core": {
      "README.md": "# core\n\nThe core library for Codal-based targets.\n\n",
      "dal.d.ts": "// Auto-generated. Do not edit.\ndeclare const enum DAL {\n    // /libraries/codal-core/inc/JACDAC/JACDAC.h\n    JD_VERSION = 4,\n    JD_SERIAL_MAX_BUFFERS = 10,\n    JD_SERIAL_RECEIVING = 2,\n    JD_SERIAL_TRANSMITTING = 4,\n    JD_SERIAL_TX_DRAIN_ENABLE = 8,\n    JD_SERIAL_BUS_RISE = 16,\n    JD_SERIAL_EVT_DATA_READY = 1,\n    JD_SERIAL_EVT_BUS_ERROR = 2,\n    JD_SERIAL_EVT_DRAIN = 3,\n    JD_SERIAL_EVT_RX_TIMEOUT = 4,\n    JD_SERIAL_EVT_BUS_CONNECTED = 5,\n    JD_SERIAL_EVT_BUS_DISCONNECTED = 6,\n    JD_SERIAL_HEADER_SIZE = 4,\n    JD_SERIAL_DATA_SIZE = 32,\n    JD_SERIAL_PACKET_SIZE = 36,\n    JD_SERIAL_MAXIMUM_BUFFERS = 10,\n    JD_SERIAL_DMA_TIMEOUT = 2,\n    JD_SERIAL_MAX_BAUD = 1000000,\n    JD_SERIAL_TX_MAX_BACKOFF = 4000,\n    JD_SERIAL_TX_MIN_BACKOFF = 1000,\n    Receiving = 0,\n    Transmitting = 1,\n    High = 2,\n    Low = 3,\n    Baud1M = 1,\n    Baud500K = 2,\n    Baud250K = 4,\n    Baud125K = 8,\n    // /libraries/codal-core/inc/JACDAC/JDAccelerometerDriver.h\n    JD_ACCEL_EVT_SEND_DATA = 1,\n    // /libraries/codal-core/inc/JACDAC/JDBridgeDriver.h\n    JD_BRIDGE_HISTORY_SIZE = 8,\n    // /libraries/codal-core/inc/JACDAC/JDClasses.h\n    STATIC_CLASS_START = 0,\n    STATIC_CLASS_END = 16777215,\n    DYNAMIC_CLASS_END = 4294967295,\n    JD_DRIVER_CLASS_CODAL_START = 0,\n    JD_DRIVER_CLASS_CODAL_END = 2000,\n    JD_DRIVER_CLASS_MAKECODE_START = 2000,\n    JD_DRIVER_CLASS_MAKECODE_END = 4000,\n    JD_DRIVER_CLASS_CONTROL = 0,\n    JD_DRIVER_CLASS_JOYSTICK = 1,\n    JD_DRIVER_CLASS_MESSAGE_BUS = 2,\n    JD_DRIVER_CLASS_BRIDGE = 3,\n    JD_DRIVER_CLASS_BUTTON = 4,\n    JD_DRIVER_CLASS_PIN = 5,\n    JD_DRIVER_CLASS_RELIABILITY_TESTER = 6,\n    JD_DRIVER_CLASS_ACCELEROMETER = 7,\n    JD_DRIVER_CLASS_CAPTOUCH_BUTTON = 8,\n    // /libraries/codal-core/inc/JACDAC/JDMessageBusDriver.h\n    JD_MESSAGEBUS_TYPE_EVENT = 1,\n    JD_MESSAGEBUS_TYPE_LISTEN = 2,\n    // /libraries/codal-core/inc/JACDAC/JDPinDriver.h\n    SetDigital = 0,\n    SetAnalog = 1,\n    SetServo = 2,\n    // /libraries/codal-core/inc/JACDAC/JDProtocol.h\n    JD_DRIVER_EVT_CONNECTED = 65520,\n    JD_DRIVER_EVT_DISCONNECTED = 65521,\n    JD_DRIVER_EVT_PAIRED = 65522,\n    JD_DRIVER_EVT_UNPAIRED = 65523,\n    JD_DRIVER_EVT_PAIR_REJECTED = 65524,\n    JD_DRIVER_EVT_PAIRING_RESPONSE = 65525,\n    JD_DRIVER_EVT_ERROR = 65526,\n    JD_DEVICE_FLAGS_LOCAL = 32768,\n    JD_DEVICE_FLAGS_REMOTE = 16384,\n    JD_DEVICE_FLAGS_BROADCAST = 8192,\n    JD_DEVICE_FLAGS_PAIR = 4096,\n    JD_DEVICE_DRIVER_MODE_MSK = 61440,\n    JD_DEVICE_FLAGS_PAIRABLE = 2048,\n    JD_DEVICE_FLAGS_PAIRED = 1024,\n    JD_DEVICE_FLAGS_PAIRING = 512,\n    JD_DEVICE_FLAGS_INITIALISED = 128,\n    JD_DEVICE_FLAGS_INITIALISING = 64,\n    JD_DEVICE_FLAGS_CP_SEEN = 32,\n    JD_DEVICE_FLAGS_BROADCAST_MAP = 16,\n    JD_DEVICE_ERROR_MSK = 15,\n    JD_LOGIC_DRIVER_MAX_FILTERS = 20,\n    JD_LOGIC_DRIVER_TIMEOUT = 254,\n    JD_LOGIC_ADDRESS_ALLOC_TIME = 254,\n    JD_LOGIC_DRIVER_CTRLPACKET_TIME = 112,\n    JD_LOGIC_DRIVER_EVT_CHANGED = 2,\n    CONTROL_JD_FLAGS_RESERVED = 32768,\n    CONTROL_JD_FLAGS_PAIRING_MODE = 16384,\n    CONTROL_JD_FLAGS_PAIRABLE = 8192,\n    CONTROL_JD_FLAGS_PAIRED = 4096,\n    CONTROL_JD_FLAGS_CONFLICT = 2048,\n    CONTROL_JD_FLAGS_UNCERTAIN = 1024,\n    CONTROL_JD_FLAGS_NACK = 512,\n    CONTROL_JD_FLAGS_ACK = 256,\n    CONTROL_JD_TYPE_HELLO = 1,\n    CONTROL_JD_TYPE_PAIRING_REQUEST = 2,\n    CONTROL_JD_TYPE_ERROR = 3,\n    CONTROL_JD_TYPE_PANIC = 255,\n    JD_PROTOCOL_EVT_SEND_CONTROL = 1,\n    JD_PROTOCOL_DRIVER_ARRAY_SIZE = 20,\n    CONTROL_PACKET_ERROR_NAME_LENGTH = 6,\n    VirtualDriver = 16384,\n    PairedDriver = 12288,\n    HostDriver = 32768,\n    PairableHostDriver = 34816,\n    BroadcastDriver = 40960,\n    SnifferDriver = 24576,\n    DRIVER_OK = 0,\n    DRIVER_CALIBRATION_IN_PROGRESS = 1,\n    DRIVER_CALIBRATION_REQUIRED = 2,\n    DRIVER_NO_RESOURCES = 3,\n    DRIVER_BUSY = 4,\n    DRIVER_COMMS_ERROR = 5,\n    DRIVER_INVALID_STATE = 6,\n    DRIVER_PERIPHERAL_MALFUNCTION = 7,\n    // /libraries/codal-core/inc/JACDAC/JDReliabilityTester.h\n    RELIABILITY_TEST_FINISHED = 7,\n    RELIABILITY_STATUS_TEST_IN_PROGRESS = 2,\n    RELIABILITY_STATUS_TEST_READY = 4,\n    RELIABILITY_STATUS_TEST_FINISHED = 8,\n    // /libraries/codal-core/inc/core/CodalComponent.h\n    DEVICE_ID_BUTTON_A = 1,\n    DEVICE_ID_BUTTON_B = 2,\n    DEVICE_ID_BUTTON_AB = 3,\n    DEVICE_ID_BUTTON_RESET = 4,\n    DEVICE_ID_ACCELEROMETER = 5,\n    DEVICE_ID_COMPASS = 6,\n    DEVICE_ID_DISPLAY = 7,\n    DEVICE_ID_THERMOMETER = 8,\n    DEVICE_ID_RADIO = 9,\n    DEVICE_ID_RADIO_DATA_READY = 10,\n    DEVICE_ID_MULTIBUTTON_ATTACH = 11,\n    DEVICE_ID_SERIAL = 12,\n    DEVICE_ID_GESTURE = 13,\n    DEVICE_ID_SYSTEM_TIMER = 14,\n    DEVICE_ID_SCHEDULER = 15,\n    DEVICE_ID_COMPONENT = 16,\n    DEVICE_ID_LIGHT_SENSOR = 17,\n    DEVICE_ID_TOUCH_SENSOR = 18,\n    DEVICE_ID_SYSTEM_DAC = 19,\n    DEVICE_ID_SYSTEM_MICROPHONE = 20,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR = 21,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL = 22,\n    DEVICE_ID_MSC = 23,\n    DEVICE_ID_SPI = 24,\n    DEVICE_ID_DISTANCE = 25,\n    DEVICE_ID_GYROSCOPE = 26,\n    DEVICE_ID_HUMIDITY = 27,\n    DEVICE_ID_PRESSURE = 28,\n    DEVICE_ID_JACDAC0 = 29,\n    DEVICE_ID_JACDAC1 = 30,\n    DEVICE_ID_JACDAC_PROTOCOL = 31,\n    DEVICE_ID_JACKROUTER = 32,\n    DEVICE_ID_GAME_ENGINE = 33,\n    DEVICE_ID_GAME_STATE_MANAGER = 34,\n    DEVICE_ID_SPRITE = 35,\n    DEVICE_ID_SINGLE_WIRE_SERIAL = 36,\n    DEVICE_ID_IO_P0 = 100,\n    DEVICE_ID_MESSAGE_BUS_LISTENER = 1021,\n    DEVICE_ID_NOTIFY_ONE = 1022,\n    DEVICE_ID_NOTIFY = 1023,\n    DEVICE_ID_BUTTON_UP = 2000,\n    DEVICE_ID_BUTTON_DOWN = 2001,\n    DEVICE_ID_BUTTON_LEFT = 2002,\n    DEVICE_ID_BUTTON_RIGHT = 2003,\n    DEVICE_ID_JD_DYNAMIC_ID = 3000,\n    DEVICE_COMPONENT_RUNNING = 4096,\n    DEVICE_COMPONENT_STATUS_SYSTEM_TICK = 8192,\n    DEVICE_COMPONENT_STATUS_IDLE_TICK = 16384,\n    DEVICE_COMPONENT_LISTENERS_CONFIGURED = 1,\n    DEVICE_COMPONENT_EVT_SYSTEM_TICK = 1,\n    // /libraries/codal-core/inc/core/CodalFiber.h\n    DEVICE_SCHEDULER_RUNNING = 1,\n    DEVICE_SCHEDULER_IDLE = 2,\n    DEVICE_FIBER_FLAG_FOB = 1,\n    DEVICE_FIBER_FLAG_PARENT = 2,\n    DEVICE_FIBER_FLAG_CHILD = 4,\n    DEVICE_FIBER_FLAG_DO_NOT_PAGE = 8,\n    DEVICE_SCHEDULER_EVT_TICK = 1,\n    DEVICE_SCHEDULER_EVT_IDLE = 2,\n    // /libraries/codal-core/inc/core/CodalListener.h\n    MESSAGE_BUS_LISTENER_PARAMETERISED = 1,\n    MESSAGE_BUS_LISTENER_METHOD = 2,\n    MESSAGE_BUS_LISTENER_BUSY = 4,\n    MESSAGE_BUS_LISTENER_REENTRANT = 8,\n    MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY = 16,\n    MESSAGE_BUS_LISTENER_DROP_IF_BUSY = 32,\n    MESSAGE_BUS_LISTENER_NONBLOCKING = 64,\n    MESSAGE_BUS_LISTENER_URGENT = 128,\n    MESSAGE_BUS_LISTENER_DELETING = 32768,\n    MESSAGE_BUS_LISTENER_IMMEDIATE = 192,\n    // /libraries/codal-core/inc/core/ErrorNo.h\n    DEVICE_OK = 0,\n    DEVICE_INVALID_PARAMETER = -1001,\n    DEVICE_NOT_SUPPORTED = -1002,\n    DEVICE_CALIBRATION_IN_PROGRESS = -1003,\n    DEVICE_CALIBRATION_REQUIRED = -1004,\n    DEVICE_NO_RESOURCES = -1005,\n    DEVICE_BUSY = -1006,\n    DEVICE_CANCELLED = -1007,\n    DEVICE_I2C_ERROR = -1010,\n    DEVICE_SERIAL_IN_USE = -1011,\n    DEVICE_NO_DATA = -1012,\n    DEVICE_NOT_IMPLEMENTED = -1013,\n    DEVICE_SPI_ERROR = -1014,\n    DEVICE_INVALID_STATE = -1015,\n    DEVICE_OOM = 20,\n    DEVICE_HEAP_ERROR = 30,\n    DEVICE_NULL_DEREFERENCE = 40,\n    DEVICE_USB_ERROR = 50,\n    DEVICE_HARDWARE_CONFIGURATION_ERROR = 90,\n    // /libraries/codal-core/inc/core/NotifyEvents.h\n    DISPLAY_EVT_FREE = 1,\n    CODAL_SERIAL_EVT_TX_EMPTY = 2,\n    BLE_EVT_SERIAL_TX_EMPTY = 3,\n    ARCADE_PLAYER_JOIN_RESULT = 4,\n    DEVICE_NOTIFY_USER_EVENT_BASE = 1024,\n    // /libraries/codal-core/inc/driver-models/AbstractButton.h\n    DEVICE_BUTTON_EVT_DOWN = 1,\n    DEVICE_BUTTON_EVT_UP = 2,\n    DEVICE_BUTTON_EVT_CLICK = 3,\n    DEVICE_BUTTON_EVT_LONG_CLICK = 4,\n    DEVICE_BUTTON_EVT_HOLD = 5,\n    DEVICE_BUTTON_EVT_DOUBLE_CLICK = 6,\n    DEVICE_BUTTON_LONG_CLICK_TIME = 1000,\n    DEVICE_BUTTON_HOLD_TIME = 1500,\n    DEVICE_BUTTON_STATE = 1,\n    DEVICE_BUTTON_STATE_HOLD_TRIGGERED = 2,\n    DEVICE_BUTTON_STATE_CLICK = 4,\n    DEVICE_BUTTON_STATE_LONG_CLICK = 8,\n    DEVICE_BUTTON_SIGMA_MIN = 0,\n    DEVICE_BUTTON_SIGMA_MAX = 12,\n    DEVICE_BUTTON_SIGMA_THRESH_HI = 8,\n    DEVICE_BUTTON_SIGMA_THRESH_LO = 2,\n    DEVICE_BUTTON_DOUBLE_CLICK_THRESH = 50,\n    DEVICE_BUTTON_SIMPLE_EVENTS = 0,\n    DEVICE_BUTTON_ALL_EVENTS = 1,\n    ACTIVE_LOW = 0,\n    ACTIVE_HIGH = 1,\n    // /libraries/codal-core/inc/driver-models/Accelerometer.h\n    ACCELEROMETER_IMU_DATA_VALID = 2,\n    ACCELEROMETER_EVT_DATA_UPDATE = 1,\n    ACCELEROMETER_EVT_NONE = 0,\n    ACCELEROMETER_EVT_TILT_UP = 1,\n    ACCELEROMETER_EVT_TILT_DOWN = 2,\n    ACCELEROMETER_EVT_TILT_LEFT = 3,\n    ACCELEROMETER_EVT_TILT_RIGHT = 4,\n    ACCELEROMETER_EVT_FACE_UP = 5,\n    ACCELEROMETER_EVT_FACE_DOWN = 6,\n    ACCELEROMETER_EVT_FREEFALL = 7,\n    ACCELEROMETER_EVT_3G = 8,\n    ACCELEROMETER_EVT_6G = 9,\n    ACCELEROMETER_EVT_8G = 10,\n    ACCELEROMETER_EVT_SHAKE = 11,\n    ACCELEROMETER_REST_TOLERANCE = 200,\n    ACCELEROMETER_TILT_TOLERANCE = 200,\n    ACCELEROMETER_FREEFALL_TOLERANCE = 400,\n    ACCELEROMETER_SHAKE_TOLERANCE = 400,\n    ACCELEROMETER_3G_TOLERANCE = 3072,\n    ACCELEROMETER_6G_TOLERANCE = 6144,\n    ACCELEROMETER_8G_TOLERANCE = 8192,\n    ACCELEROMETER_GESTURE_DAMPING = 5,\n    ACCELEROMETER_SHAKE_DAMPING = 10,\n    ACCELEROMETER_SHAKE_RTX = 30,\n    ACCELEROMETER_SHAKE_COUNT_THRESHOLD = 4,\n    // /libraries/codal-core/inc/driver-models/Compass.h\n    COMPASS_STATUS_RUNNING = 1,\n    COMPASS_STATUS_CALIBRATED = 2,\n    COMPASS_STATUS_CALIBRATING = 4,\n    COMPASS_STATUS_ADDED_TO_IDLE = 8,\n    COMPASS_EVT_DATA_UPDATE = 1,\n    COMPASS_EVT_CONFIG_NEEDED = 2,\n    COMPASS_EVT_CALIBRATE = 3,\n    COMPASS_EVT_CALIBRATION_NEEDED = 4,\n    // /libraries/codal-core/inc/driver-models/Gyroscope.h\n    GYROSCOPE_IMU_DATA_VALID = 2,\n    GYROSCOPE_EVT_DATA_UPDATE = 1,\n    // /libraries/codal-core/inc/driver-models/Pin.h\n    IO_STATUS_DIGITAL_IN = 1,\n    IO_STATUS_DIGITAL_OUT = 2,\n    IO_STATUS_ANALOG_IN = 4,\n    IO_STATUS_ANALOG_OUT = 8,\n    IO_STATUS_TOUCH_IN = 16,\n    IO_STATUS_EVENT_ON_EDGE = 32,\n    IO_STATUS_EVENT_PULSE_ON_EDGE = 64,\n    DEVICE_PIN_MAX_OUTPUT = 1023,\n    DEVICE_PIN_MAX_SERVO_RANGE = 180,\n    DEVICE_PIN_DEFAULT_SERVO_RANGE = 2000,\n    DEVICE_PIN_DEFAULT_SERVO_CENTER = 1500,\n    DEVICE_PIN_EVENT_NONE = 0,\n    DEVICE_PIN_EVENT_ON_EDGE = 1,\n    DEVICE_PIN_EVENT_ON_PULSE = 2,\n    DEVICE_PIN_EVENT_ON_TOUCH = 3,\n    DEVICE_PIN_EVT_RISE = 2,\n    DEVICE_PIN_EVT_FALL = 3,\n    DEVICE_PIN_EVT_PULSE_HI = 4,\n    DEVICE_PIN_EVT_PULSE_LO = 5,\n    PIN_CAPABILITY_DIGITAL = 1,\n    PIN_CAPABILITY_ANALOG = 2,\n    PIN_CAPABILITY_AD = 3,\n    PIN_CAPABILITY_ALL = 3,\n    None = 0,\n    Down = 1,\n    Up = 2,\n    // /libraries/codal-core/inc/driver-models/Radio.h\n    RADIO_EVT_DATA_READY = 2,\n    // /libraries/codal-core/inc/driver-models/SPIFlash.h\n    SPIFLASH_PAGE_SIZE = 256,\n    SPIFLASH_SMALL_ROW_PAGES = 16,\n    SPIFLASH_BIG_ROW_PAGES = 256,\n    // /libraries/codal-core/inc/driver-models/Sensor.h\n    SENSOR_THRESHOLD_LOW = 1,\n    SENSOR_THRESHOLD_HIGH = 2,\n    SENSOR_UPDATE_NEEDED = 3,\n    SENSOR_INITIALISED = 1,\n    SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    SENSOR_LOW_THRESHOLD_PASSED = 4,\n    SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    SENSOR_DEFAULT_SENSITIVITY = 868,\n    SENSOR_DEFAULT_SAMPLE_PERIOD = 500,\n    // /libraries/codal-core/inc/driver-models/Serial.h\n    CODAL_SERIAL_DEFAULT_BAUD_RATE = 115200,\n    CODAL_SERIAL_DEFAULT_BUFFER_SIZE = 20,\n    CODAL_SERIAL_EVT_DELIM_MATCH = 1,\n    CODAL_SERIAL_EVT_HEAD_MATCH = 2,\n    CODAL_SERIAL_EVT_RX_FULL = 3,\n    CODAL_SERIAL_RX_IN_USE = 1,\n    CODAL_SERIAL_TX_IN_USE = 2,\n    CODAL_SERIAL_RX_BUFF_INIT = 4,\n    CODAL_SERIAL_TX_BUFF_INIT = 8,\n    ASYNC = 0,\n    SYNC_SPINWAIT = 1,\n    SYNC_SLEEP = 2,\n    RxInterrupt = 0,\n    TxInterrupt = 1,\n    // /libraries/codal-core/inc/driver-models/SingleWireSerial.h\n    SWS_EVT_DATA_RECEIVED = 1,\n    SWS_EVT_DATA_SENT = 2,\n    SWS_EVT_ERROR = 3,\n    SWS_EVT_DATA_DROPPED = 4,\n    SingleWireRx = 0,\n    SingleWireTx = 1,\n    SingleWireDisconnected = 2,\n    // /libraries/codal-core/inc/driver-models/Timer.h\n    CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE = 10,\n    // /libraries/codal-core/inc/drivers/AnalogSensor.h\n    ANALOG_THRESHOLD_LOW = 1,\n    ANALOG_THRESHOLD_HIGH = 2,\n    ANALOG_SENSOR_UPDATE_NEEDED = 3,\n    ANALOG_SENSOR_INITIALISED = 1,\n    ANALOG_SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    ANALOG_SENSOR_LOW_THRESHOLD_PASSED = 4,\n    ANALOG_SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    ANALOG_SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    // /libraries/codal-core/inc/drivers/AnimatedDisplay.h\n    DISPLAY_EVT_ANIMATION_COMPLETE = 1,\n    DISPLAY_DEFAULT_AUTOCLEAR = 1,\n    DISPLAY_SPACING = 1,\n    DISPLAY_ANIMATE_DEFAULT_POS = -255,\n    DISPLAY_DEFAULT_SCROLL_SPEED = 120,\n    DISPLAY_DEFAULT_SCROLL_STRIDE = -1,\n    DISPLAY_DEFAULT_PRINT_SPEED = 400,\n    ANIMATION_MODE_NONE = 0,\n    ANIMATION_MODE_STOPPED = 1,\n    ANIMATION_MODE_SCROLL_TEXT = 2,\n    ANIMATION_MODE_PRINT_TEXT = 3,\n    ANIMATION_MODE_SCROLL_IMAGE = 4,\n    ANIMATION_MODE_ANIMATE_IMAGE = 5,\n    ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR = 6,\n    ANIMATION_MODE_PRINT_CHARACTER = 7,\n    // /libraries/codal-core/inc/drivers/FAT.h\n    FAT_RESERVED_SECTORS = 1,\n    FAT_ROOT_DIR_SECTORS = 4,\n    // /libraries/codal-core/inc/drivers/HID.h\n    HID_REQUEST_GET_REPORT = 1,\n    HID_REQUEST_GET_IDLE = 2,\n    HID_REQUEST_GET_PROTOCOL = 3,\n    HID_REQUEST_SET_REPORT = 9,\n    HID_REQUEST_SET_IDLE = 10,\n    HID_REQUEST_SET_PROTOCOL = 11,\n    // /libraries/codal-core/inc/drivers/HIDKeyboard.h\n    HID_KEYBOARD_NUM_REPORTS = 3,\n    HID_KEYBOARD_REPORT_GENERIC = 1,\n    HID_KEYBOARD_REPORT_CONSUMER = 2,\n    HID_KEYBOARD_KEYSTATE_SIZE_GENERIC = 8,\n    HID_KEYBOARD_KEYSTATE_SIZE_CONSUMER = 2,\n    HID_KEYBOARD_MODIFIER_OFFSET = 2,\n    HID_KEYBOARD_DELAY_DEFAULT = 10,\n    PressKey = 0,\n    ReleaseKey = 1,\n    // /libraries/codal-core/inc/drivers/JackRouter.h\n    AllDown = 1,\n    HeadPhones = 2,\n    Buzzer = 3,\n    BuzzerAndSerial = 4,\n    // /libraries/codal-core/inc/drivers/KeyMap.h\n    KEYMAP_ALL_KEYS_UP_Val = 1,\n    KEYMAP_ALL_KEYS_UP_POS = 28,\n    KEYMAP_NORMAL_KEY_Val = 0,\n    KEYMAP_MODIFIER_KEY_Val = 1,\n    KEYMAP_MODIFIER_POS = 29,\n    KEYMAP_MEDIA_KEY_Val = 1,\n    KEYMAP_MEDIA_POS = 30,\n    KEYMAP_KEY_UP_Val = 0,\n    KEYMAP_KEY_DOWN_Val = 1,\n    KEYMAP_KEY_DOWN_POS = 31,\n    // /libraries/codal-core/inc/drivers/LEDMatrix.h\n    LED_MATRIX_GREYSCALE_BIT_DEPTH = 8,\n    LED_MATRIX_EVT_LIGHT_SENSE = 2,\n    LED_MATRIX_EVT_FRAME_TIMEOUT = 3,\n    LED_MATRIX_MINIMUM_BRIGHTNESS = 1,\n    LED_MATRIX_MAXIMUM_BRIGHTNESS = 255,\n    LED_MATRIX_DEFAULT_BRIGHTNESS = 255,\n    DISPLAY_MODE_BLACK_AND_WHITE = 0,\n    DISPLAY_MODE_GREYSCALE = 1,\n    DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE = 2,\n    MATRIX_DISPLAY_ROTATION_0 = 0,\n    MATRIX_DISPLAY_ROTATION_90 = 1,\n    MATRIX_DISPLAY_ROTATION_180 = 2,\n    MATRIX_DISPLAY_ROTATION_270 = 3,\n    NO_CONN = 0,\n    // /libraries/codal-core/inc/drivers/MAG3110.h\n    MAG3110_DEFAULT_ADDR = 29,\n    MAG_DR_STATUS = 0,\n    MAG_OUT_X_MSB = 1,\n    MAG_OUT_X_LSB = 2,\n    MAG_OUT_Y_MSB = 3,\n    MAG_OUT_Y_LSB = 4,\n    MAG_OUT_Z_MSB = 5,\n    MAG_OUT_Z_LSB = 6,\n    MAG_WHOAMI = 7,\n    MAG_SYSMOD = 8,\n    MAG_OFF_X_MSB = 9,\n    MAG_OFF_X_LSB = 10,\n    MAG_OFF_Y_MSB = 11,\n    MAG_OFF_Y_LSB = 12,\n    MAG_OFF_Z_MSB = 13,\n    MAG_OFF_Z_LSB = 14,\n    MAG_DIE_TEMP = 15,\n    MAG_CTRL_REG1 = 16,\n    MAG_CTRL_REG2 = 17,\n    MAG3110_SAMPLE_RATES = 11,\n    MAG3110_WHOAMI_VAL = 196,\n    // /libraries/codal-core/inc/drivers/MMA8653.h\n    MICROBIT_ACCEL_PITCH_ROLL_VALID = 2,\n    MICROBIT_ACCEL_ADDED_TO_IDLE = 4,\n    MMA8653_DEFAULT_ADDR = 58,\n    MMA8653_STATUS = 0,\n    MMA8653_OUT_X_MSB = 1,\n    MMA8653_WHOAMI = 13,\n    MMA8653_XYZ_DATA_CFG = 14,\n    MMA8653_CTRL_REG1 = 42,\n    MMA8653_CTRL_REG2 = 43,\n    MMA8653_CTRL_REG3 = 44,\n    MMA8653_CTRL_REG4 = 45,\n    MMA8653_CTRL_REG5 = 46,\n    MMA8653_WHOAMI_VAL = 90,\n    MMA8653_SAMPLE_RANGES = 3,\n    MMA8653_SAMPLE_RATES = 8,\n    // /libraries/codal-core/inc/drivers/MultiButton.h\n    MULTI_BUTTON_STATE_1 = 1,\n    MULTI_BUTTON_STATE_2 = 2,\n    MULTI_BUTTON_HOLD_TRIGGERED_1 = 4,\n    MULTI_BUTTON_HOLD_TRIGGERED_2 = 8,\n    MULTI_BUTTON_SUPRESSED_1 = 16,\n    MULTI_BUTTON_SUPRESSED_2 = 32,\n    MULTI_BUTTON_ATTACHED = 64,\n    // /libraries/codal-core/inc/drivers/ST7735.h\n    MADCTL_MY = 128,\n    MADCTL_MX = 64,\n    MADCTL_MV = 32,\n    MADCTL_ML = 16,\n    MADCTL_RGB = 0,\n    MADCTL_BGR = 8,\n    MADCTL_MH = 4,\n    // /libraries/codal-core/inc/drivers/TouchButton.h\n    TOUCH_BUTTON_CALIBRATION_PERIOD = 10,\n    TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET = 2,\n    TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET = 5,\n    TOUCH_BUTTON_CALIBRATING = 16,\n    // /libraries/codal-core/inc/drivers/TouchSensor.h\n    TOUCH_SENSOR_MAX_BUTTONS = 10,\n    TOUCH_SENSOR_SAMPLE_PERIOD = 50,\n    TOUCH_SENSE_SAMPLE_MAX = 1000,\n    TOUCH_SENSOR_UPDATE_NEEDED = 1,\n    // /libraries/codal-core/inc/drivers/USB_HID_Keys.h\n    KEY_MOD_LCTRL = 1,\n    KEY_MOD_LSHIFT = 2,\n    KEY_MOD_LALT = 4,\n    KEY_MOD_LMETA = 8,\n    KEY_MOD_RCTRL = 16,\n    KEY_MOD_RSHIFT = 32,\n    KEY_MOD_RALT = 64,\n    KEY_MOD_RMETA = 128,\n    KEY_NONE = 0,\n    KEY_ERR_OVF = 1,\n    KEY_A = 4,\n    KEY_B = 5,\n    KEY_C = 6,\n    KEY_D = 7,\n    KEY_E = 8,\n    KEY_F = 9,\n    KEY_G = 10,\n    KEY_H = 11,\n    KEY_I = 12,\n    KEY_J = 13,\n    KEY_K = 14,\n    KEY_L = 15,\n    KEY_M = 16,\n    KEY_N = 17,\n    KEY_O = 18,\n    KEY_P = 19,\n    KEY_Q = 20,\n    KEY_R = 21,\n    KEY_S = 22,\n    KEY_T = 23,\n    KEY_U = 24,\n    KEY_V = 25,\n    KEY_W = 26,\n    KEY_X = 27,\n    KEY_Y = 28,\n    KEY_Z = 29,\n    KEY_1 = 30,\n    KEY_2 = 31,\n    KEY_3 = 32,\n    KEY_4 = 33,\n    KEY_5 = 34,\n    KEY_6 = 35,\n    KEY_7 = 36,\n    KEY_8 = 37,\n    KEY_9 = 38,\n    KEY_0 = 39,\n    KEY_ENTER = 40,\n    KEY_ESC = 41,\n    KEY_BACKSPACE = 42,\n    KEY_TAB = 43,\n    KEY_SPACE = 44,\n    KEY_MINUS = 45,\n    KEY_EQUAL = 46,\n    KEY_LEFTBRACE = 47,\n    KEY_RIGHTBRACE = 48,\n    KEY_BACKSLASH = 49,\n    KEY_HASHTILDE = 50,\n    KEY_SEMICOLON = 51,\n    KEY_APOSTROPHE = 52,\n    KEY_GRAVE = 53,\n    KEY_COMMA = 54,\n    KEY_DOT = 55,\n    KEY_SLASH = 56,\n    KEY_CAPSLOCK = 57,\n    KEY_F1 = 58,\n    KEY_F2 = 59,\n    KEY_F3 = 60,\n    KEY_F4 = 61,\n    KEY_F5 = 62,\n    KEY_F6 = 63,\n    KEY_F7 = 64,\n    KEY_F8 = 65,\n    KEY_F9 = 66,\n    KEY_F10 = 67,\n    KEY_F11 = 68,\n    KEY_F12 = 69,\n    KEY_SYSRQ = 70,\n    KEY_SCROLLLOCK = 71,\n    KEY_PAUSE = 72,\n    KEY_INSERT = 73,\n    KEY_HOME = 74,\n    KEY_PAGEUP = 75,\n    KEY_DELETE = 76,\n    KEY_END = 77,\n    KEY_PAGEDOWN = 78,\n    KEY_RIGHT = 79,\n    KEY_LEFT = 80,\n    KEY_DOWN = 81,\n    KEY_UP = 82,\n    KEY_NUMLOCK = 83,\n    KEY_KPSLASH = 84,\n    KEY_KPASTERISK = 85,\n    KEY_KPMINUS = 86,\n    KEY_KPPLUS = 87,\n    KEY_KPENTER = 88,\n    KEY_KP1 = 89,\n    KEY_KP2 = 90,\n    KEY_KP3 = 91,\n    KEY_KP4 = 92,\n    KEY_KP5 = 93,\n    KEY_KP6 = 94,\n    KEY_KP7 = 95,\n    KEY_KP8 = 96,\n    KEY_KP9 = 97,\n    KEY_KP0 = 98,\n    KEY_KPDOT = 99,\n    KEY_102ND = 100,\n    KEY_COMPOSE = 101,\n    KEY_POWER = 102,\n    KEY_KPEQUAL = 103,\n    KEY_F13 = 104,\n    KEY_F14 = 105,\n    KEY_F15 = 106,\n    KEY_F16 = 107,\n    KEY_F17 = 108,\n    KEY_F18 = 109,\n    KEY_F19 = 110,\n    KEY_F20 = 111,\n    KEY_F21 = 112,\n    KEY_F22 = 113,\n    KEY_F23 = 114,\n    KEY_F24 = 115,\n    KEY_OPEN = 116,\n    KEY_HELP = 117,\n    KEY_PROPS = 118,\n    KEY_FRONT = 119,\n    KEY_STOP = 120,\n    KEY_AGAIN = 121,\n    KEY_UNDO = 122,\n    KEY_CUT = 123,\n    KEY_COPY = 124,\n    KEY_PASTE = 125,\n    KEY_FIND = 126,\n    KEY_MUTE = 127,\n    KEY_VOLUMEUP = 128,\n    KEY_VOLUMEDOWN = 129,\n    KEY_KPCOMMA = 133,\n    KEY_RO = 135,\n    KEY_KATAKANAHIRAGANA = 136,\n    KEY_YEN = 137,\n    KEY_HENKAN = 138,\n    KEY_MUHENKAN = 139,\n    KEY_KPJPCOMMA = 140,\n    KEY_HANGEUL = 144,\n    KEY_HANJA = 145,\n    KEY_KATAKANA = 146,\n    KEY_HIRAGANA = 147,\n    KEY_ZENKAKUHANKAKU = 148,\n    KEY_KPLEFTPAREN = 182,\n    KEY_KPRIGHTPAREN = 183,\n    KEY_LEFTCTRL = 224,\n    KEY_LEFTSHIFT = 225,\n    KEY_LEFTALT = 226,\n    KEY_LEFTMETA = 227,\n    KEY_RIGHTCTRL = 228,\n    KEY_RIGHTSHIFT = 229,\n    KEY_RIGHTALT = 230,\n    KEY_RIGHTMETA = 231,\n    KEY_MEDIA_PLAYPAUSE = 232,\n    KEY_MEDIA_STOPCD = 233,\n    KEY_MEDIA_PREVIOUSSONG = 234,\n    KEY_MEDIA_NEXTSONG = 235,\n    KEY_MEDIA_EJECTCD = 236,\n    KEY_MEDIA_VOLUMEUP = 237,\n    KEY_MEDIA_VOLUMEDOWN = 238,\n    KEY_MEDIA_MUTE = 239,\n    KEY_MEDIA_WWW = 240,\n    KEY_MEDIA_BACK = 241,\n    KEY_MEDIA_FORWARD = 242,\n    KEY_MEDIA_STOP = 243,\n    KEY_MEDIA_FIND = 244,\n    KEY_MEDIA_SCROLLUP = 245,\n    KEY_MEDIA_SCROLLDOWN = 246,\n    KEY_MEDIA_EDIT = 247,\n    KEY_MEDIA_SLEEP = 248,\n    KEY_MEDIA_COFFEE = 249,\n    KEY_MEDIA_REFRESH = 250,\n    KEY_MEDIA_CALC = 251,\n    // /libraries/codal-core/inc/drivers/uf2format.h\n    UF2FORMAT_H = 1,\n    APP_START_ADDRESS = 8192,\n    UF2_FLAG_NOFLASH = 1,\n    // /libraries/codal-core/inc/streams/DataStream.h\n    DATASTREAM_MAXIMUM_BUFFERS = 1,\n    // /libraries/codal-core/inc/streams/LevelDetector.h\n    LEVEL_THRESHOLD_LOW = 1,\n    LEVEL_THRESHOLD_HIGH = 2,\n    LEVEL_DETECTOR_INITIALISED = 1,\n    LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/LevelDetectorSPL.h\n    LEVEL_DETECTOR_SPL_INITIALISED = 1,\n    LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/Synthesizer.h\n    SYNTHESIZER_SAMPLE_RATE = 44100,\n    TONE_WIDTH = 1024,\n    // /libraries/codal-core/inc/types/BitmapFont.h\n    BITMAP_FONT_WIDTH = 5,\n    BITMAP_FONT_HEIGHT = 5,\n    BITMAP_FONT_ASCII_START = 32,\n    BITMAP_FONT_ASCII_END = 126,\n    // /libraries/codal-core/inc/types/CoordinateSystem.h\n    COORDINATE_SPACE_ROTATED_0 = 0,\n    COORDINATE_SPACE_ROTATED_90 = 1,\n    COORDINATE_SPACE_ROTATED_180 = 2,\n    COORDINATE_SPACE_ROTATED_270 = 3,\n    RAW = 0,\n    SIMPLE_CARTESIAN = 1,\n    NORTH_EAST_DOWN = 2,\n    NORTH_EAST_UP = 3,\n    // /libraries/codal-core/inc/types/Event.h\n    DEVICE_ID_ANY = 0,\n    DEVICE_EVT_ANY = 0,\n    CREATE_ONLY = 0,\n    CREATE_AND_FIRE = 1,\n    DEVICE_EVENT_DEFAULT_LAUNCH_MODE = 1,\n    // /libraries/codal-core/inc/types/RefCounted.h\n    REF_TAG_STRING = 1,\n    REF_TAG_BUFFER = 2,\n    REF_TAG_IMAGE = 3,\n    REF_TAG_USER = 32,\n    // /pxtapp/configkeys.h\n    CFG_PIN_ACCELEROMETER_INT = 1,\n    CFG_PIN_ACCELEROMETER_SCL = 2,\n    CFG_PIN_ACCELEROMETER_SDA = 3,\n    CFG_PIN_BTN_A = 4,\n    CFG_PIN_BTN_B = 5,\n    CFG_PIN_BTN_SLIDE = 6,\n    CFG_PIN_DOTSTAR_CLOCK = 7,\n    CFG_PIN_DOTSTAR_DATA = 8,\n    CFG_PIN_FLASH_CS = 9,\n    CFG_PIN_FLASH_MISO = 10,\n    CFG_PIN_FLASH_MOSI = 11,\n    CFG_PIN_FLASH_SCK = 12,\n    CFG_PIN_LED = 13,\n    CFG_PIN_LIGHT = 14,\n    CFG_PIN_MICROPHONE = 15,\n    CFG_PIN_MIC_CLOCK = 16,\n    CFG_PIN_MIC_DATA = 17,\n    CFG_PIN_MISO = 18,\n    CFG_PIN_MOSI = 19,\n    CFG_PIN_NEOPIXEL = 20,\n    CFG_PIN_RX = 21,\n    CFG_PIN_RXLED = 22,\n    CFG_PIN_SCK = 23,\n    CFG_PIN_SCL = 24,\n    CFG_PIN_SDA = 25,\n    CFG_PIN_SPEAKER_AMP = 26,\n    CFG_PIN_TEMPERATURE = 27,\n    CFG_PIN_TX = 28,\n    CFG_PIN_TXLED = 29,\n    CFG_PIN_IR_OUT = 30,\n    CFG_PIN_IR_IN = 31,\n    CFG_PIN_DISPLAY_SCK = 32,\n    CFG_PIN_DISPLAY_MISO = 33,\n    CFG_PIN_DISPLAY_MOSI = 34,\n    CFG_PIN_DISPLAY_CS = 35,\n    CFG_PIN_DISPLAY_DC = 36,\n    CFG_DISPLAY_WIDTH = 37,\n    CFG_DISPLAY_HEIGHT = 38,\n    CFG_DISPLAY_CFG0 = 39,\n    CFG_DISPLAY_CFG1 = 40,\n    CFG_DISPLAY_CFG2 = 41,\n    CFG_DISPLAY_CFG3 = 42,\n    CFG_PIN_DISPLAY_RST = 43,\n    CFG_PIN_DISPLAY_BL = 44,\n    CFG_PIN_SERVO_1 = 45,\n    CFG_PIN_SERVO_2 = 46,\n    CFG_PIN_BTN_LEFT = 47,\n    CFG_PIN_BTN_RIGHT = 48,\n    CFG_PIN_BTN_UP = 49,\n    CFG_PIN_BTN_DOWN = 50,\n    CFG_PIN_BTN_MENU = 51,\n    CFG_PIN_LED_R = 52,\n    CFG_PIN_LED_G = 53,\n    CFG_PIN_LED_B = 54,\n    CFG_PIN_LED1 = 55,\n    CFG_PIN_LED2 = 56,\n    CFG_PIN_LED3 = 57,\n    CFG_PIN_LED4 = 58,\n    CFG_SPEAKER_VOLUME = 59,\n    CFG_PIN_JACK_TX = 60,\n    CFG_PIN_JACK_SENSE = 61,\n    CFG_PIN_JACK_HPEN = 62,\n    CFG_PIN_JACK_BZEN = 63,\n    CFG_PIN_JACK_PWREN = 64,\n    CFG_PIN_JACK_SND = 65,\n    CFG_PIN_JACK_BUSLED = 66,\n    CFG_PIN_JACK_COMMLED = 67,\n    CFG_PIN_BTNMX_LATCH = 66,\n    CFG_PIN_BTNMX_CLOCK = 67,\n    CFG_PIN_BTNMX_DATA = 68,\n    CFG_PIN_BTN_SOFT_RESET = 69,\n    CFG_ACCELEROMETER_TYPE = 70,\n    ACCELEROMETER_TYPE_LIS3DH = 50,\n    ACCELEROMETER_TYPE_MMA8453 = 56,\n    ACCELEROMETER_TYPE_FXOS8700 = 60,\n    ACCELEROMETER_TYPE_MMA8653 = 58,\n    ACCELEROMETER_TYPE_MSA300 = 76,\n    CFG_USR0 = 1,\n    CFG_USR1 = 2,\n    CFG_USR2 = 3,\n    CFG_USR3 = 4,\n    CFG_P8_01 = 100,\n    CFG_P8_02 = 101,\n    CFG_P8_03 = 102,\n    CFG_P8_04 = 103,\n    CFG_P8_05 = 104,\n    CFG_P8_06 = 105,\n    CFG_P8_07 = 106,\n    CFG_P8_08 = 107,\n    CFG_P8_09 = 108,\n    CFG_P8_10 = 109,\n    CFG_P8_11 = 110,\n    CFG_P8_12 = 111,\n    CFG_P8_13 = 112,\n    CFG_P8_14 = 113,\n    CFG_P8_15 = 114,\n    CFG_P8_16 = 115,\n    CFG_P8_17 = 116,\n    CFG_P8_18 = 117,\n    CFG_P8_19 = 118,\n    CFG_P8_20 = 119,\n    CFG_P8_21 = 120,\n    CFG_P8_22 = 121,\n    CFG_P8_23 = 122,    \n    CFG_P8_24 = 123,\n    CFG_P8_25 = 124,\n    CFG_P8_26 = 125,    \n    CFG_P8_27 = 126,\n    CFG_P8_28 = 127,\n    CFG_P8_29 = 128,\n    CFG_P8_30 = 129,\n    CFG_P8_31 = 130,\n    CFG_P8_32 = 131,\n    CFG_P8_33 = 132,\n    CFG_P8_34 = 133,\n    CFG_P8_35 = 134,\n    CFG_P8_36 = 135,\n    CFG_P8_37 = 136,\n    CFG_P8_38 = 137,\n    CFG_P8_39 = 138,\n    CFG_P8_40 = 139,\n    CFG_P8_41 = 140,    \n    CFG_P8_42 = 141,    \n    CFG_P8_43 = 142,\n    CFG_P8_44 = 143,    \n    CFG_P8_45 = 144,    \n    CFG_P8_46 = 145,    \n    CFG_P9_01 = 150,\n    CFG_P9_02 = 151,\n    CFG_P9_03 = 152,\n    CFG_P9_04 = 153,\n    CFG_P9_05 = 154,\n    CFG_P9_06 = 155,\n    CFG_P9_07 = 156,\n    CFG_P9_08 = 157,\n    CFG_P9_09 = 158,\n    CFG_P9_10 = 159,\n    CFG_P9_11 = 160,\n    CFG_P9_12 = 161,\n    CFG_P9_13 = 162,\n    CFG_P9_14 = 163,\n    CFG_P9_15 = 164,\n    CFG_P9_16 = 165,\n    CFG_P9_17 = 166,\n    CFG_P9_18 = 167,\n    CFG_P9_19 = 168,\n    CFG_P9_20 = 169,\n    CFG_P9_21 = 170,\n    CFG_P9_22 = 171,\n    CFG_P9_23 = 172,    \n    CFG_P9_24 = 173,\n    CFG_P9_25 = 174,\n    CFG_P9_26 = 175,    \n    CFG_P9_27 = 176,\n    CFG_P9_28 = 177,\n    CFG_P9_29 = 178,\n    CFG_P9_30 = 179,\n    CFG_P9_31 = 180,\n    CFG_P9_32 = 181,\n    CFG_P9_33 = 182,\n    CFG_P9_34 = 183,\n    CFG_P9_35 = 184,\n    CFG_P9_36 = 185,\n    CFG_P9_37 = 186,\n    CFG_P9_38 = 187,\n    CFG_P9_39 = 188,\n    CFG_P9_40 = 189,\n    CFG_P9_41 = 190,    \n    CFG_P9_42 = 191,    \n    CFG_P9_43 = 192,\n    CFG_P9_44 = 193,    \n    CFG_P9_45 = 194,    \n    CFG_P9_46 = 195,\n    CFG_P1_01 = 200,\n    CFG_P1_02 = 201,\n    CFG_P1_03 = 202,\n    CFG_P1_04 = 203,\n    CFG_P1_05 = 204,\n    CFG_P1_06 = 205,\n    CFG_P1_07 = 206,\n    CFG_P1_08 = 207,\n    CFG_P1_09 = 208,\n    CFG_P1_10 = 209,\n    CFG_P1_11 = 210,\n    CFG_P1_12 = 211,\n    CFG_P1_13 = 212,\n    CFG_P1_14 = 213,\n    CFG_P1_15 = 214,\n    CFG_P1_16 = 215,\n    CFG_P1_17 = 216,\n    CFG_P1_18 = 217,\n    CFG_P1_19 = 218,\n    CFG_P1_20 = 219,\n    CFG_P1_21 = 220,\n    CFG_P1_22 = 221,\n    CFG_P1_23 = 222,    \n    CFG_P1_24 = 223,\n    CFG_P1_25 = 224,\n    CFG_P1_26 = 225,    \n    CFG_P1_27 = 226,\n    CFG_P1_28 = 227,\n    CFG_P1_29 = 228,\n    CFG_P1_30 = 229,\n    CFG_P1_31 = 230,\n    CFG_P1_32 = 231,\n    CFG_P1_33 = 232,\n    CFG_P1_34 = 233,\n    CFG_P1_35 = 234,\n    CFG_P1_36 = 235,\n    CFG_P2_01 = 250,\n    CFG_P2_02 = 251,\n    CFG_P2_03 = 252,\n    CFG_P2_04 = 253,\n    CFG_P2_05 = 254,\n    CFG_P2_06 = 255,\n    CFG_P2_07 = 256,\n    CFG_P2_08 = 257,\n    CFG_P2_09 = 258,\n    CFG_P2_10 = 259,\n    CFG_P2_11 = 260,\n    CFG_P2_12 = 261,\n    CFG_P2_13 = 262,\n    CFG_P2_14 = 263,\n    CFG_P2_15 = 264,\n    CFG_P2_16 = 265,\n    CFG_P2_17 = 266,\n    CFG_P2_18 = 267,\n    CFG_P2_19 = 268,\n    CFG_P2_20 = 269,\n    CFG_P2_21 = 270,\n    CFG_P2_22 = 271,\n    CFG_P2_23 = 272,    \n    CFG_P2_24 = 273,\n    CFG_P2_25 = 274,\n    CFG_P2_26 = 275,    \n    CFG_P2_27 = 276,\n    CFG_P2_28 = 277,\n    CFG_P2_29 = 278,\n    CFG_P2_30 = 279,\n    CFG_P2_31 = 280,\n    CFG_P2_32 = 281,\n    CFG_P2_33 = 282,\n    CFG_P2_34 = 283,\n    CFG_P2_35 = 284,\n    CFG_P2_36 = 285,\n    CFG_PIN_A0 = 100,\n    CFG_PIN_A1 = 101,\n    CFG_PIN_A2 = 102,\n    CFG_PIN_A3 = 103,\n    CFG_PIN_A4 = 104,\n    CFG_PIN_A5 = 105,\n    CFG_PIN_A6 = 106,\n    CFG_PIN_A7 = 107,\n    CFG_PIN_A8 = 108,\n    CFG_PIN_A9 = 109,\n    CFG_PIN_A10 = 110,\n    CFG_PIN_A11 = 111,\n    CFG_PIN_A12 = 112,\n    CFG_PIN_A13 = 113,\n    CFG_PIN_A14 = 114,\n    CFG_PIN_A15 = 115,\n    CFG_PIN_D0 = 150,\n    CFG_PIN_D1 = 151,\n    CFG_PIN_D2 = 152,\n    CFG_PIN_D3 = 153,\n    CFG_PIN_D4 = 154,\n    CFG_PIN_D5 = 155,\n    CFG_PIN_D6 = 156,\n    CFG_PIN_D7 = 157,\n    CFG_PIN_D8 = 158,\n    CFG_PIN_D9 = 159,\n    CFG_PIN_D10 = 160,\n    CFG_PIN_D11 = 161,\n    CFG_PIN_D12 = 162,\n    CFG_PIN_D13 = 163,\n    CFG_PIN_D14 = 164,\n    CFG_PIN_D15 = 165,\n    CFG_NUM_NEOPIXELS = 200,\n    CFG_NUM_DOTSTARS = 201,\n    CFG_DEFAULT_BUTTON_MODE = 202,\n    CFG_SWD_ENABLED = 203,\n    CFG_FLASH_BYTES = 204,\n    CFG_RAM_BYTES = 205,\n    CFG_SYSTEM_HEAP_BYTES = 206,\n    CFG_LOW_MEM_SIMULATION_KB = 207,\n    // /pxtapp/hf2dbg.h\n    HF2DBG_H = 1,\n    // /pxtapp/mixer---none/melody.h\n    SW_TRIANGLE = 1,\n    SW_SAWTOOTH = 2,\n    SW_SINE = 3,\n    SW_NOISE = 4,\n    SW_SQUARE_10 = 11,\n    SW_SQUARE_50 = 15,\n    // /pxtapp/pins.h\n    BUTTON_ACTIVE_HIGH_PULL_DOWN = 17,\n    BUTTON_ACTIVE_HIGH_PULL_UP = 33,\n    BUTTON_ACTIVE_HIGH_PULL_NONE = 49,\n    BUTTON_ACTIVE_LOW_PULL_DOWN = 16,\n    BUTTON_ACTIVE_LOW_PULL_UP = 32,\n    BUTTON_ACTIVE_LOW_PULL_NONE = 48,\n    // /pxtapp/platform.h\n    PAGE_SIZE = 512,\n    DEV_NUM_PINS = 64,\n    PXT_BOOTLOADER_CFG_MAGIC = 3191854542,\n    PXT_74HC165 = 1,\n    IMAGE_BITS = 4,\n    PA00 = 0,\n    PA01 = 1,\n    PA02 = 2,\n    PA03 = 3,\n    PA04 = 4,\n    PA05 = 5,\n    PA06 = 6,\n    PA07 = 7,\n    PA08 = 8,\n    PA09 = 9,\n    PA10 = 10,\n    PA11 = 11,\n    PA12 = 12,\n    PA13 = 13,\n    PA14 = 14,\n    PA15 = 15,\n    PA16 = 16,\n    PA17 = 17,\n    PA18 = 18,\n    PA19 = 19,\n    PA20 = 20,\n    PA21 = 21,\n    PA22 = 22,\n    PA23 = 23,\n    PA24 = 24,\n    PA25 = 25,\n    PA26 = 26,\n    PA27 = 27,\n    PA28 = 28,\n    PA29 = 29,\n    PA30 = 30,\n    PA31 = 31,\n    PB00 = 32,\n    PB01 = 33,\n    PB02 = 34,\n    PB03 = 35,\n    PB04 = 36,\n    PB05 = 37,\n    PB06 = 38,\n    PB07 = 39,\n    PB08 = 40,\n    PB09 = 41,\n    PB10 = 42,\n    PB11 = 43,\n    PB12 = 44,\n    PB13 = 45,\n    PB14 = 46,\n    PB15 = 47,\n    PB16 = 48,\n    PB17 = 49,\n    PB18 = 50,\n    PB19 = 51,\n    PB20 = 52,\n    PB21 = 53,\n    PB22 = 54,\n    PB23 = 55,\n    PB24 = 56,\n    PB25 = 57,\n    PB26 = 58,\n    PB27 = 59,\n    PB28 = 60,\n    PB29 = 61,\n    PB30 = 62,\n    PB31 = 63,\n    // /pxtapp/pxt.h\n    DEVICE_ID_BUTTON_SLIDE = 3000,\n    DEVICE_ID_MICROPHONE = 3001,\n    DEVICE_ID_FIRST_BUTTON = 4000,\n    DEVICE_ID_FIRST_TOUCHBUTTON = 4100,\n    // /pxtapp/pxtbase.h\n    PXT_REFCNT_FLASH = 65534,\n    VTABLE_MAGIC = 249,\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    User0 = 16,\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    GC = 0,\n    // /pxtapp/pxtconfig.h\n    PXT_GC = 1,\n    // /pxtapp/uf2hid.h\n    UF2_HID_H = 1,\n}\n",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum PulseValue {\n    //% block=high\n    High = 4,  // DEVICE_PIN_EVT_PULSE_HI\n    //% block=low\n    Low = 5,  // DEVICE_PIN_EVT_PULSE_LO\n    }\n    declare const enum  getPinModeEnums{\n        //% block=\"MUX\"\n        MUX = 1, \n        //% block=\"PULLUP\"\n        PULLUP = 2,\n        //% block=\"SLEW\"\n        SLEW = 3,\n        //% block=\"OPTIONS\"\n        OPTIONS= 4, \n        //% block=\"NAME\"\n        NAME = 5\n    }\n\n    declare const enum PinEvent {\n    //% block=\"CHANGE\"\n    CHANGE = 1, \n    //% block=\"RISE\"\n    RISE = 2,\n    //% block=\"FALL\"\n    FALL = 3\n    }\n\n\n    declare const enum PinPullMode {\n    //% block=\"INPUT\"\n    INPUT = 0,\n    //% block=\"INPUT_PULLUP\"\n    INPUT_PULLUP = 1,\n    //% block=\"OUTPUT\"\n    OUTPUT = 2,\n    //% block=\"ANALOG_OUTPUT\"\n    ANALOG_OUTPUT = 3,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "pins.ts": "//% noRefCounting fixedInstances\ninterface DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogOutPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInOutPin extends AnalogInPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmOnlyPin extends DigitalInOutPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmPin extends PwmOnlyPin, AnalogInOutPin {\n}\n\n/**\n * Control currents in Pins for analog/digital signals, servos, i2c, ...\n */\n//% color=#A80000 weight=85 icon=\"\\uf140\" advanced=false\n//% groups='[\"other\", \"Servo\", \"i2c\", \"getPinMode\"]'\nnamespace pins {\n\n}",
      "pinscompat.ts": "// this type alias is required for backward compatibility\n// it gets overriden in microbit (DigitalPin is an enum over there)\ntype DigitalPin = DigitalInOutPin;\ntype AnalogPin = AnalogInOutPin;",
      "pxt.json": "{\n    \"name\": \"core\",\n    \"description\": \"The core library for Codal-based targets\",\n    \"files\": [\n        \"README.md\",\n        \"dal.d.ts\",\n        \"pins.ts\",\n        \"shims.d.ts\",\n        \"pinscompat.ts\",\n        \"enums.d.ts\",\n        \"pxtparts.json\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"yotta\": {\n        \"config\": {\n            \"codal\": {\n                \"component_count\": 64,\n                \"dmesg_buffer_size\": 1024\n            }\n        }\n    },\n    \"public\": true,\n    \"dalDTS\": {\n        \"includeDirs\": [\n            \"libraries/codal-core/inc\",\n            \"pxtapp\"\n        ],\n        \"excludePrefix\": [\n            \"USB_\",\n            \"REQUEST_\",\n            \"LIS3DH_\",\n            \"FXOS8700_\",\n            \"HF2_\",\n            \"PXT_REF_TAG_\",\n            \"MS_\",\n            \"SCSI_\"\n        ]\n    },\n    \"dependencies\": {\n        \"base\": \"*\"\n    },\n    \"targetVersions\": {\n        \"target\": \"0.0.1\"\n    }\n}",
      "pxtparts.json": "{\n    \"buttons\": {\n        \"simulationBehavior\": \"buttons\",\n        \"visual\": {\n            \"builtIn\": \"buttons\",\n            \"width\": 75,\n            \"height\": 45,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 45\n                }\n            ]\n        },\n        \"numberOfPins\": 2,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"Button.onEvent,Button.isPressed,Button.wasPressed\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"button\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"slideswitch\": {\n        \"numberOfPins\": 3,\n        \"simulationBehavior\": \"slideswitch\",\n        \"visual\": {\n            \"builtIn\": \"slideswitch\",\n            \"width\": 100,\n            \"height\": 100,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalRead,DigitalInOutPin.onPulsed,DigitalInOutPin.onEvent\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"microservo\": {\n        \"simulationBehavior\": \"microservo\",\n        \"visual\": {\n            \"builtIn\": \"microservo\",\n            \"width\": 74.85,\n            \"height\": 200,\n            \"pinDistance\": 10,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 37,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 5\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"PwmOnlyPin.servoWrite,servos.Servo.setAngle,servos.Servo.run,servos.Servo.setPulse\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"led\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"DigitalInOutPin.digitalWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"analogled\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"builtIn\": \"led\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"led\",\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogOutPin.analogWrite\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"photocell\": {\n        \"numberOfPins\": 3,\n        \"visual\": {\n            \"builtIn\": \"photocell\",\n            \"width\": 68,\n            \"height\": 180,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"photocell\",\n        \"pinDefinitions\": [\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"AnalogInPin.analogRead\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"name\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    }\n}",
      "shims.d.ts": "declare namespace pins {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=pins::createBuffer\n    function createBuffer(size: int32): Buffer;    \n}\n\ndeclare interface AnalogInPin {\n    /**\n     * Read the connector value as analog, that is, as a value comprised between 0 and 1023.\n     * @param name pin to write to\n     */\n    //% help=pins/analog-read weight=53\n    //% blockId=device_get_analog_pin block=\"analog read|pin %name\" blockGap=\"8\"\n    //% blockNamespace=pins\n    //% parts=\"photocell\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% promise shim=AnalogInPinMethods::analogRead\n    analogRead(): int32;\n}\n\n\ndeclare interface AnalogOutPin {\n    /**\n     * Set the connector value as analog. Value must be comprised between 0 and 1023.\n     * @param name pin name to write to\n     * @param value value to write to the pin between ``0`` and ``10``. eg:1023,0\n     * @param frequency value to write to the pin between ``0`` and ``10000``. eg:1023,0\n     */\n    //% help=pins/analog-write weight=52\n    //% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value duty| and %frequency Hz\" blockGap=8\n    //% blockNamespace=pins\n    //% parts=\"analogled\" trackArgs=0\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.min=0 value.max=100\n    //% value.defl=50\n    //% frequency.min=0 frequency.max=10000 frequency.defl=2000 shim=AnalogOutPinMethods::analogWrite\n    analogWrite(value: number,frequency: number): void;\n}\n\n\ndeclare interface DigitalInOutPin {\n    /**\n     * Read a pin or connector as either 0 or 1\n     * @param name pin to read from\n     */\n    //% help=pins/digital-read weight=61\n    //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8\n    //% parts=\"slideswitch\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 \n    //% promise shim=DigitalInOutPinMethods::digitalRead\n    digitalRead(): boolean;\n    \n    /**\n     * Set a pin or connector value to either 0 or 1.\n     * @param name pin to write to\n     * @param value value to set on the pin\n     */\n    //% help=pins/digital-write weight=60\n    //% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value=toggleHighLow\"\n    //% parts=\"led\" trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::digitalWrite\n    digitalWrite(value: boolean): void;\n\n\n    /**\n     * Register code to run when a pin event occurs. \n     */\n    //% help=pins/on-event weight=20 blockGap=8\n    //% blockId=pinsonevent block=\"on|pin %pin|%event\"\n    //% blockNamespace=pins\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.width=220\n    //% pin.fieldOptions.columns=4\n    //% deprecated=1 parts=\"slideswitch\" trackArgs=0 shim=DigitalInOutPinMethods::onEvent\n    onEvent(event: PinEvent, body: () => void): void;\n\n    /**\n     * Set the pinMode direction of this pin.\n     * @param name pin to set the pin mode\n     * @param pull one of the pinMode configurations: INPUT,INPUT_PULLUP,OUTPUT,ANALOG_OUTPUT\n     */\n    //% help=pins/set-pull weight=62 blockGap=8\n    //% blockId=device_set_pull block=\"set |pin %pin|to %pull\"\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4 shim=DigitalInOutPinMethods::pinMode\n    pinMode(pull: PinPullMode): void;\n\n    /**\n     * Get the PinMode of a pin\n     * @param name pin to get\n     * @param value value to get\n     */\n    //% help=pins/getPinMode weight=61\n    //% blockId=device_get_pinMode block=\"get Pinmode|pin %name| value %value\" blockGap=8\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% promise shim=DigitalInOutPinMethods::getPinMode\n    getPinMode(value: getPinModeEnums ): string;\n}\n\n\ndeclare interface PwmPin {}\n\n\ndeclare interface PwmOnlyPin {\n    /**\n     * Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\n     * set the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\n     * rotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\n     * direction, ``180`` being full speed in the other, and a value near ``90`` being no movement).\n     * @param name pin to write to\n     * @param value angle or rotation speed\n     */\n    //% help=pins/servo-write weight=41 group=\"Servo\"\n    //% blockId=device_set_servo_pin block=\"servo write|pin %name|to %value=protractorPicker\" blockGap=8\n    //% parts=microservo trackArgs=0\n    //% blockNamespace=pins\n    //% name.fieldEditor=\"gridpicker\"\n    //% name.fieldOptions.width=220\n    //% name.fieldOptions.columns=4\n    //% value.defl=90 shim=PwmOnlyPinMethods::servoWrite\n    servoWrite(value?: int32): void;\n}\ndeclare namespace control {\n\n \n}\ndeclare namespace pins {\n\n}",
      "test.ts": "let i = 1\nlet f = 0.5\nlet plus = i + f\nlet minus = i - f\n\nlet r = Math.random()\nlet ri = Math.randomRange(5, 10)\n\nforever(() => {\n    pause(100)\n})\n"
    },
    "base": {
      "README.md": "# base\n\nThe base library, shared by all C++ targets (not only Codal-based).\n\n\n",
      "buffer.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n\nusing namespace std;\n\n//% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\nnamespace BufferMethods {\n//%\nuint8_t *getBytes(Buffer buf) {\n    return buf->data;\n}\n\n//%\nint getByte(Buffer buf, int off) {\n    if (buf && 0 <= off && off < buf->length)\n        return buf->data[off];\n    return 0;\n}\n\n//%\nvoid setByte(Buffer buf, int off, int v) {\n    if (buf && 0 <= off && off < buf->length)\n        buf->data[off] = v;\n}\n\nint writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {\n    if (length < 0)\n        length = src->length;\n\n    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)\n        return -1;\n\n    length = min(src->length - srcOffset, buf->length - dstOffset);\n\n    if (length < 0)\n        return -1;\n\n    if (buf == src) {\n        memmove(buf->data + dstOffset, src->data + srcOffset, length);\n    } else {\n        memcpy(buf->data + dstOffset, src->data + srcOffset, length);\n    }\n\n    return 0;\n}\n\n/**\n * Write a number in specified format in the buffer.\n */\n//%\nvoid setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {\n    if (offset < 0)\n        return;\n    setNumberCore(buf->data + offset, buf->length - offset, format, value);\n}\n\n/**\n * Read a number in specified format from the buffer.\n */\n//%\nTNumber getNumber(Buffer buf, NumberFormat format, int offset) {\n    if (offset < 0)\n        return fromInt(0);\n    return getNumberCore(buf->data + offset, buf->length - offset, format);\n}\n\n/** Returns the length of a Buffer object. */\n//% property\nint length(Buffer s) {\n    return s->length;\n}\n\n/**\n * Fill (a fragment) of the buffer with given value.\n */\n//%\nvoid fill(Buffer buf, int value, int offset = 0, int length = -1) {\n    if (offset < 0 || offset > buf->length)\n        return; // control_INVALID_PARAMETER;\n    if (length < 0)\n        length = buf->length;\n    length = min(length, buf->length - offset);\n    memset(buf->data + offset, value, length);\n}\n\n/**\n * Return a copy of a fragment of a buffer.\n */\n//%\nBuffer slice(Buffer buf, int offset = 0, int length = -1) {\n    offset = min((int)buf->length, offset);\n    if (length < 0)\n        length = buf->length;\n    length = min(length, buf->length - offset);\n    return mkBuffer(buf->data + offset, length);\n}\n\n/**\n * Shift buffer left in place, with zero padding.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid shift(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n    if (offset <= -length || offset >= length) {\n        fill(buf, 0);\n        return;\n    }\n\n    uint8_t *data = buf->data + start;\n    if (offset < 0) {\n        offset = -offset;\n        memmove(data + offset, data, length - offset);\n        memset(data, 0, offset);\n    } else {\n        length = length - offset;\n        memmove(data, data + offset, length);\n        memset(data + length, 0, offset);\n    }\n}\n\n/**\n * Convert a buffer to string assuming UTF8 encoding\n */\n//%\nString toString(Buffer buf) {\n    return mkString((char *)buf->data, buf->length);\n}\n\n/**\n * Convert a buffer to its hexadecimal representation.\n */\n//%\nString toHex(Buffer buf) {\n    const char *hex = \"0123456789abcdef\";\n    auto res = mkStringCore(NULL, buf->length * 2);\n    for (int i = 0; i < buf->length; ++i) {\n        res->ascii.data[i << 1] = hex[buf->data[i] >> 4];\n        res->ascii.data[(i << 1) + 1] = hex[buf->data[i] & 0xf];\n    }\n    return res;\n}\n\n/**\n * Rotate buffer left in place.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid rotate(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n\n    if (offset < 0)\n        offset += length << 8; // try to make it positive\n    offset %= length;\n    if (offset < 0)\n        offset += length;\n\n    uint8_t *data = buf->data + start;\n\n    uint8_t *n_first = data + offset;\n    uint8_t *first = data;\n    uint8_t *next = n_first;\n    uint8_t *last = data + length;\n\n    while (first != next) {\n        uint8_t tmp = *first;\n        *first++ = *next;\n        *next++ = tmp;\n        if (next == last) {\n            next = n_first;\n        } else if (first == n_first) {\n            n_first = next;\n        }\n    }\n}\n\n/**\n * Write contents of `src` at `dstOffset` in current buffer.\n */\n//%\nvoid write(Buffer buf, int dstOffset, Buffer src) {\n    // srcOff and length not supported, we only do up to 4 args :/\n    writeBuffer(buf, dstOffset, src, 0, -1);\n}\n} // namespace BufferMethods\n\nnamespace control {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n\n/**\n * Create a new buffer with UTF8-encoded string\n * @param str the string to put in the buffer\n */\n//%\nBuffer createBufferFromUTF8(String str) {\n#if PXT_UTF8\n    auto sz = toRealUTF8(str, NULL);\n    auto r = mkBuffer(NULL, sz);\n    toRealUTF8(str, r->data);\n    return r;\n#else\n    return mkBuffer((const uint8_t *)str->getUTF8Data(), str->getUTF8Size());\n#endif\n}\n} // namespace control\n\nnamespace pxt {\nstatic int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = dst + length;\n        for (int i = 0; i < length; ++i)\n            *--p = src[i];\n    } else {\n        if (length == 4 && ((uint32_t)dst & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uint32_t)dst & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nstatic int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        memset(dst, 0, length);\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = src + length;\n        for (int i = 0; i < length; ++i)\n            dst[i] = *--p;\n    } else {\n        if (length == 4 && ((uint32_t)src & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uint32_t)src & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nvoid setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define WRITEBYTES(isz, swap, toInt)                                                               \\\n    isz = toInt(value);                                                                            \\\n    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \\\n    break\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        WRITEBYTES(i8, false, toInt);\n    case NumberFormat::UInt8LE:\n        WRITEBYTES(u8, false, toInt);\n    case NumberFormat::Int16LE:\n        WRITEBYTES(i16, false, toInt);\n    case NumberFormat::UInt16LE:\n        WRITEBYTES(u16, false, toInt);\n    case NumberFormat::Int32LE:\n        WRITEBYTES(i32, false, toInt);\n    case NumberFormat::UInt32LE:\n        WRITEBYTES(u32, false, toUInt);\n\n    case NumberFormat::Int8BE:\n        WRITEBYTES(i8, true, toInt);\n    case NumberFormat::UInt8BE:\n        WRITEBYTES(u8, true, toInt);\n    case NumberFormat::Int16BE:\n        WRITEBYTES(i16, true, toInt);\n    case NumberFormat::UInt16BE:\n        WRITEBYTES(u16, true, toInt);\n    case NumberFormat::Int32BE:\n        WRITEBYTES(i32, true, toInt);\n    case NumberFormat::UInt32BE:\n        WRITEBYTES(u32, true, toUInt);\n\n    case NumberFormat::Float32LE:\n        WRITEBYTES(f32, false, toFloat);\n    case NumberFormat::Float32BE:\n        WRITEBYTES(f32, true, toFloat);\n    case NumberFormat::Float64LE:\n        WRITEBYTES(f64, false, toDouble);\n    case NumberFormat::Float64BE:\n        WRITEBYTES(f64, true, toDouble);\n    }\n}\n\nTNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define READBYTES(isz, swap, conv)                                                                 \\\n    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \\\n    return conv(isz)\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        READBYTES(i8, false, fromInt);\n    case NumberFormat::UInt8LE:\n        READBYTES(u8, false, fromInt);\n    case NumberFormat::Int16LE:\n        READBYTES(i16, false, fromInt);\n    case NumberFormat::UInt16LE:\n        READBYTES(u16, false, fromInt);\n    case NumberFormat::Int32LE:\n        READBYTES(i32, false, fromInt);\n    case NumberFormat::UInt32LE:\n        READBYTES(u32, false, fromUInt);\n\n    case NumberFormat::Int8BE:\n        READBYTES(i8, true, fromInt);\n    case NumberFormat::UInt8BE:\n        READBYTES(u8, true, fromInt);\n    case NumberFormat::Int16BE:\n        READBYTES(i16, true, fromInt);\n    case NumberFormat::UInt16BE:\n        READBYTES(u16, true, fromInt);\n    case NumberFormat::Int32BE:\n        READBYTES(i32, true, fromInt);\n    case NumberFormat::UInt32BE:\n        READBYTES(u32, true, fromUInt);\n\n    case NumberFormat::Float32LE:\n        READBYTES(f32, false, fromFloat);\n    case NumberFormat::Float32BE:\n        READBYTES(f32, true, fromFloat);\n    case NumberFormat::Float64LE:\n        READBYTES(f64, false, fromDouble);\n    case NumberFormat::Float64BE:\n        READBYTES(f64, true, fromDouble);\n    }\n\n    return 0;\n}\n} // namespace pxt",
      "buffer.ts": "namespace pins {\n    /**\n     * Get the size in bytes of specified number format.\n     */\n    //%\n    export function sizeOf(format: NumberFormat) {\n        switch (format) {\n            case NumberFormat.Int8LE:\n            case NumberFormat.UInt8LE:\n            case NumberFormat.Int8BE:\n            case NumberFormat.UInt8BE:\n                return 1;\n            case NumberFormat.Int16LE:\n            case NumberFormat.UInt16LE:\n            case NumberFormat.Int16BE:\n            case NumberFormat.UInt16BE:\n                return 2;\n            case NumberFormat.Int32LE:\n            case NumberFormat.Int32BE:\n            case NumberFormat.UInt32BE:\n            case NumberFormat.UInt32LE:\n            case NumberFormat.Float32BE:\n            case NumberFormat.Float32LE:\n                return 4;\n            case NumberFormat.Float64BE:\n            case NumberFormat.Float64LE:\n                return 8;\n        }\n        return 0;\n    }\n\n    /**\n     * Create a new buffer initalized to bytes from given array.\n     * @param bytes data to initalize with\n     */\n    //%\n    export function createBufferFromArray(bytes: number[]) {\n        let buf = control.createBuffer(bytes.length)\n        for (let i = 0; i < bytes.length; ++i)\n            buf[i] = bytes[i]\n        return buf\n    }\n\n    function getFormat(pychar: string, isBig: boolean) {\n        switch (pychar) {\n            case 'B':\n                return NumberFormat.UInt8LE\n            case 'b':\n                return NumberFormat.Int8LE\n            case 'H':\n                return isBig ? NumberFormat.UInt16BE : NumberFormat.UInt16LE\n            case 'h':\n                return isBig ? NumberFormat.Int16BE : NumberFormat.Int16LE\n            case 'I':\n            case 'L':\n                return isBig ? NumberFormat.UInt32BE : NumberFormat.UInt32LE\n            case 'i':\n            case 'l':\n                return isBig ? NumberFormat.Int32BE : NumberFormat.Int32LE\n            case 'f':\n                return isBig ? NumberFormat.Float32BE : NumberFormat.Float32LE\n            case 'd':\n                return isBig ? NumberFormat.Float64BE : NumberFormat.Float64LE\n            default:\n                return null as NumberFormat\n        }\n    }\n\n    function packUnpackCore(format: string, nums: number[], buf: Buffer, isPack: boolean, off = 0) {\n        let isBig = false\n        let idx = 0\n        for (let i = 0; i < format.length; ++i) {\n            switch (format[i]) {\n                case ' ':\n                case '<':\n                case '=':\n                    isBig = false\n                    break\n                case '>':\n                case '!':\n                    isBig = true\n                    break\n                case 'x':\n                    off++\n                    break\n                default:\n                    let fmt = getFormat(format[i], isBig)\n                    if (fmt === null) {\n                        control.fail(\"Not supported format character: \" + format[i])\n                    } else {\n                        if (buf) {\n                            if (isPack)\n                                buf.setNumber(fmt, off, nums[idx++])\n                            else\n                                nums.push(buf.getNumber(fmt, off))\n                        }\n\n                        off += pins.sizeOf(fmt)\n                    }\n                    break\n            }\n        }\n        return off\n    }\n\n    export function packedSize(format: string) {\n        return packUnpackCore(format, null, null, true)\n    }\n\n    export function packBuffer(format: string, nums: number[]) {\n        let buf = control.createBuffer(packedSize(format))\n        packUnpackCore(format, nums, buf, true)\n        return buf\n    }\n\n    export function packIntoBuffer(format: string, buf: Buffer, offset: number, nums: number[]) {\n        packUnpackCore(format, nums, buf, true, offset)\n    }\n\n    export function unpackBuffer(format: string, buf: Buffer, offset = 0) {\n        let res: number[] = []\n        packUnpackCore(format, res, buf, false, offset)\n        return res\n    }\n}\n\n// see http://msgpack.org/ for the spec\n// it currently only implements numbers and their sequances\n// once we handle any type and typeof expressions we can do more\n\nnamespace msgpack {\n    function tagFormat(tag: number) {\n        switch (tag) {\n            case 0xCB: return NumberFormat.Float64BE\n            case 0xCC: return NumberFormat.UInt8BE\n            case 0xCD: return NumberFormat.UInt16BE\n            case 0xCE: return NumberFormat.UInt32BE\n            case 0xD0: return NumberFormat.Int8BE\n            case 0xD1: return NumberFormat.Int16BE\n            case 0xD2: return NumberFormat.Int32BE\n            default:\n                return null\n        }\n    }\n\n    function packNumberCore(buf: Buffer, offset: number, num: number) {\n        let tag = 0xCB\n        if (num == (num << 0) || num == (num >>> 0)) {\n            if (-31 <= num && num <= 127) {\n                if (buf) buf[offset] = num\n                return 1\n            } else if (0 <= num) {\n                if (num <= 0xff) {\n                    tag = 0xCC\n                } else if (num <= 0xffff) {\n                    tag = 0xCD\n                } else {\n                    tag = 0xCE\n                }\n            } else {\n                if (-0x7f <= num) {\n                    tag = 0xD0\n                } else if (-0x7fff <= num) {\n                    tag = 0xD1\n                } else {\n                    tag = 0xD2\n                }\n            }\n        }\n        let fmt = tagFormat(tag)\n        if (buf) {\n            buf[offset] = tag\n            buf.setNumber(fmt, offset + 1, num)\n        }\n        return pins.sizeOf(fmt) + 1\n    }\n\n    /**\n     * Unpacks a buffer into a number array.\n     */\n    export function unpackNumberArray(buf: Buffer, offset = 0): number[] {\n        let res: number[] = []\n\n        while (offset < buf.length) {\n            let fmt = tagFormat(buf[offset++])\n            if (fmt === null) {\n                let v = buf.getNumber(NumberFormat.Int8BE, offset - 1)\n                if (-31 <= v && v <= 127)\n                    res.push(v)\n                else\n                    return null\n            } else {\n                res.push(buf.getNumber(fmt, offset))\n                offset += pins.sizeOf(fmt)\n            }\n            // padding at the end\n            while (buf[offset] === 0xc1) offset++;\n        }\n\n        return res\n    }\n\n    /**\n     * Pack a number array into a buffer.\n     * @param nums the numbers to be packed\n     */\n    export function packNumberArray(nums: number[]): Buffer {\n        let off = 0\n        for (let n of nums) {\n            off += packNumberCore(null, off, n)\n        }\n        let buf = control.createBuffer(off)\n        off = 0\n        for (let n of nums) {\n            off += packNumberCore(buf, off, n)\n        }\n        return buf\n    }\n}\n\ninterface Buffer {\n    [index: number]: number;\n    // rest defined in buffer.cpp\n}",
      "console.ts": "/// <reference no-default-lib=\"true\"/>\n\nenum ConsolePriority {\n    Debug = 0,\n    Log = 1,\n    Warning = 2,\n    Error = 3,\n    Silent = 4\n}\n\n/**\n * Reading and writing data to the console output.\n */\n//% weight=12 color=#002050 icon=\"\\uf120\"\n//% advanced=true\nnamespace console {\n    type Listener = (priority: ConsolePriority, text: string) => void;\n\n    /**\n     * Minimum priority to send messages to listeners\n     */\n    export let minPriority = ConsolePriority.Log;\n\n    //% whenUsed\n    const listeners: Listener[] = [\n        function (priority: ConsolePriority, text: string) { control.__log(priority, text); }\n    ];\n\n    export function add(priority: ConsolePriority, text: string) {\n        if (priority < minPriority) return;\n        // add new line\n        text += \"\\n\";\n        // send to listeners\n        for (let i = 0; i < listeners.length; ++i)\n            listeners[i](priority, text);\n    }\n\n    export function debug(text: string) {\n        add(ConsolePriority.Debug, text);\n    }\n\n    export function warning(text: string) {\n        add(ConsolePriority.Warning, text);\n    }\n\n    export function error(text: string) {\n        add(ConsolePriority.Error, text);\n    }\n\n    /**\n     * Write a line of text to the console output.\n     * @param value to send\n     */\n    //% weight=90\n    //% help=console/log blockGap=8\n    //% blockId=console_log block=\"console|log %text\"\n    //% text.shadowOptions.toString=true\n    export function log(text: string): void {\n        add(ConsolePriority.Log, text);\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the console output.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=console/log-value\n    //% blockId=console_log_value block=\"console|log value %name|= %value\"\n    export function logValue(name: string, value: number): void {\n        log(name ? `${name}: ${value}` : `${value}`)\n    }\n\n    /**\n     * Adds a listener for the log messages\n     * @param listener\n     */\n    //%\n    export function addListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener) return;\n        listeners.push(listener);\n    }\n\n    /**\n     * Removes a listener\n     * @param listener \n     */\n    //%\n    export function removeListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener) return;\n        const i = listeners.indexOf(listener);\n        if (i > -1)\n            listeners.splice(i, 1);\n    }\n}",
      "control.cpp": "#include \"pxtbase.h\"\n\n\nnamespace control {\n    /**\n    * Gets the number of milliseconds elapsed since power on.\n    */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\"\n    int millis() {\n        return current_time_ms();\n    }\n\n   \n    \n  \n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8\n    void runInParallel(Action a) {\n        pxt::runInParallel(a);\n    }\n\n     /**\n    * Derive a unique, consistent serial number of this control from internal data.\n    */\n    //% blockId=\"control_control_serial_number\" block=\"device serial number\" weight=54\n    //% help=control/control-serial-number\n    //% promise\n    int deviceSerialNumber() {\n        return 0;\n    }\n\n    /**\n    * Derive a unique, consistent serial number of this control from internal data.\n    */\n    //% blockId=\"control_control_name\" block=\"device name\" weight=55\n    //% promise\n    int deviceName() {\n        return 0;\n    }\n\n    /**\n    * Derive a unique, consistent serial number of this control from internal data.\n    */\n    //% blockId=\"control_control_version\" block=\"device version\" weight=53\n    //% promise\n    int deviceVersion() {\n        return 0;\n    }\n    \n    /**\n    * Derive a unique, consistent serial number of this control from internal data.\n    */\n    //% blockId=\"control_control_bonescript\" block=\"bonescript version\" weight=52\n    //% promise\n    int deviceBonescriptVersion() {\n        return 0;\n    }\n    \n    \n    /**\n    *\n    */\n    //%\n    void __log(int prority, String text) {\n        if (NULL == text) return;\n        pxt::sendSerial(text->getUTF8Data(), text->getUTF8Size());\n    }\n\n    /**\n     * Dump internal information about a value.\n     */\n    //%\n    void dmesgValue(TValue v) {\n        anyPrint(v);\n    }\n\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //%\n    void gc() {\n        pxt::gc(1);\n    }\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //%\n    bool profilingEnabled() {\n#ifdef PXT_PROFILE\n        return true;\n#else\n        return false;\n#endif\n    }\n}\n",
      "control.ts": "/**\n* Program controls and events.\n*/\n//% weight=84 color=\"#31bca3\" icon=\"\\uf110\" advanced=false\nnamespace control {\n    /**\n     * Deprecated, use ``control.runInParallel`` instead.\n     */\n    //% deprecated=1 hidden=1 help=control/run-in-background blockAllowMultiple=1 afterOnStart=true\n    //% blockId=\"control_run_in_background\" block=\"run in background\" blockGap=8 weight=0\n    export function runInBackground(a: () => void) {\n        control.runInParallel(a);\n    }\n\n    /**\n     * Display an error code and stop the program.\n     * @param code an error number to display. eg: 5\n     */\n    //% help=control/panic weight=29\n    //% blockId=\"control_panic\" block=\"panic %code\"\n    //% shim=pxtrt::panic\n    export function panic(code: number) { }\n\n    /**\n     * Enable profiling for current function.\n     */\n    //% shim=TD_NOOP shimArgument=perfCounter\n    export function enablePerfCounter(name?: string) { }\n\n    /**\n     * Dump values of profiling performance counters.\n     */\n    //% shim=pxt::dumpPerfCounters\n    export function dmesgPerfCounters() { }\n\n    /**\n     * Display an error code and stop the program when the assertion is `false`.\n     */\n    //% help=control/assert weight=30\n    //% blockId=\"control_assert\" block=\"assert %cond|with value %code\"\n    export function assert(cond: boolean, code: number) {\n        if (!cond) {\n            fail(\"Assertion failed, code=\" + code)\n        }\n    }\n\n    export function fail(message: string) {\n        console.log(\"Fatal failure: \")\n        console.log(message)\n        panic(108)\n    }\n\n    export class AnimationQueue {\n        running: boolean;\n        eventID: number;\n        public interval: number;\n\n        constructor() {\n            this.running = false;\n            this.interval = 1;\n        }\n\n        /**\n         * Runs 'render' in a loop until it returns false or the 'stop' function is called\n         */\n        runUntilDone(render: () => boolean) {\n            const evid = this.eventID;\n\n\n            // check if the animation hasn't been cancelled since we've waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // run animation\n            this.running = true;\n            while (this.running\n                && !this.isCancelled(evid)\n                && render()) {\n                pause(this.interval);\n            }\n\n            // check if the animation hasn't been cancelled since we've been waiting\n            if (this.isCancelled(evid))\n                return;\n\n            // we're done\n            this.running = false;\n            // unblock 1 fiber\n        }\n\n        isCancelled(evid: number) {\n            return this.eventID !== evid;\n        }\n\n        /**\n         * Cancels the current running animation and clears the queue\n         */\n        cancel() {\n            if (this.running) {\n                this.running = false;\n                const evid = this.eventID;\n            }\n        }\n    }\n\n    class PollEvent {\n        public eid: number;\n        public vid: number;\n        public start: number;\n        public timeOut: number;\n        public condition: () => boolean;\n        public once: boolean;\n        constructor(eid: number, vid: number, start: number, timeOut: number, condition: () => boolean, once: boolean) {\n            this.eid = eid;\n            this.vid = vid;\n            this.start = start;\n            this.timeOut = timeOut;\n            this.condition = condition;\n            this.once = once;\n        }\n    }\n\n    let _pollEventQueue: PollEvent[] = undefined;\n\n    function pollEvents() {\n        while (_pollEventQueue.length > 0) {\n            const now = control.millis();\n            for (let i = 0; i < _pollEventQueue.length; ++i) {\n                const ev = _pollEventQueue[i];\n                if (ev.condition() || (ev.timeOut > 0 && now - ev.start > ev.timeOut)) {\n                    if (ev.once) {\n                        _pollEventQueue.splice(i, 1);\n                        --i;\n                    }\n                }\n            }\n            pause(50);\n        }\n        // release fiber\n        _pollEventQueue = undefined;\n    }\n\n\n\n    //% shim=pxt::getConfig\n    export declare function getConfigValue(key: int32, defl: int32): number;\n\n    //% shim=pxt::programHash\n    export function programHash(): number { return 0 }\n}\n\n/**\n * Busy wait for a condition to be true\n * @param condition condition to test for\n * @param timeOut if positive, maximum duration to wait for in milliseconds\n */\n//% blockId=\"pxt_pause_until\"\nfunction pauseUntil(condition: () => boolean, timeOut?: number): void {\n    if (!condition || condition()) return; // optimistic path\n    if (!timeOut) timeOut = 0;\n}\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true blockNamespace=\"loops\"\n//% blockId=forever block=\"forever\" blockAllowMultiple=1\nfunction forever(a: () => void): void {\n    loops.forever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=control_pause blockNamespace=\"loops\"\nfunction pause(ms: number): void {\n    loops.pause(ms);\n}\n\n/**\n * Tagged hex literal converter\n */\n//% shim=@hex\nfunction hex(lits: any, ...args: any[]): Buffer { return null }\n\n// micro:bit compatibility\n// these functions allow some level of reuse\n// between micro:bit and other maker-style editors\nnamespace basic {\n    export function pause(millis: number) {\n        loops.pause(millis);\n    }\n}",
      "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum NumberFormat {\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    }\n\n\n    declare const enum PerfCounters {\n    GC = 0,\n    }\n\n// Auto-generated. Do not edit. Really.\n",
      "loops.cpp": "#include \"pxtbase.h\"\n\nnamespace loops {\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true deprecated=true\n//% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1\nvoid forever(Action a) {\n    runForever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99 deprecated=true\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause_deprecated\nvoid pause(int ms) {\n    if (ms < 0) return;\n    sleep_ms(ms);\n}\n\n}",
      "math.ts": "namespace Math {\n\n    export const E = 2.718281828459045;\n    export const LN2 = 0.6931471805599453;\n    export const LN10 = 2.302585092994046;\n    export const LOG2E = 1.4426950408889634;\n    export const LOG10E = 0.4342944819032518;\n    export const PI = 3.141592653589793;\n    export const SQRT1_2 = 0.7071067811865476;\n    export const SQRT2 = 1.4142135623730951;\n\n    /**\n     * Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.\n     * @param value value to map in ranges\n     * @param fromLow the lower bound of the value's current range\n     * @param fromHigh the upper bound of the value's current range, eg: 1023\n     * @param toLow the lower bound of the value's target range\n     * @param toHigh the upper bound of the value's target range, eg: 4\n     */\n    //% help=math/map weight=10 blockGap=8\n    //% blockId=math_map block=\"map %value|from low %fromLow|high %fromHigh|to low %toLow|high %toHigh\"\n    //% inlineInputMode=inline\n    export function map(value: number, fromLow: number, fromHigh: number, toLow: number, toHigh: number): number {\n        return ((value - fromLow) * (toHigh - toLow)) / (fromHigh - fromLow) + toLow;\n    }    \n\n    /**\n     * Constrains a number to be within a range\n     * @param x the number to constrain, all data types\n     * @param y the lower end of the range, all data types\n     * @param z the upper end of the range, all data types\n     */\n    //% help=math/constrain weight=11 blockGap=8\n    //% blockId=\"math_constrain_value\" block=\"constrain %value|between %low|and %high\"\n    export function constrain(value: number, low: number, high: number): number {\n        return value < low ? low : value > high ? high : value;\n    }\n\n    const b_m16: number[] = [0, 49, 49, 41, 90, 27, 117, 10]\n    /**\n     * Returns the sine of an input angle. This is an 8-bit approximation.\n     * @param theta input angle from 0-255\n     */\n    //% help=math/isin weight=11 advanced=true blockGap=8\n    export function isin(theta: number) {\n        //reference: based on FASTLed's sin approximation method: [https://github.com/FastLED/FastLED](MIT)\n        let offset = theta;\n        if( theta & 0x40 ) {\n            offset = 255 - offset;\n        }\n        offset &= 0x3F; // 0..63\n\n        let secoffset  = offset & 0x0F; // 0..15\n        if( theta & 0x40) secoffset++;\n\n        let section = offset >> 4; // 0..3\n        let s2 = section * 2;\n\n        let b = b_m16[s2];\n        let m16 = b_m16[s2+1];\n        let mx = (m16 * secoffset) >> 4;\n        \n        let y = mx + b;\n        if( theta & 0x80 ) y = -y;\n\n        y += 128;\n\n        return y;\n    }\n\n    /**\n     * Returns the cosine of an input angle. This is an 8-bit approximation. \n     * @param theta input angle from 0-255\n     */\n    //% help=math/icos weight=10 advanced=true blockGap=8\n    export function icos(theta: number) {\n        return isin(theta + 16384);\n    }\n}\n\nnamespace Number {\n    export const EPSILON = 2.220446049250313e-16;\n}",
      "pxt-core.d.ts": "/// <reference no-default-lib=\"true\"/>\n\ninterface Array<T> {\n    /**\n      * Get or set the length of an array. This number is one more than the index of the last element the array.\n      */\n    //% shim=Array_::length weight=84\n    //% blockId=\"lists_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"arrays\"\n    length: number;\n\n    /**\n      * Append a new element to an array.\n      * @param items New elements of the Array.\n      */\n    //% help=arrays/push\n    //% shim=Array_::push weight=50\n    //% blockId=\"array_push\" block=\"%list| add value %value| to end\" blockNamespace=\"arrays\"\n    push(item: T): void;\n\n    /**\n      * Concatenates the values with another array.\n      * @param arr The other array that is being concatenated with\n      */\n    //% helper=arrayConcat weight=40\n    concat(arr: T[]): T[];\n\n    /**\n      * Remove the last element from an array and return it.\n      */\n    //% help=arrays/pop\n    //% shim=Array_::pop weight=45\n    //% blockId=\"array_pop\" block=\"get and remove last value from %list\" blockNamespace=\"arrays\"\n    //% blockGap=64\n    pop(): T;\n\n    /**\n      * Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.\n      */\n    //% help=arrays/reverse\n    //% helper=arrayReverse weight=10\n    //% blockId=\"array_reverse\" block=\"reverse %list\" blockNamespace=\"arrays\"\n    reverse(): void;\n\n    /**\n      * Remove the first element from an array and return it. This method changes the length of the array.\n      */\n    //% help=arrays/shift\n    //% helper=arrayShift weight=30\n    //% blockId=\"array_shift\" block=\"get and remove first value from %list\" blockNamespace=\"arrays\"\n    shift(): T;\n\n    /**\n      * Add one element to the beginning of an array and return the new length of the array.\n      * @param element to insert at the start of the Array.\n      */\n    //% help=arrays/unshift\n    //% helper=arrayUnshift weight=25\n    //% blockId=\"array_unshift\" block=\"%list| insert %value| at beginning\" blockNamespace=\"arrays\"\n    //unshift(...values:T[]): number; //rest is not supported in our compiler yet.\n    unshift(value: T): number;\n\n    /**\n      * Return a section of an array.\n      * @param start The beginning of the specified portion of the array. eg: 0\n      * @param end The end of the specified portion of the array. eg: 0\n      */\n    //% help=arrays/slice\n    //% helper=arraySlice weight=41 blockNamespace=\"arrays\"\n    slice(start?: number, end?: number): T[];\n\n    /**\n      * Remove elements from an array.\n      * @param start The zero-based location in the array from which to start removing elements. eg: 0\n      * @param deleteCount The number of elements to remove. eg: 0\n      */\n    //% helper=arraySplice weight=40\n    splice(start: number, deleteCount: number): void;\n\n    /**\n      * joins all elements of an array into a string and returns this string.\n      * @param sep the string separator\n      */\n    //% helper=arrayJoin weight=40\n    join(sep: string): string;\n    \n    /**\n      * Tests whether at least one element in the array passes the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arraySome weight=40\n    some(callbackfn: (value: T, index: number) => boolean): boolean;\n\n    /**\n      * Tests whether all elements in the array pass the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayEvery weight=40\n    every(callbackfn: (value: T, index: number) => boolean): boolean;\n    \n    /**\n      * Sort the elements of an array in place and returns the array. The sort is not necessarily stable.\n      * @param specifies a function that defines the sort order. If omitted, the array is sorted according to the prmitive type\n      */\n    //% helper=arraySort weight=40\n    sort(callbackfn?: (value1: T, value2: T) => number): T[];\n\n    /**\n      * Call a defined callback function on each element of an array, and return an array containing the results.\n      * @param callbackfn A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayMap weight=40\n    map<U>(callbackfn: (value: T, index: number) => U): U[];\n\n    /**\n      * Call a defined callback function on each element of an array.\n      * @param callbackfn A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayForEach weight=40\n    forEach(callbackfn: (value: T, index: number) => void): void;\n    \n    /**\n      * Return the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayFilter weight=40\n    filter(callbackfn: (value: T, index: number) => boolean): T[];\n\n    /**\n      * Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.\n      */\n    //% helper=arrayFill weight=39\n    fill(value: T, start?: number, end?: number): T[];\n    \n    /**\n     * Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.\n     * @param callbackfn \n     */\n    //% helper=arrayFind weight=40\n    find(callbackfn: (value: T, index: number) => boolean): T;\n\n    /**\n      * Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.\n      * @param initialValue Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    //% helper=arrayReduce weight=40\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U;\n\n\n    /** Remove the first occurence of an object. Returns true if removed. */\n    //% shim=Array_::removeElement weight=48\n    removeElement(element: T): boolean;\n\n    /** Remove the element at a certain index. */\n    //% help=arrays/remove-at\n    //% shim=Array_::removeAt weight=15\n    //% blockId=\"array_removeat\" block=\"%list| remove value at %index\" blockNamespace=\"arrays\"\n    removeAt(index: number): T;\n\n    /**\n     * Insert the value at a particular index, increases length by 1\n     * @param index the zero-based position in the list to insert the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/insert-at\n    //% shim=Array_::insertAt weight=20\n    //% blockId=\"array_insertAt\" block=\"%list| insert at %index| value %value\" blockNamespace=\"arrays\"\n    insertAt(index: number, value: T): void;\n\n    /**\n      * Return the index of the first occurrence of a value in an array.\n      * @param item The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n      */\n    //% help=arrays/index-of\n    //% shim=Array_::indexOf weight=40\n    //% blockId=\"array_indexof\" block=\"%list| find index of %value\" blockNamespace=\"arrays\"\n    indexOf(item: T, fromIndex?: number): number;\n\n    /**\n     * Get the value at a particular index\n     * @param index the zero-based position in the list of the item, eg: 0\n     */\n    //% help=arrays/get\n    //% shim=Array_::getAt weight=85\n    get(index: number): T;\n\n    /**\n     * Store a value at a particular index\n     * @param index the zero-based position in the list to store the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/set\n    //% shim=Array_::setAt weight=84\n    set(index: number, value: T): void;\n\n    [n: number]: T;\n}\n\ndeclare interface String {\n    // This block is currently disabled in favor of the built-in Blockly \"Create text with\" block, which compiles to \"\" + \"\"\n    // Add % sign back to the block annotation to re-enable\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param other The string to append to the end of the string.\n     */\n    //% shim=String_::concat weight=49\n    //% blockId=\"string_concat\" blockNamespace=\"text\"\n    // block=\"join %list=text|%other\"\n    concat(other: string): string;\n\n    /**\n     * Return the character at the specified index.\n     * @param index The zero-based index of the desired character.\n     */\n    //% shim=String_::charAt weight=48\n    //% help=text/char-at\n    //% blockId=\"string_get\" block=\"char from %this=text|at %pos\" blockNamespace=\"text\"\n    charAt(index: number): string;\n\n    /** Returns the length of a String object. */\n    //% property shim=String_::length weight=47\n    //% blockId=\"text_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"text\"\n    length: number;\n\n    /**\n     * Return the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    //% shim=String_::charCodeAt\n    charCodeAt(index: number): number;\n\n    /**\n     * See how the order of characters in two strings is different (in ASCII encoding).\n     * @param that String to compare to target string\n     */\n    //% shim=String_::compare\n    //% help=text/compare\n    //% blockId=\"string_compare\" block=\"compare %this=text| to %that\" blockNamespace=\"text\"\n    compare(that: string): number;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param length number of characters to extract\n     */\n    //% shim=String_::substr length.defl=10\n    //% help=text/substr\n    //% blockId=\"string_substr\" block=\"substring of %this=text|from %start|of length %length\" blockNamespace=\"text\"\n    substr(start: number, length?: number): string;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param end one-past-last character index\n     */\n    //% helper=stringSlice\n    slice(start: number, end?: number): string;\n\n    // This block is currently disabled, as it does not compile in some targets\n    // Add % sign back to the block annotation to re-enable\n    /** Returns a value indicating if the string is empty */\n    //% shim=String_::isEmpty\n    //% blockId=\"string_isempty\" blockNamespace=\"text\"\n    // block=\"%this=text| is empty\"\n    isEmpty(): boolean;\n\n    /**\n     * Returns the position of the first occurrence of a specified value in a string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::indexOf\n    //% help=text/index-of\n    //% blockId=\"string_indexof\" blockNamespace=\"text\"\n    indexOf(searchValue: string, start?: number): number;\n\n    /**\n     * Determines whether a string contains the characters of a specified string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::includes\n    //% help=text/includes\n    //% blockId=\"string_includes\" blockNamespace=\"text\"\n    includes(searchValue: string, start?: number): boolean;\n\n    /**\n     * Splits the string according to the separators\n     * @param separator \n     * @param limit \n     */\n    //% helper=stringSplit\n    //% help=text/split\n    //% blockId=\"string_split\" blockNamespace=\"text\"\n    split(separator?: string, limit?: number): string[];\n\n    [index: number]: string;\n}\n\n/**\n  * Convert a string to a number.\n  * @param s A string to convert into a number. eg: 123\n  */\n//% shim=String_::toNumber\n//% help=text/parse-float\n//% blockId=\"string_parsefloat\" block=\"parse to number %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\ndeclare function parseFloat(text: string): number;\n\ninterface Object { }\ninterface Function { }\ninterface IArguments { }\ninterface RegExp { }\ntype TemplateStringsArray = Array<string>;\n\ntype uint8 = number;\ntype uint16 = number;\ntype uint32 = number;\ntype int8 = number;\ntype int16 = number;\ntype int32 = number;\n\n\ndeclare interface Boolean {\n    /**\n     * Returns a string representation of an object.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Combine, split, and search text strings.\n*/\n//% blockNamespace=\"Text\"\ndeclare namespace String {\n\n    /**\n     * Make a string from the given ASCII character code.\n     */\n    //% help=math/from-char-code\n    //% shim=String_::fromCharCode\n    //% weight=0\n    //% blockNamespace=\"Text\" blockId=\"stringFromCharCode\" block=\"text from char code %code\" weight=1\n    function fromCharCode(code: number): string;\n}\n\ndeclare interface Number {\n    /**\n     * Returns a string representation of a number.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Add, remove, and replace items in lists.\n*/\n//% blockNamespace=\"Arrays\"\ndeclare namespace Array {\n    /**\n     * Check if a given object is an array.\n     */\n    //% shim=Array_::isArray\n    function isArray(obj: any): boolean;\n}\n\ndeclare namespace Object {\n    /**\n     * Return the field names in an object.\n     */\n    //% shim=pxtrt::keysOf\n    function keys(obj: any): string[];\n}\n\n/**\n * More complex operations with numbers.\n*/\ndeclare namespace Math {\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    //% shim=Math_::pow\n    function pow(x: number, y: number): number;\n\n    /**\n     * Returns a pseudorandom number between 0 and 1.\n     */\n    //% shim=Math_::random\n    //% help=math/random\n    function random(): number;\n\n    /**\n     * Returns a pseudorandom number between min and max included.\n     * If both numbers are integral, the result is integral.\n     * @param min the lower inclusive bound, eg: 0\n     * @param max the upper inclusive bound, eg: 10\n     */\n    //% blockId=\"device_random\" block=\"pick random %min|to %limit\"\n    //% help=math/random-range\n    //% shim=Math_::randomRange\n    function randomRange(min: number, max: number): number;\n\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A number\n     */\n    //% shim=Math_::log\n    function log(x: number): number;\n\n    /**\n     * Returns returns ``e^x``.\n     * @param x A number\n     */\n    //% shim=Math_::exp\n    function exp(x: number): number;\n\n    /**\n     * Returns the sine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::sin\n    function sin(x: number): number;\n\n    /**\n     * Returns the cosine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::cos\n    function cos(x: number): number;\n\n    /**\n     * Returns the tangent of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::tan\n    function tan(x: number): number;\n\n    /**\n     * Returns the arcsine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::asin\n    function asin(x: number): number;\n\n    /**\n     * Returns the arccosine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::acos\n    function acos(x: number): number;\n\n    /**\n     * Returns the arctangent (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::atan\n    function atan(x: number): number;\n\n    /**\n     * Returns the arctangent of the quotient of its arguments.\n     * @param y A number\n     * @param x A number\n     */\n    //% shim=Math_::atan2\n    function atan2(y: number, x: number): number;\n\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::sqrt\n    function sqrt(x: number): number;\n\n    /**\n     * Returns the smallest number greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::ceil\n    function ceil(x: number): number;\n\n    /**\n      * Returns the greatest number less than or equal to its numeric argument.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::floor\n    function floor(x: number): number;\n\n    /**\n      * Returns the number with the decimal part truncated.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::trunc\n    function trunc(x: number): number;\n\n    /**\n      * Returns a supplied numeric expression rounded to the nearest number.\n      * @param x The value to be rounded to the nearest number.\n      */\n    //% shim=Math_::round\n    function round(x: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit multiplication of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::imul\n    function imul(x: number, y: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit division of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::idiv\n    function idiv(x: number, y: number): number;\n}\n",
      "pxt-helpers.ts": "type Action = () => void;\n\n\n/**\n  * Convert a string to an integer.\n  * @param s A string to convert into an integral number. eg: 123\n  */\n//% help=text/parse-int\n//% blockId=\"string_parseint\" block=\"parse to integer %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\n//% blockHidden=1\nfunction parseInt(text: string): number {\n    return parseFloat(text) >> 0;\n}\n\nnamespace helpers {\n    export function arrayFill<T>(O: T[], value: T, start?: number, end?: number) {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\n        // Steps 3-5.\n        const len = O.length >>> 0;\n\n        // Steps 6-7.\n        const relativeStart = start === undefined ? 0 : start >> 0;\n\n        // Step 8.\n        let k = relativeStart < 0 ?\n            Math.max(len + relativeStart, 0) :\n            Math.min(relativeStart, len);\n\n        // Steps 9-10.\n        const relativeEnd = end === undefined ? len : end >> 0;\n\n        // Step 11.\n        const final = relativeEnd < 0 ?\n            Math.max(len + relativeEnd, 0) :\n            Math.min(relativeEnd, len);\n\n        // Step 12.\n        while (k < final) {\n            O[k] = value;\n            k++;\n        }\n\n        // Step 13.\n        return O;\n    }\n\n    export function arraySplice<T>(arr: T[], start: number, len: number) {\n        if (start < 0) {\n            return;\n        }\n        for (let i = 0; i < len; ++i) {\n            arr.removeAt(start)\n        }\n    }\n\n    export function arrayReverse<T>(arr: T[]): void {\n        let len = arr.length;\n        for (let i = 0; i < len / 2; i++) {\n            swap(arr, i, len - i - 1);\n        }\n    }\n\n    export function arrayShift<T>(arr: T[]): T {\n        return arr.removeAt(0);\n    }\n\n    export function arrayJoin<T>(arr: T[], sep: string): string {\n        let r = \"\";\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            if (i > 0 && sep)\n                r += sep;\n            r += arr[i] || \"\";\n        }\n        return r;\n    }\n\n    /*TODO: Enable this multiple value unshift, after rest is enabled in our compiler.\n        export function arrayUnshift<T>(arr: T[], ...values: T[]) : number {\n            for(let i = values.length; i > 0; --i) {\n                arr.insertAt(0, values[i - 1]);\n            }\n            return arr.length;\n        }\n    */\n    export function arrayUnshift<T>(arr: T[], value: T): number {\n        arr.insertAt(0, value);\n        return arr.length;\n    }\n\n    function swap<T>(arr: T[], i: number, j: number): void {\n        let temp: T = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    function sortHelper<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (arr.length <= 0 || !callbackfn) {\n            return arr;\n        }\n        let len = arr.length;\n        // simple selection sort.\n        for (let i = 0; i < len - 1; ++i) {\n            for (let j = i + 1; j < len; ++j) {\n                if (callbackfn(arr[i], arr[j]) > 0) {\n                    swap(arr, i, j);\n                }\n            }\n        }\n        return arr;\n    }\n\n    export function arraySort<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (!callbackfn) {\n            //TODO: support native strings and number sorting\n            /* callbackfn = function (value1: string, value2: string) : number {\n                return value1.compare(value2);\n                }*/\n        }\n        return sortHelper(arr, callbackfn);\n    }\n\n    export function arrayMap<T, U>(arr: T[], callbackfn: (value: T, index: number) => U): U[] {\n        let res: U[] = []\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            res.push(callbackfn(arr[i], i))\n        }\n        return res\n    }\n\n    export function arraySome<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (callbackfn(arr[i], i))\n                return true;\n        return false;\n    }\n\n    export function arrayEvery<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (!callbackfn(arr[i], i))\n                return false;\n        return true;\n    }\n\n    export function arrayForEach<T>(arr: T[], callbackfn: (value: T, index: number) => void): void {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            callbackfn(arr[i], i);\n        }\n    }\n\n    export function arrayFilter<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T[] {\n        let res: T[] = []\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) res.push(v)\n        }\n        return res\n    }\n\n    export function arrayFind<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) return v;\n        }\n        return undefined;\n    }\n\n    export function arrayReduce<T, U>(arr: T[], callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            initialValue = callbackfn(initialValue, arr[i], i)\n        }\n        return initialValue\n    }\n\n    export function arrayConcat<T>(arr: T[], otherArr: T[]): T[] {\n        let out: T[] = [];\n        for (let value of arr) {\n            out.push(value);\n        }\n        for (let value of otherArr) {\n            out.push(value);\n        }\n        return out;\n    }\n\n    export function arraySlice<T>(arr: T[], start?: number, end?: number): T[] {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n        const res: T[] = [];\n        const len = arr.length;\n\n        if (start === undefined)\n            start = 0;\n        else if (start < 0)\n            start = Math.max(len + start, 0);\n\n        if (start > len)\n            return res;\n\n        if (end === undefined)\n            end = len;\n        else if (end < 0)\n            end = len + end;\n\n        if (end > len)\n            end = len;\n\n        for (let i = start; i < end; ++i) {\n            res.push(arr[i]);\n        }\n        return res;\n    }\n\n    export function stringSlice(s: string, start: number, end?: number): string {\n        const len = s.length;\n\n        if (start < 0) {\n            start = Math.max(len + start, 0);\n        }\n\n        if (end == null) {\n            end = len;\n        }\n\n        if (end < 0) {\n            end = len + end;\n        }\n\n        return s.substr(start, end - start);\n    }\n\n    export function stringSplit(S: string, separator?: string, limit?: number): string[] {\n        // https://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.split\n        const A: string[] = [];\n        let lim = 0;\n        if (limit === undefined)\n            lim = (1 << 29) - 1; // spec says 1 << 53, leaving it at 29 for constant folding\n        else if (limit < 0)\n            lim = 0;\n        else\n            lim = limit | 0;\n        const s = S.length;\n        let p = 0;\n        const R = separator;\n        if (lim == 0)\n            return A;\n        if (separator === undefined) {\n            A[0] = S;\n            return A;\n        }\n        if (s == 0) {\n            let z = splitMatch(S, 0, R);\n            if (z > -1) return A;\n            A[0] = S;\n            return A;\n        }\n        let T: string;\n        let q = p;\n        while (q != s) {\n            let e = splitMatch(S, q, R);\n            if (e < 0) q++;\n            else {\n                if (e == p) q++;\n                else {\n                    T = stringSlice(S, p, q);\n                    A.push(T);\n                    if (A.length == lim) return A;\n                    p = e;\n                    q = p;\n                }\n            }\n        }\n        T = stringSlice(S, p, q);\n        A.push(T);\n        return A;\n    }\n\n    function splitMatch(S: string, q: number, R: string): number {\n        const r = R.length;\n        const s = S.length;\n        if (q + r > s) return -1;\n        for (let i = 0; i < r; ++i) {\n            if (S[q + i] != R[i])\n                return -1;\n        }\n        return q + r;\n    }\n}\n\nnamespace Math {\n    export function clamp(min: number, max: number, value: number): number {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    export function abs(x: number): number {\n        return x < 0 ? -x : x;\n    }\n\n    /**\n      * Returns the sign of the x, indicating whether x is positive, negative or zero.\n      * @param x The numeric expression to test\n      */\n    export function sign(x: number): number {\n        if (x == 0) return 0;\n        if (x > 0) return 1;\n        return -1;\n    }\n\n    /**\n      * Returns the larger of two supplied numeric expressions.\n      */\n    export function max(a: number, b: number): number {\n        if (a >= b) return a;\n        return b;\n    }\n\n    /**\n      * Returns the smaller of two supplied numeric expressions.\n      */\n    export function min(a: number, b: number): number {\n        if (a <= b) return a;\n        return b;\n    }\n\n    /**\n     * Rounds ``x`` to a number with the given number of ``digits``\n     * @param x the number to round\n     * @param digits the number of resulting digits\n     */\n    //%\n    export function roundWithPrecision(x: number, digits: number): number {\n        digits = digits | 0;\n        // invalid digits input\n        if (digits <= 0) return Math.round(x);\n        if (x == 0) return 0;\n        let r = 0;\n        do {\n            const d = Math.pow(10, digits);\n            r = Math.round(x * d) / d;\n            digits++;\n        } while (r == 0 && digits < 21);\n        return r;\n    }\n}\n\n\n//% blockHidden=1\nnamespace __internal {\n    /**\n     * A shim to render a boolean as a down/up toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleDownUp block=\"%down\"\n    //% down.fieldEditor=toggledownup\n    //% down.fieldOptions.decompileLiterals=true\n    export function __downUp(down: boolean): boolean {\n        return down;\n    }\n\n    /**\n     * A shim to render a boolean as a up/down toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleUpDown block=\"%up\"\n    //% up.fieldEditor=toggleupdown\n    //% up.fieldOptions.decompileLiterals=true\n    export function __upDown(up: boolean): boolean {\n        return up;\n    }\n\n    /**\n     * A shim to render a boolean as a high/low toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleHighLow block=\"%high\"\n    //% high.fieldEditor=togglehighlow\n    //% high.fieldOptions.decompileLiterals=true\n    export function __highLow(high: boolean): boolean {\n        return high;\n    }\n\n    /**\n     * A shim to render a boolean as a on/off toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleOnOff block=\"%on\"\n    //% on.fieldEditor=toggleonoff\n    //% on.fieldOptions.decompileLiterals=true\n    export function __onOff(on: boolean): boolean {\n        return on;\n    }\n\n    /**\n     * A shim to render a boolean as a yes/no toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleYesNo block=\"%yes\"\n    //% yes.fieldEditor=toggleyesno\n    //% yes.fieldOptions.decompileLiterals=true\n    export function __yesNo(yes: boolean): boolean {\n        return yes;\n    }\n\n    /**\n     * A shim to render a boolean as a win/lose toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleWinLose block=\"%win\"\n    //% win.fieldEditor=togglewinlose\n    //% win.fieldOptions.decompileLiterals=true\n    export function __winLose(win: boolean): boolean {\n        return win;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param color color, eg: #ff0000\n     */\n    //% blockId=colorNumberPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colornumber\" value.fieldOptions.decompileLiterals=true\n    //% value.defl='#ff0000'\n    //% value.fieldOptions.colours='[\"#ff0000\",\"#ff8000\",\"#ffff00\",\"#ff9da5\",\"#00ff00\",\"#b09eff\",\"#00ffff\",\"#007fff\",\"#65471f\",\"#0000ff\",\"#7f00ff\",\"#ff0080\",\"#ff00ff\",\"#ffffff\",\"#999999\",\"#000000\"]'\n    //% value.fieldOptions.columns=4 value.fieldOptions.className='rgbColorPicker'\n    export function __colorNumberPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param value value between 0 to 255 to get a color value, eg: 10\n     */\n    //% blockId=colorWheelPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    export function __colorWheelPicker(value: number) {\n        return value;\n    }\n\n    /**\n    * Get the color wheel field editor using HSV values\n    * @param value value between 0 to 255 to get a color value, eg: 10\n    */\n    //% blockId=colorWheelHsvPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    //% value.fieldOptions.channel=hsvfast\n    export function __colorWheelHsvPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * A speed picker\n     * @param speed the speed, eg: 50\n     */\n    //% blockId=speedPicker block=\"%speed\" shim=TD_ID\n    //% speed.fieldEditor=\"speed\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 speed.fieldOptions.decompileLiterals=1\n    export function __speedPicker(speed: number): number {\n        return speed;\n    }\n\n    /**\n     * A turn ratio picker\n     * @param turnratio the turn ratio, eg: 0\n     */\n    //% blockId=turnRatioPicker block=\"%turnratio\" shim=TD_ID\n    //% turnratio.fieldEditor=\"turnratio\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 turnRatio.fieldOptions.decompileLiterals=1\n    export function __turnRatioPicker(turnratio: number): number {\n        return turnratio;\n    }\n\n    /**\n     * A field editor that displays a protractor\n     */\n    //% blockId=protractorPicker block=\"%angle\"\n    //% shim=TD_ID\n    //% angle.fieldEditor=protractor\n    //% angle.fieldOptions.decompileLiterals=1    \n    //% colorSecondary=\"#FFFFFF\"\n    //% blockHidden=1\n    export function __protractor(angle: number) {\n        return angle;\n    }\n\n    /**\n      * Get the time field editor\n      * @param ms time duration in milliseconds, eg: 500, 1000\n      */\n    //% blockId=timePicker block=\"%ms\"\n    //% blockHidden=true shim=TD_ID\n    //% colorSecondary=\"#FFFFFF\"\n    //% ms.fieldEditor=\"numberdropdown\" ms.fieldOptions.decompileLiterals=true\n    //% ms.fieldOptions.data='[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000]]'\n    export function __timePicker(ms: number): number {\n        return ms;\n    }\n}",
      "pxt.json": "{\n    \"name\": \"base\",\n    \"description\": \"The base library\",\n    \"files\": [\n        \"README.md\",\n        \"pxt-core.d.ts\",\n        \"pxt-helpers.ts\",\n        \"buffer.cpp\",\n        \"buffer.ts\",\n        \"shims.d.ts\",\n        \"enums.d.ts\",\n        \"loops.cpp\",\n        \"math.ts\",\n        \"textFile.cpp\",\n        \"textFile.ts\",\n        \"control.ts\",\n        \"control.cpp\",\n        \"console.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"public\": true,\n    \"dependencies\": {},\n    \"targetVersions\": {\n        \"target\": \"0.0.1\"\n    }\n}",
      "shims.d.ts": "// Auto-generated. Do not edit.\n\n\n\n    //% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\ndeclare interface Buffer {\n    /**\n     * Write a number in specified format in the buffer.\n     */\n    //% shim=BufferMethods::setNumber\n    setNumber(format: NumberFormat, offset: int32, value: number): void;\n\n    /**\n     * Read a number in specified format from the buffer.\n     */\n    //% shim=BufferMethods::getNumber\n    getNumber(format: NumberFormat, offset: int32): number;\n\n    /** Returns the length of a Buffer object. */\n    //% property shim=BufferMethods::length\n    length: int32;\n\n    /**\n     * Fill (a fragment) of the buffer with given value.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::fill\n    fill(value: int32, offset?: int32, length?: int32): void;\n\n    /**\n     * Return a copy of a fragment of a buffer.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::slice\n    slice(offset?: int32, length?: int32): Buffer;\n\n    /**\n     * Shift buffer left in place, with zero padding.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::shift\n    shift(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Convert a buffer to string assuming UTF8 encoding\n     */\n    //% shim=BufferMethods::toString\n    toString(): string;\n\n    /**\n     * Convert a buffer to its hexadecimal representation.\n     */\n    //% shim=BufferMethods::toHex\n    toHex(): string;\n\n    /**\n     * Rotate buffer left in place.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::rotate\n    rotate(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Write contents of `src` at `dstOffset` in current buffer.\n     */\n    //% shim=BufferMethods::write\n    write(dstOffset: int32, src: Buffer): void;\n}\ndeclare namespace control {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=control::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Create a new buffer with UTF8-encoded string\n     * @param str the string to put in the buffer\n     */\n    //% shim=control::createBufferFromUTF8\n    function createBufferFromUTF8(str: string): Buffer;\n}\ndeclare namespace loops {\n\n    /**\n     * Repeats the code forever in the background. On each iteration, allows other codes to run.\n     * @param body code to execute\n     */\n    //% help=loops/forever weight=100 afterOnStart=true deprecated=true\n    //% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1 shim=loops::forever\n    function forever(a: () => void): void;\n\n    /**\n     * Pause for the specified time in milliseconds\n     * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n     */\n    //% help=loops/pause weight=99 deprecated=true\n    //% async block=\"pause %pause=timePicker|ms\"\n    //% blockId=device_pause_deprecated shim=loops::pause\n    function pause(ms: int32): void;\n}\ndeclare namespace textFile {\n\n    /**\n     * Derive a unique, consistent serial number of this control from internal data.\n     */\n    //% blockId=\"textFile_read\" block=\"read Textfile %s | .txt\" weight=53\n    //% promise async shim=textFile::readTextfile\n    function readTextfile(s: string): string;\n\n    /**\n     * Derive a unique, consistent serial number of this control from internal data.\n     */\n    //% blockId=\"textFile_write\" block=\"write %d |to %f | .txt \" weight=52 shim=textFile::writeTextfile\n    function writeTextfile(f: string, d: string): void;\n}\ndeclare namespace control {\n\n    /**\n     * Gets the number of milliseconds elapsed since power on.\n     */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\" shim=control::millis\n    function millis(): int32;\n\n    /**\n     * Run other code in the parallel.\n     */\n    //% help=control/run-in-parallel handlerStatement=1\n    //% blockId=\"control_run_in_parallel\" block=\"run in parallel\" blockGap=8 shim=control::runInParallel\n    function runInParallel(a: () => void): void;\n\n    /**\n     * Derive a unique, consistent serial number of this control from internal data.\n     */\n    //% blockId=\"control_control_serial_number\" block=\"device serial number\" weight=54\n    //% help=control/control-serial-number\n    //% promise shim=control::deviceSerialNumber\n    function deviceSerialNumber(): int32;\n\n    /**\n     * Derive a unique, consistent serial number of this control from internal data.\n     */\n    //% blockId=\"control_control_name\" block=\"device name\" weight=55\n    //% promise shim=control::deviceName\n    function deviceName(): int32;\n\n    /**\n     * Derive a unique, consistent serial number of this control from internal data.\n     */\n    //% blockId=\"control_control_version\" block=\"device version\" weight=53\n    //% promise shim=control::deviceVersion\n    function deviceVersion(): int32;\n\n    /**\n     * Derive a unique, consistent serial number of this control from internal data.\n     */\n    //% blockId=\"control_control_bonescript\" block=\"bonescript version\" weight=52\n    //% promise shim=control::deviceBonescriptVersion\n    function deviceBonescriptVersion(): int32;\n\n    /**\n     *\n     */\n    //% shim=control::__log\n    function __log(prority: int32, text: string): void;\n\n    /**\n     * Dump internal information about a value.\n     */\n    //% shim=control::dmesgValue\n    function dmesgValue(v: any): void;\n\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //% shim=control::gc\n    function gc(): void;\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //% shim=control::profilingEnabled\n    function profilingEnabled(): boolean;\n}\n\n// Auto-generated. Do not edit. Really.\n",
      "test.ts": "let i = 1\nlet f = 0.5\nlet plus = i + f\nlet minus = i - f\n\nlet r = Math.random()\nlet ri = Math.randomRange(5, 10)\n\nforever(() => {\n    pause(100)\n})\n",
      "textFile.cpp": "#include \"pxtbase.h\"\r\n\r\n\r\nnamespace textFile {\r\n    /**\r\n    * Derive a unique, consistent serial number of this control from internal data.\r\n    */\r\n    //% blockId=\"textFile_read\" block=\"read Textfile %s | .txt\" weight=53\r\n    //% promise async\r\n    StringData* readTextfile(StringData* s) {\r\n        return s;\r\n    }\r\n    \r\n    /**\r\n    * Derive a unique, consistent serial number of this control from internal data.\r\n    */\r\n    //% blockId=\"textFile_write\" block=\"write %d |to %f | .txt \" weight=52\r\n    void writeTextfile(StringData* f, StringData* d) {\r\n       \r\n    }\r\n    \r\n}\r\n",
      "textFile.ts": "/**\r\n* Program controls and events.\r\n*/\r\n//% weight=83 color=\"#B4009E\" icon=\"\\uf15c\" advanced=true\r\nnamespace textFile {\r\n}"
    },
    "pocketbeagle": {
      "README.md": "# pocketbeagle\n\nThe pocketbeagle library.\n\n",
      "board.json": "{\n  \"driveDisplayName\": \"\",\n  \"visual\": {\n    \"image\": \"pkg://board.svg\",\n    \"useCrocClips\": false,\n    \"width\": 365,\n    \"height\": 243.5,\n    \"pinDist\": 10,\n    \"pinBlocks\": [\n      {\n        \"x\": 132.46342589647048,\n        \"y\": 4.373153466575434,\n        \"labels\": [\n          \"VBAT\"\n        ]\n      },\n      {\n        \"x\": 112.72695309654635,\n        \"y\": 4.373153466575434,\n        \"labels\": [\n          \"GND\"\n        ]\n      },\n      {\n        \"x\": 92.99050356023021,\n        \"y\": 4.373153466575434,\n        \"labels\": [\n          \"A4_D4_TX_MOSI\"\n        ]\n      },\n      {\n        \"x\": 73.25403076030607,\n        \"y\": 4.373153466575434,\n        \"labels\": [\n          \"A3_D3_RX_SCK\"\n        ]\n      },\n      {\n        \"x\": 53.51753469677395,\n        \"y\": 102.85924813557162,\n        \"labels\": [\n          \"3V3\"\n        ]\n      },\n      {\n        \"x\": 73.25403076030607,\n        \"y\": 102.85924813557162,\n        \"labels\": [\n          \"A2_D0_SDA\"\n        ]\n      },\n      {\n        \"x\": 92.99050356023021,\n        \"y\": 102.85924813557162,\n        \"labels\": [\n          \"A0_D1\"\n        ]\n      },\n      {\n        \"x\": 112.72695309654635,\n        \"y\": 102.85924813557162,\n        \"labels\": [\n          \"A2_D0\"\n        ]\n      }\n    ],\n    \"leds\": [\n      {\n        \"x\": 185.3755484589453,\n        \"y\": 99.02859642989057,\n        \"w\": 6.216966598912433,\n        \"h\": 6.217059245831805,\n        \"color\": \"#0000ff\",\n        \"label\": \"LED\"\n      },{\n        \"x\": 185.3755484589453,\n        \"y\": 99.02859642989057,\n        \"w\": 6.216966598912433,\n        \"h\": 6.217059245831805,\n        \"color\": \"#0000ff\",\n        \"label\": \"LED\"\n      },{\n        \"x\": 185.3755484589453,\n        \"y\": 99.02859642989057,\n        \"w\": 6.216966598912433,\n        \"h\": 6.217059245831805,\n        \"color\": \"#0000ff\",\n        \"label\": \"LED\"\n      },{\n        \"x\": 185.3755484589453,\n        \"y\": 99.02859642989057,\n        \"w\": 6.216966598912433,\n        \"h\": 6.217059245831805,\n        \"color\": \"#0000ff\",\n        \"label\": \"LED\"\n      }      \n    ],\n    \"touchPads\": [\n      \n    ],\n    \"buttons\": [],\n    \"reset\": {\n      \"x\": 17.833341005286808,\n      \"y\": 45.50404363529417,\n      \"w\": 13.596235396060582,\n      \"h\": 13.596392949742196\n    }\n  },\n  \"gpioPinMap\": {\n    \"VBAT\": \"VBAT\",\n    \"GND\": \"GND\",\n    \"A4_D4_TX_MOSI\": \"A4_D4_TX_MOSI\",\n    \"A4\": \"A4_D4_TX_MOSI\",\n    \"D4\": \"A4_D4_TX_MOSI\",\n    \"TX\": \"A4_D4_TX_MOSI\",\n    \"MOSI\": \"A4_D4_TX_MOSI\",\n    \"A3_D3_RX_SCK\": \"A3_D3_RX_SCK\",\n    \"A3\": \"A3_D3_RX_SCK\",\n    \"D3\": \"A3_D3_RX_SCK\",\n    \"RX\": \"A3_D3_RX_SCK\",\n    \"SCK\": \"A3_D3_RX_SCK\",\n    \"3V3\": \"3V3\",\n    \"A2_D0_SDA\": \"A2_D0_SDA\",\n    \"A2\": \"A2_D0\",\n    \"D0\": \"A2_D0\",\n    \"SDA\": \"A2_D0_SDA\",\n    \"A0_D1\": \"A0_D1\",\n    \"A0\": \"A0_D1\",\n    \"D1\": \"A0_D1\",\n    \"A2_D0\": \"A2_D0\",\n    \"JACK_TX\": \"A4_D4_TX_MOSI\",\n    \"LED\": \"LED\",\n    \"RESET\": \"RESET\",\n    \"NEOPIXEL\": \"NEOPIXEL\"\n  },\n  \"groundPins\": [\n    \"GND\"\n  ],\n  \"threeVoltPins\": [\n    \"3V3\"\n  ],\n  \"marginWhenBreadboarding\": [\n    0,\n    0,\n    80,\n    0\n  ]\n}",
      "board.svg": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"380pt\" height=\"240pt\" viewBox=\"0 0 380 240\" version=\"1.1\">\n<defs>\n<g>\n<symbol overflow=\"visible\" id=\"glyph0-0\">\n<path style=\"stroke:none;\" d=\"M 0.296875 1.0625 L 0.296875 -4.234375 L 3.296875 -4.234375 L 3.296875 1.0625 Z M 0.640625 0.734375 L 2.96875 0.734375 L 2.96875 -3.890625 L 0.640625 -3.890625 Z M 0.640625 0.734375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-1\">\n<path style=\"stroke:none;\" d=\"M 2.359375 -3.96875 C 1.929688 -3.96875 1.59375 -3.804688 1.34375 -3.484375 C 1.09375 -3.171875 0.96875 -2.738281 0.96875 -2.1875 C 0.96875 -1.632812 1.09375 -1.195312 1.34375 -0.875 C 1.59375 -0.550781 1.929688 -0.390625 2.359375 -0.390625 C 2.796875 -0.390625 3.140625 -0.550781 3.390625 -0.875 C 3.640625 -1.195312 3.765625 -1.632812 3.765625 -2.1875 C 3.765625 -2.738281 3.640625 -3.171875 3.390625 -3.484375 C 3.140625 -3.804688 2.796875 -3.96875 2.359375 -3.96875 Z M 2.359375 -4.453125 C 2.972656 -4.453125 3.460938 -4.242188 3.828125 -3.828125 C 4.203125 -3.421875 4.390625 -2.875 4.390625 -2.1875 C 4.390625 -1.5 4.203125 -0.945312 3.828125 -0.53125 C 3.460938 -0.125 2.972656 0.078125 2.359375 0.078125 C 1.742188 0.078125 1.253906 -0.125 0.890625 -0.53125 C 0.523438 -0.9375 0.34375 -1.488281 0.34375 -2.1875 C 0.34375 -2.875 0.523438 -3.421875 0.890625 -3.828125 C 1.253906 -4.242188 1.742188 -4.453125 2.359375 -4.453125 Z M 2.359375 -4.453125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-2\">\n<path style=\"stroke:none;\" d=\"M 3.21875 -4.234375 L 3.21875 -3.65625 C 2.988281 -3.757812 2.773438 -3.835938 2.578125 -3.890625 C 2.378906 -3.941406 2.1875 -3.96875 2 -3.96875 C 1.675781 -3.96875 1.425781 -3.90625 1.25 -3.78125 C 1.070312 -3.65625 0.984375 -3.476562 0.984375 -3.25 C 0.984375 -3.0625 1.039062 -2.914062 1.15625 -2.8125 C 1.28125 -2.71875 1.503906 -2.640625 1.828125 -2.578125 L 2.1875 -2.5 C 2.625 -2.414062 2.945312 -2.265625 3.15625 -2.046875 C 3.363281 -1.835938 3.46875 -1.554688 3.46875 -1.203125 C 3.46875 -0.785156 3.328125 -0.46875 3.046875 -0.25 C 2.765625 -0.03125 2.347656 0.078125 1.796875 0.078125 C 1.585938 0.078125 1.363281 0.0507812 1.125 0 C 0.894531 -0.0390625 0.65625 -0.101562 0.40625 -0.1875 L 0.40625 -0.796875 C 0.65625 -0.660156 0.894531 -0.554688 1.125 -0.484375 C 1.351562 -0.421875 1.578125 -0.390625 1.796875 -0.390625 C 2.140625 -0.390625 2.398438 -0.457031 2.578125 -0.59375 C 2.765625 -0.726562 2.859375 -0.914062 2.859375 -1.15625 C 2.859375 -1.375 2.789062 -1.539062 2.65625 -1.65625 C 2.53125 -1.78125 2.316406 -1.875 2.015625 -1.9375 L 1.65625 -2.015625 C 1.207031 -2.097656 0.882812 -2.234375 0.6875 -2.421875 C 0.488281 -2.609375 0.390625 -2.867188 0.390625 -3.203125 C 0.390625 -3.585938 0.523438 -3.890625 0.796875 -4.109375 C 1.078125 -4.335938 1.457031 -4.453125 1.9375 -4.453125 C 2.132812 -4.453125 2.335938 -4.429688 2.546875 -4.390625 C 2.765625 -4.359375 2.988281 -4.304688 3.21875 -4.234375 Z M 3.21875 -4.234375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-3\">\n<path style=\"stroke:none;\" d=\"M 1.1875 -3.890625 L 1.1875 -0.484375 L 1.890625 -0.484375 C 2.492188 -0.484375 2.9375 -0.617188 3.21875 -0.890625 C 3.5 -1.171875 3.640625 -1.601562 3.640625 -2.1875 C 3.640625 -2.78125 3.5 -3.210938 3.21875 -3.484375 C 2.9375 -3.753906 2.492188 -3.890625 1.890625 -3.890625 Z M 0.59375 -4.375 L 1.8125 -4.375 C 2.65625 -4.375 3.273438 -4.195312 3.671875 -3.84375 C 4.066406 -3.488281 4.265625 -2.9375 4.265625 -2.1875 C 4.265625 -1.4375 4.066406 -0.882812 3.671875 -0.53125 C 3.273438 -0.175781 2.65625 0 1.8125 0 L 0.59375 0 Z M 0.59375 -4.375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-4\">\n<path style=\"stroke:none;\" d=\"M 2.4375 -2.359375 C 2.71875 -2.296875 2.9375 -2.164062 3.09375 -1.96875 C 3.257812 -1.78125 3.34375 -1.546875 3.34375 -1.265625 C 3.34375 -0.835938 3.191406 -0.503906 2.890625 -0.265625 C 2.597656 -0.0351562 2.175781 0.078125 1.625 0.078125 C 1.4375 0.078125 1.242188 0.0546875 1.046875 0.015625 C 0.859375 -0.015625 0.660156 -0.0625 0.453125 -0.125 L 0.453125 -0.703125 C 0.617188 -0.609375 0.800781 -0.535156 1 -0.484375 C 1.195312 -0.429688 1.398438 -0.40625 1.609375 -0.40625 C 1.984375 -0.40625 2.265625 -0.476562 2.453125 -0.625 C 2.648438 -0.78125 2.75 -0.992188 2.75 -1.265625 C 2.75 -1.523438 2.65625 -1.726562 2.46875 -1.875 C 2.289062 -2.019531 2.039062 -2.09375 1.71875 -2.09375 L 1.21875 -2.09375 L 1.21875 -2.578125 L 1.75 -2.578125 C 2.039062 -2.578125 2.257812 -2.632812 2.40625 -2.75 C 2.5625 -2.875 2.640625 -3.046875 2.640625 -3.265625 C 2.640625 -3.484375 2.5625 -3.648438 2.40625 -3.765625 C 2.25 -3.890625 2.019531 -3.953125 1.71875 -3.953125 C 1.5625 -3.953125 1.390625 -3.929688 1.203125 -3.890625 C 1.015625 -3.859375 0.8125 -3.804688 0.59375 -3.734375 L 0.59375 -4.265625 C 0.8125 -4.328125 1.019531 -4.375 1.21875 -4.40625 C 1.414062 -4.4375 1.601562 -4.453125 1.78125 -4.453125 C 2.226562 -4.453125 2.582031 -4.347656 2.84375 -4.140625 C 3.101562 -3.941406 3.234375 -3.664062 3.234375 -3.3125 C 3.234375 -3.070312 3.160156 -2.867188 3.015625 -2.703125 C 2.878906 -2.535156 2.6875 -2.421875 2.4375 -2.359375 Z M 2.4375 -2.359375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-5\">\n<path style=\"stroke:none;\" d=\"M 0.640625 -4.375 L 2.96875 -4.375 L 2.96875 -3.875 L 1.1875 -3.875 L 1.1875 -2.796875 C 1.269531 -2.828125 1.351562 -2.847656 1.4375 -2.859375 C 1.53125 -2.878906 1.617188 -2.890625 1.703125 -2.890625 C 2.191406 -2.890625 2.578125 -2.753906 2.859375 -2.484375 C 3.148438 -2.222656 3.296875 -1.863281 3.296875 -1.40625 C 3.296875 -0.9375 3.148438 -0.570312 2.859375 -0.3125 C 2.566406 -0.0507812 2.148438 0.078125 1.609375 0.078125 C 1.429688 0.078125 1.242188 0.0625 1.046875 0.03125 C 0.859375 0 0.664062 -0.046875 0.46875 -0.109375 L 0.46875 -0.703125 C 0.644531 -0.597656 0.828125 -0.519531 1.015625 -0.46875 C 1.203125 -0.425781 1.398438 -0.40625 1.609375 -0.40625 C 1.941406 -0.40625 2.207031 -0.492188 2.40625 -0.671875 C 2.601562 -0.859375 2.703125 -1.101562 2.703125 -1.40625 C 2.703125 -1.707031 2.601562 -1.945312 2.40625 -2.125 C 2.207031 -2.300781 1.941406 -2.390625 1.609375 -2.390625 C 1.441406 -2.390625 1.28125 -2.367188 1.125 -2.328125 C 0.96875 -2.296875 0.804688 -2.242188 0.640625 -2.171875 Z M 0.640625 -4.375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-6\">\n<path style=\"stroke:none;\" d=\"M 1.90625 -2.078125 C 1.625 -2.078125 1.398438 -2 1.234375 -1.84375 C 1.078125 -1.695312 1 -1.492188 1 -1.234375 C 1 -0.960938 1.078125 -0.753906 1.234375 -0.609375 C 1.398438 -0.460938 1.625 -0.390625 1.90625 -0.390625 C 2.1875 -0.390625 2.40625 -0.460938 2.5625 -0.609375 C 2.726562 -0.765625 2.8125 -0.972656 2.8125 -1.234375 C 2.8125 -1.492188 2.726562 -1.695312 2.5625 -1.84375 C 2.40625 -2 2.1875 -2.078125 1.90625 -2.078125 Z M 1.3125 -2.328125 C 1.0625 -2.390625 0.863281 -2.503906 0.71875 -2.671875 C 0.582031 -2.847656 0.515625 -3.0625 0.515625 -3.3125 C 0.515625 -3.664062 0.632812 -3.941406 0.875 -4.140625 C 1.125 -4.347656 1.46875 -4.453125 1.90625 -4.453125 C 2.34375 -4.453125 2.6875 -4.347656 2.9375 -4.140625 C 3.1875 -3.941406 3.3125 -3.664062 3.3125 -3.3125 C 3.3125 -3.0625 3.238281 -2.847656 3.09375 -2.671875 C 2.945312 -2.503906 2.75 -2.390625 2.5 -2.328125 C 2.789062 -2.265625 3.015625 -2.132812 3.171875 -1.9375 C 3.328125 -1.75 3.40625 -1.515625 3.40625 -1.234375 C 3.40625 -0.804688 3.273438 -0.476562 3.015625 -0.25 C 2.753906 -0.03125 2.382812 0.078125 1.90625 0.078125 C 1.425781 0.078125 1.054688 -0.03125 0.796875 -0.25 C 0.535156 -0.476562 0.40625 -0.804688 0.40625 -1.234375 C 0.40625 -1.515625 0.484375 -1.75 0.640625 -1.9375 C 0.804688 -2.132812 1.03125 -2.265625 1.3125 -2.328125 Z M 1.09375 -3.265625 C 1.09375 -3.035156 1.164062 -2.859375 1.3125 -2.734375 C 1.457031 -2.609375 1.65625 -2.546875 1.90625 -2.546875 C 2.15625 -2.546875 2.351562 -2.609375 2.5 -2.734375 C 2.644531 -2.859375 2.71875 -3.035156 2.71875 -3.265625 C 2.71875 -3.492188 2.644531 -3.671875 2.5 -3.796875 C 2.351562 -3.921875 2.15625 -3.984375 1.90625 -3.984375 C 1.65625 -3.984375 1.457031 -3.921875 1.3125 -3.796875 C 1.164062 -3.671875 1.09375 -3.492188 1.09375 -3.265625 Z M 1.09375 -3.265625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-0\">\n<path style=\"stroke:none;\" d=\"M 0.40625 1.421875 L 0.40625 -5.640625 L 4.40625 -5.640625 L 4.40625 1.421875 Z M 0.84375 0.96875 L 3.953125 0.96875 L 3.953125 -5.1875 L 0.84375 -5.1875 Z M 0.84375 0.96875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-1\">\n<path style=\"stroke:none;\" d=\"M 1.578125 -5.1875 L 1.578125 -3 L 2.5625 -3 C 2.9375 -3 3.222656 -3.09375 3.421875 -3.28125 C 3.617188 -3.46875 3.71875 -3.738281 3.71875 -4.09375 C 3.71875 -4.4375 3.617188 -4.703125 3.421875 -4.890625 C 3.222656 -5.085938 2.9375 -5.1875 2.5625 -5.1875 Z M 0.78125 -5.828125 L 2.5625 -5.828125 C 3.21875 -5.828125 3.710938 -5.679688 4.046875 -5.390625 C 4.378906 -5.097656 4.546875 -4.664062 4.546875 -4.09375 C 4.546875 -3.519531 4.378906 -3.082031 4.046875 -2.78125 C 3.710938 -2.488281 3.21875 -2.34375 2.5625 -2.34375 L 1.578125 -2.34375 L 1.578125 0 L 0.78125 0 Z M 0.78125 -5.828125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-2\">\n<path style=\"stroke:none;\" d=\"M 2.453125 -3.875 C 2.066406 -3.875 1.757812 -3.722656 1.53125 -3.421875 C 1.3125 -3.117188 1.203125 -2.707031 1.203125 -2.1875 C 1.203125 -1.664062 1.3125 -1.253906 1.53125 -0.953125 C 1.757812 -0.648438 2.066406 -0.5 2.453125 -0.5 C 2.835938 -0.5 3.140625 -0.648438 3.359375 -0.953125 C 3.585938 -1.253906 3.703125 -1.664062 3.703125 -2.1875 C 3.703125 -2.707031 3.585938 -3.117188 3.359375 -3.421875 C 3.140625 -3.722656 2.835938 -3.875 2.453125 -3.875 Z M 2.453125 -4.484375 C 3.078125 -4.484375 3.566406 -4.28125 3.921875 -3.875 C 4.273438 -3.46875 4.453125 -2.90625 4.453125 -2.1875 C 4.453125 -1.46875 4.273438 -0.90625 3.921875 -0.5 C 3.566406 -0.09375 3.078125 0.109375 2.453125 0.109375 C 1.828125 0.109375 1.332031 -0.09375 0.96875 -0.5 C 0.613281 -0.90625 0.4375 -1.46875 0.4375 -2.1875 C 0.4375 -2.90625 0.613281 -3.46875 0.96875 -3.875 C 1.332031 -4.28125 1.828125 -4.484375 2.453125 -4.484375 Z M 2.453125 -4.484375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-3\">\n<path style=\"stroke:none;\" d=\"M 3.90625 -4.203125 L 3.90625 -3.53125 C 3.695312 -3.644531 3.488281 -3.726562 3.28125 -3.78125 C 3.082031 -3.84375 2.878906 -3.875 2.671875 -3.875 C 2.203125 -3.875 1.835938 -3.722656 1.578125 -3.421875 C 1.328125 -3.128906 1.203125 -2.71875 1.203125 -2.1875 C 1.203125 -1.65625 1.328125 -1.238281 1.578125 -0.9375 C 1.835938 -0.644531 2.203125 -0.5 2.671875 -0.5 C 2.878906 -0.5 3.082031 -0.523438 3.28125 -0.578125 C 3.488281 -0.640625 3.695312 -0.722656 3.90625 -0.828125 L 3.90625 -0.171875 C 3.707031 -0.078125 3.5 -0.0078125 3.28125 0.03125 C 3.0625 0.0820312 2.832031 0.109375 2.59375 0.109375 C 1.9375 0.109375 1.410156 -0.09375 1.015625 -0.5 C 0.628906 -0.914062 0.4375 -1.476562 0.4375 -2.1875 C 0.4375 -2.894531 0.632812 -3.453125 1.03125 -3.859375 C 1.425781 -4.273438 1.960938 -4.484375 2.640625 -4.484375 C 2.859375 -4.484375 3.070312 -4.457031 3.28125 -4.40625 C 3.5 -4.363281 3.707031 -4.296875 3.90625 -4.203125 Z M 3.90625 -4.203125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-4\">\n<path style=\"stroke:none;\" d=\"M 0.734375 -6.078125 L 1.453125 -6.078125 L 1.453125 -2.484375 L 3.59375 -4.375 L 4.515625 -4.375 L 2.1875 -2.328125 L 4.609375 0 L 3.671875 0 L 1.453125 -2.140625 L 1.453125 0 L 0.734375 0 Z M 0.734375 -6.078125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-5\">\n<path style=\"stroke:none;\" d=\"M 4.5 -2.375 L 4.5 -2.015625 L 1.1875 -2.015625 C 1.21875 -1.523438 1.367188 -1.148438 1.640625 -0.890625 C 1.910156 -0.628906 2.28125 -0.5 2.75 -0.5 C 3.03125 -0.5 3.300781 -0.53125 3.5625 -0.59375 C 3.820312 -0.664062 4.078125 -0.769531 4.328125 -0.90625 L 4.328125 -0.21875 C 4.066406 -0.113281 3.800781 -0.0351562 3.53125 0.015625 C 3.257812 0.078125 2.988281 0.109375 2.71875 0.109375 C 2.019531 0.109375 1.460938 -0.09375 1.046875 -0.5 C 0.640625 -0.90625 0.4375 -1.453125 0.4375 -2.140625 C 0.4375 -2.859375 0.628906 -3.425781 1.015625 -3.84375 C 1.410156 -4.269531 1.9375 -4.484375 2.59375 -4.484375 C 3.175781 -4.484375 3.640625 -4.289062 3.984375 -3.90625 C 4.328125 -3.53125 4.5 -3.019531 4.5 -2.375 Z M 3.78125 -2.578125 C 3.769531 -2.972656 3.65625 -3.285156 3.4375 -3.515625 C 3.226562 -3.753906 2.945312 -3.875 2.59375 -3.875 C 2.195312 -3.875 1.875 -3.757812 1.625 -3.53125 C 1.382812 -3.300781 1.25 -2.984375 1.21875 -2.578125 Z M 3.78125 -2.578125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-6\">\n<path style=\"stroke:none;\" d=\"M 1.46875 -5.625 L 1.46875 -4.375 L 2.953125 -4.375 L 2.953125 -3.8125 L 1.46875 -3.8125 L 1.46875 -1.4375 C 1.46875 -1.082031 1.515625 -0.851562 1.609375 -0.75 C 1.710938 -0.65625 1.910156 -0.609375 2.203125 -0.609375 L 2.953125 -0.609375 L 2.953125 0 L 2.203125 0 C 1.648438 0 1.269531 -0.101562 1.0625 -0.3125 C 0.851562 -0.519531 0.75 -0.894531 0.75 -1.4375 L 0.75 -3.8125 L 0.21875 -3.8125 L 0.21875 -4.375 L 0.75 -4.375 L 0.75 -5.625 Z M 1.46875 -5.625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-7\">\n<path style=\"stroke:none;\" d=\"M 1.578125 -2.78125 L 1.578125 -0.65625 L 2.84375 -0.65625 C 3.269531 -0.65625 3.582031 -0.738281 3.78125 -0.90625 C 3.988281 -1.082031 4.09375 -1.351562 4.09375 -1.71875 C 4.09375 -2.082031 3.988281 -2.347656 3.78125 -2.515625 C 3.582031 -2.691406 3.269531 -2.78125 2.84375 -2.78125 Z M 1.578125 -5.1875 L 1.578125 -3.421875 L 2.75 -3.421875 C 3.132812 -3.421875 3.421875 -3.492188 3.609375 -3.640625 C 3.796875 -3.785156 3.890625 -4.007812 3.890625 -4.3125 C 3.890625 -4.601562 3.796875 -4.820312 3.609375 -4.96875 C 3.421875 -5.113281 3.132812 -5.1875 2.75 -5.1875 Z M 0.78125 -5.828125 L 2.796875 -5.828125 C 3.398438 -5.828125 3.863281 -5.703125 4.1875 -5.453125 C 4.519531 -5.203125 4.6875 -4.847656 4.6875 -4.390625 C 4.6875 -4.035156 4.601562 -3.75 4.4375 -3.53125 C 4.269531 -3.320312 4.023438 -3.191406 3.703125 -3.140625 C 4.085938 -3.054688 4.382812 -2.882812 4.59375 -2.625 C 4.8125 -2.363281 4.921875 -2.035156 4.921875 -1.640625 C 4.921875 -1.117188 4.742188 -0.710938 4.390625 -0.421875 C 4.035156 -0.140625 3.53125 0 2.875 0 L 0.78125 0 Z M 0.78125 -5.828125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-8\">\n<path style=\"stroke:none;\" d=\"M 2.75 -2.203125 C 2.164062 -2.203125 1.757812 -2.132812 1.53125 -2 C 1.3125 -1.863281 1.203125 -1.640625 1.203125 -1.328125 C 1.203125 -1.066406 1.285156 -0.859375 1.453125 -0.703125 C 1.617188 -0.554688 1.847656 -0.484375 2.140625 -0.484375 C 2.535156 -0.484375 2.851562 -0.625 3.09375 -0.90625 C 3.332031 -1.195312 3.453125 -1.578125 3.453125 -2.046875 L 3.453125 -2.203125 Z M 4.171875 -2.5 L 4.171875 0 L 3.453125 0 L 3.453125 -0.671875 C 3.296875 -0.398438 3.09375 -0.203125 2.84375 -0.078125 C 2.601562 0.046875 2.304688 0.109375 1.953125 0.109375 C 1.503906 0.109375 1.144531 -0.015625 0.875 -0.265625 C 0.613281 -0.515625 0.484375 -0.851562 0.484375 -1.28125 C 0.484375 -1.769531 0.644531 -2.140625 0.96875 -2.390625 C 1.300781 -2.640625 1.796875 -2.765625 2.453125 -2.765625 L 3.453125 -2.765625 L 3.453125 -2.828125 C 3.453125 -3.160156 3.34375 -3.414062 3.125 -3.59375 C 2.914062 -3.78125 2.613281 -3.875 2.21875 -3.875 C 1.96875 -3.875 1.722656 -3.84375 1.484375 -3.78125 C 1.242188 -3.71875 1.015625 -3.628906 0.796875 -3.515625 L 0.796875 -4.171875 C 1.066406 -4.273438 1.320312 -4.351562 1.5625 -4.40625 C 1.8125 -4.457031 2.054688 -4.484375 2.296875 -4.484375 C 2.921875 -4.484375 3.390625 -4.316406 3.703125 -3.984375 C 4.015625 -3.660156 4.171875 -3.164062 4.171875 -2.5 Z M 4.171875 -2.5 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-9\">\n<path style=\"stroke:none;\" d=\"M 3.640625 -2.234375 C 3.640625 -2.753906 3.53125 -3.15625 3.3125 -3.4375 C 3.09375 -3.726562 2.789062 -3.875 2.40625 -3.875 C 2.019531 -3.875 1.71875 -3.726562 1.5 -3.4375 C 1.289062 -3.15625 1.1875 -2.753906 1.1875 -2.234375 C 1.1875 -1.722656 1.289062 -1.320312 1.5 -1.03125 C 1.71875 -0.75 2.019531 -0.609375 2.40625 -0.609375 C 2.789062 -0.609375 3.09375 -0.75 3.3125 -1.03125 C 3.53125 -1.320312 3.640625 -1.722656 3.640625 -2.234375 Z M 4.359375 -0.546875 C 4.359375 0.203125 4.191406 0.757812 3.859375 1.125 C 3.523438 1.488281 3.019531 1.671875 2.34375 1.671875 C 2.082031 1.671875 1.835938 1.648438 1.609375 1.609375 C 1.390625 1.566406 1.175781 1.507812 0.96875 1.4375 L 0.96875 0.734375 C 1.175781 0.847656 1.382812 0.929688 1.59375 0.984375 C 1.800781 1.046875 2.007812 1.078125 2.21875 1.078125 C 2.695312 1.078125 3.050781 0.953125 3.28125 0.703125 C 3.519531 0.453125 3.640625 0.078125 3.640625 -0.421875 L 3.640625 -0.765625 C 3.484375 -0.515625 3.289062 -0.320312 3.0625 -0.1875 C 2.832031 -0.0625 2.554688 0 2.234375 0 C 1.691406 0 1.253906 -0.203125 0.921875 -0.609375 C 0.597656 -1.023438 0.4375 -1.566406 0.4375 -2.234375 C 0.4375 -2.910156 0.597656 -3.453125 0.921875 -3.859375 C 1.253906 -4.273438 1.691406 -4.484375 2.234375 -4.484375 C 2.554688 -4.484375 2.832031 -4.414062 3.0625 -4.28125 C 3.289062 -4.15625 3.484375 -3.96875 3.640625 -3.71875 L 3.640625 -4.375 L 4.359375 -4.375 Z M 4.359375 -0.546875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-10\">\n<path style=\"stroke:none;\" d=\"M 0.75 -6.078125 L 1.46875 -6.078125 L 1.46875 0 L 0.75 0 Z M 0.75 -6.078125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-11\">\n<path style=\"stroke:none;\" d=\"\"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-12\">\n<path style=\"stroke:none;\" d=\"M 3.546875 -2.734375 C 3.722656 -2.679688 3.890625 -2.5625 4.046875 -2.375 C 4.203125 -2.1875 4.363281 -1.925781 4.53125 -1.59375 L 5.328125 0 L 4.484375 0 L 3.734375 -1.5 C 3.546875 -1.882812 3.359375 -2.140625 3.171875 -2.265625 C 2.992188 -2.398438 2.75 -2.46875 2.4375 -2.46875 L 1.578125 -2.46875 L 1.578125 0 L 0.78125 0 L 0.78125 -5.828125 L 2.5625 -5.828125 C 3.226562 -5.828125 3.722656 -5.6875 4.046875 -5.40625 C 4.378906 -5.132812 4.546875 -4.71875 4.546875 -4.15625 C 4.546875 -3.789062 4.460938 -3.484375 4.296875 -3.234375 C 4.128906 -2.992188 3.878906 -2.828125 3.546875 -2.734375 Z M 1.578125 -5.1875 L 1.578125 -3.109375 L 2.5625 -3.109375 C 2.945312 -3.109375 3.234375 -3.195312 3.421875 -3.375 C 3.617188 -3.550781 3.71875 -3.8125 3.71875 -4.15625 C 3.71875 -4.5 3.617188 -4.753906 3.421875 -4.921875 C 3.234375 -5.097656 2.945312 -5.1875 2.5625 -5.1875 Z M 1.578125 -5.1875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-13\">\n<path style=\"stroke:none;\" d=\"M 0.234375 -4.375 L 1 -4.375 L 2.375 -0.703125 L 3.734375 -4.375 L 4.5 -4.375 L 2.859375 0 L 1.875 0 Z M 0.234375 -4.375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-14\">\n<path style=\"stroke:none;\" d=\"M 2.734375 -5.0625 L 1.671875 -2.15625 L 3.8125 -2.15625 Z M 2.296875 -5.828125 L 3.1875 -5.828125 L 5.40625 0 L 4.59375 0 L 4.0625 -1.5 L 1.421875 -1.5 L 0.890625 0 L 0.0625 0 Z M 2.296875 -5.828125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-15\">\n<path style=\"stroke:none;\" d=\"M 1.53125 -0.671875 L 4.296875 -0.671875 L 4.296875 0 L 0.59375 0 L 0.59375 -0.671875 C 0.882812 -0.972656 1.289062 -1.382812 1.8125 -1.90625 C 2.332031 -2.4375 2.65625 -2.773438 2.78125 -2.921875 C 3.039062 -3.203125 3.21875 -3.441406 3.3125 -3.640625 C 3.414062 -3.835938 3.46875 -4.03125 3.46875 -4.21875 C 3.46875 -4.53125 3.359375 -4.785156 3.140625 -4.984375 C 2.921875 -5.179688 2.640625 -5.28125 2.296875 -5.28125 C 2.046875 -5.28125 1.78125 -5.234375 1.5 -5.140625 C 1.226562 -5.054688 0.9375 -4.925781 0.625 -4.75 L 0.625 -5.546875 C 0.945312 -5.679688 1.242188 -5.78125 1.515625 -5.84375 C 1.796875 -5.90625 2.050781 -5.9375 2.28125 -5.9375 C 2.882812 -5.9375 3.363281 -5.785156 3.71875 -5.484375 C 4.082031 -5.179688 4.265625 -4.78125 4.265625 -4.28125 C 4.265625 -4.039062 4.21875 -3.8125 4.125 -3.59375 C 4.03125 -3.375 3.867188 -3.117188 3.640625 -2.828125 C 3.566406 -2.753906 3.351562 -2.535156 3 -2.171875 C 2.65625 -1.816406 2.164062 -1.316406 1.53125 -0.671875 Z M 1.53125 -0.671875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-16\">\n<path style=\"stroke:none;\" d=\"M 3.890625 -2.1875 C 3.890625 -2.71875 3.78125 -3.128906 3.5625 -3.421875 C 3.351562 -3.722656 3.054688 -3.875 2.671875 -3.875 C 2.296875 -3.875 2 -3.722656 1.78125 -3.421875 C 1.5625 -3.128906 1.453125 -2.71875 1.453125 -2.1875 C 1.453125 -1.65625 1.5625 -1.238281 1.78125 -0.9375 C 2 -0.632812 2.296875 -0.484375 2.671875 -0.484375 C 3.054688 -0.484375 3.351562 -0.632812 3.5625 -0.9375 C 3.78125 -1.238281 3.890625 -1.65625 3.890625 -2.1875 Z M 1.453125 -3.71875 C 1.597656 -3.976562 1.785156 -4.171875 2.015625 -4.296875 C 2.253906 -4.421875 2.53125 -4.484375 2.84375 -4.484375 C 3.375 -4.484375 3.804688 -4.269531 4.140625 -3.84375 C 4.472656 -3.425781 4.640625 -2.875 4.640625 -2.1875 C 4.640625 -1.5 4.472656 -0.941406 4.140625 -0.515625 C 3.804688 -0.0976562 3.375 0.109375 2.84375 0.109375 C 2.53125 0.109375 2.253906 0.046875 2.015625 -0.078125 C 1.785156 -0.203125 1.597656 -0.394531 1.453125 -0.65625 L 1.453125 0 L 0.734375 0 L 0.734375 -6.078125 L 1.453125 -6.078125 Z M 1.453125 -3.71875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-17\">\n<path style=\"stroke:none;\" d=\"M 3.296875 -3.703125 C 3.210938 -3.753906 3.125 -3.789062 3.03125 -3.8125 C 2.9375 -3.832031 2.832031 -3.84375 2.71875 -3.84375 C 2.3125 -3.84375 2 -3.707031 1.78125 -3.4375 C 1.5625 -3.175781 1.453125 -2.800781 1.453125 -2.3125 L 1.453125 0 L 0.734375 0 L 0.734375 -4.375 L 1.453125 -4.375 L 1.453125 -3.703125 C 1.597656 -3.960938 1.789062 -4.15625 2.03125 -4.28125 C 2.28125 -4.414062 2.578125 -4.484375 2.921875 -4.484375 C 2.972656 -4.484375 3.023438 -4.476562 3.078125 -4.46875 C 3.140625 -4.46875 3.207031 -4.457031 3.28125 -4.4375 Z M 3.296875 -3.703125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-18\">\n<path style=\"stroke:none;\" d=\"M 3.640625 -3.71875 L 3.640625 -6.078125 L 4.359375 -6.078125 L 4.359375 0 L 3.640625 0 L 3.640625 -0.65625 C 3.484375 -0.394531 3.289062 -0.203125 3.0625 -0.078125 C 2.832031 0.046875 2.554688 0.109375 2.234375 0.109375 C 1.703125 0.109375 1.269531 -0.0976562 0.9375 -0.515625 C 0.601562 -0.941406 0.4375 -1.5 0.4375 -2.1875 C 0.4375 -2.875 0.601562 -3.425781 0.9375 -3.84375 C 1.269531 -4.269531 1.703125 -4.484375 2.234375 -4.484375 C 2.554688 -4.484375 2.832031 -4.421875 3.0625 -4.296875 C 3.289062 -4.171875 3.484375 -3.976562 3.640625 -3.71875 Z M 1.1875 -2.1875 C 1.1875 -1.65625 1.296875 -1.238281 1.515625 -0.9375 C 1.734375 -0.632812 2.03125 -0.484375 2.40625 -0.484375 C 2.789062 -0.484375 3.09375 -0.632812 3.3125 -0.9375 C 3.53125 -1.238281 3.640625 -1.65625 3.640625 -2.1875 C 3.640625 -2.71875 3.53125 -3.128906 3.3125 -3.421875 C 3.09375 -3.722656 2.789062 -3.875 2.40625 -3.875 C 2.03125 -3.875 1.734375 -3.722656 1.515625 -3.421875 C 1.296875 -3.128906 1.1875 -2.71875 1.1875 -2.1875 Z M 1.1875 -2.1875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-19\">\n<path style=\"stroke:none;\" d=\"M 0.859375 -1 L 1.6875 -1 L 1.6875 0 L 0.859375 0 Z M 0.859375 -1 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-20\">\n<path style=\"stroke:none;\" d=\"M 2.03125 -5.828125 L 2.703125 -5.828125 L 0.671875 0.75 L 0 0.75 Z M 2.03125 -5.828125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-21\">\n<path style=\"stroke:none;\" d=\"M 1.453125 -0.65625 L 1.453125 1.671875 L 0.734375 1.671875 L 0.734375 -4.375 L 1.453125 -4.375 L 1.453125 -3.71875 C 1.597656 -3.976562 1.785156 -4.171875 2.015625 -4.296875 C 2.253906 -4.421875 2.53125 -4.484375 2.84375 -4.484375 C 3.375 -4.484375 3.804688 -4.269531 4.140625 -3.84375 C 4.472656 -3.425781 4.640625 -2.875 4.640625 -2.1875 C 4.640625 -1.5 4.472656 -0.941406 4.140625 -0.515625 C 3.804688 -0.0976562 3.375 0.109375 2.84375 0.109375 C 2.53125 0.109375 2.253906 0.046875 2.015625 -0.078125 C 1.785156 -0.203125 1.597656 -0.394531 1.453125 -0.65625 Z M 3.890625 -2.1875 C 3.890625 -2.71875 3.78125 -3.128906 3.5625 -3.421875 C 3.351562 -3.722656 3.054688 -3.875 2.671875 -3.875 C 2.296875 -3.875 2 -3.722656 1.78125 -3.421875 C 1.5625 -3.128906 1.453125 -2.71875 1.453125 -2.1875 C 1.453125 -1.65625 1.5625 -1.238281 1.78125 -0.9375 C 2 -0.632812 2.296875 -0.484375 2.671875 -0.484375 C 3.054688 -0.484375 3.351562 -0.632812 3.5625 -0.9375 C 3.78125 -1.238281 3.890625 -1.65625 3.890625 -2.1875 Z M 3.890625 -2.1875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-0\">\n<path style=\"stroke:none;\" d=\"M 0.546875 1.9375 L 0.546875 -7.75 L 6.046875 -7.75 L 6.046875 1.9375 Z M 1.171875 1.328125 L 5.4375 1.328125 L 5.4375 -7.140625 L 1.171875 -7.140625 Z M 1.171875 1.328125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-1\">\n<path style=\"stroke:none;\" d=\"M 2.171875 -7.125 L 2.171875 -4.109375 L 3.53125 -4.109375 C 4.03125 -4.109375 4.414062 -4.238281 4.6875 -4.5 C 4.96875 -4.769531 5.109375 -5.144531 5.109375 -5.625 C 5.109375 -6.101562 4.96875 -6.472656 4.6875 -6.734375 C 4.414062 -6.992188 4.03125 -7.125 3.53125 -7.125 Z M 1.078125 -8.015625 L 3.53125 -8.015625 C 4.425781 -8.015625 5.101562 -7.8125 5.5625 -7.40625 C 6.019531 -7 6.25 -6.40625 6.25 -5.625 C 6.25 -4.832031 6.019531 -4.234375 5.5625 -3.828125 C 5.101562 -3.421875 4.425781 -3.21875 3.53125 -3.21875 L 2.171875 -3.21875 L 2.171875 0 L 1.078125 0 Z M 1.078125 -8.015625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-2\">\n<path style=\"stroke:none;\" d=\"M 1.359375 -0.90625 L 3.140625 -0.90625 L 3.140625 -7.03125 L 1.203125 -6.640625 L 1.203125 -7.625 L 3.125 -8.015625 L 4.21875 -8.015625 L 4.21875 -0.90625 L 5.984375 -0.90625 L 5.984375 0 L 1.359375 0 Z M 1.359375 -0.90625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-3\">\n<path style=\"stroke:none;\" d=\"M 2.109375 -0.90625 L 5.890625 -0.90625 L 5.890625 0 L 0.8125 0 L 0.8125 -0.90625 C 1.21875 -1.332031 1.773438 -1.90625 2.484375 -2.625 C 3.203125 -3.34375 3.648438 -3.804688 3.828125 -4.015625 C 4.171875 -4.410156 4.410156 -4.742188 4.546875 -5.015625 C 4.691406 -5.285156 4.765625 -5.550781 4.765625 -5.8125 C 4.765625 -6.238281 4.613281 -6.582031 4.3125 -6.84375 C 4.019531 -7.113281 3.628906 -7.25 3.140625 -7.25 C 2.804688 -7.25 2.445312 -7.1875 2.0625 -7.0625 C 1.6875 -6.945312 1.285156 -6.769531 0.859375 -6.53125 L 0.859375 -7.625 C 1.296875 -7.800781 1.703125 -7.9375 2.078125 -8.03125 C 2.460938 -8.125 2.8125 -8.171875 3.125 -8.171875 C 3.957031 -8.171875 4.617188 -7.960938 5.109375 -7.546875 C 5.609375 -7.128906 5.859375 -6.570312 5.859375 -5.875 C 5.859375 -5.539062 5.796875 -5.226562 5.671875 -4.9375 C 5.546875 -4.644531 5.320312 -4.296875 5 -3.890625 C 4.90625 -3.785156 4.617188 -3.484375 4.140625 -2.984375 C 3.660156 -2.492188 2.984375 -1.800781 2.109375 -0.90625 Z M 2.109375 -0.90625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph3-0\">\n<path style=\"stroke:none;\" d=\"M 0.25 0.890625 L 0.25 -3.53125 L 2.75 -3.53125 L 2.75 0.890625 Z M 0.53125 0.609375 L 2.46875 0.609375 L 2.46875 -3.25 L 0.53125 -3.25 Z M 0.53125 0.609375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph3-1\">\n<path style=\"stroke:none;\" d=\"M 0.625 -0.421875 L 1.421875 -0.421875 L 1.421875 -3.203125 L 0.546875 -3.015625 L 0.546875 -3.46875 L 1.421875 -3.640625 L 1.921875 -3.640625 L 1.921875 -0.421875 L 2.71875 -0.421875 L 2.71875 0 L 0.625 0 Z M 0.625 -0.421875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph3-2\">\n<path style=\"stroke:none;\" d=\"M 0.953125 -0.421875 L 2.6875 -0.421875 L 2.6875 0 L 0.359375 0 L 0.359375 -0.421875 C 0.546875 -0.609375 0.800781 -0.863281 1.125 -1.1875 C 1.445312 -1.519531 1.648438 -1.734375 1.734375 -1.828125 C 1.898438 -2.003906 2.015625 -2.15625 2.078125 -2.28125 C 2.140625 -2.40625 2.171875 -2.523438 2.171875 -2.640625 C 2.171875 -2.835938 2.101562 -2.992188 1.96875 -3.109375 C 1.832031 -3.234375 1.65625 -3.296875 1.4375 -3.296875 C 1.28125 -3.296875 1.113281 -3.269531 0.9375 -3.21875 C 0.769531 -3.164062 0.585938 -3.082031 0.390625 -2.96875 L 0.390625 -3.46875 C 0.585938 -3.550781 0.769531 -3.613281 0.9375 -3.65625 C 1.113281 -3.695312 1.273438 -3.71875 1.421875 -3.71875 C 1.796875 -3.71875 2.09375 -3.617188 2.3125 -3.421875 C 2.539062 -3.234375 2.65625 -2.984375 2.65625 -2.671875 C 2.65625 -2.523438 2.628906 -2.382812 2.578125 -2.25 C 2.523438 -2.113281 2.421875 -1.953125 2.265625 -1.765625 C 2.222656 -1.722656 2.09375 -1.585938 1.875 -1.359375 C 1.664062 -1.128906 1.359375 -0.816406 0.953125 -0.421875 Z M 0.953125 -0.421875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph3-3\">\n<path style=\"stroke:none;\" d=\"M 2.03125 -1.96875 C 2.269531 -1.914062 2.453125 -1.804688 2.578125 -1.640625 C 2.710938 -1.484375 2.78125 -1.289062 2.78125 -1.0625 C 2.78125 -0.695312 2.65625 -0.414062 2.40625 -0.21875 C 2.15625 -0.0195312 1.804688 0.078125 1.359375 0.078125 C 1.203125 0.078125 1.039062 0.0625 0.875 0.03125 C 0.71875 0 0.550781 -0.046875 0.375 -0.109375 L 0.375 -0.59375 C 0.519531 -0.507812 0.671875 -0.445312 0.828125 -0.40625 C 0.992188 -0.363281 1.164062 -0.34375 1.34375 -0.34375 C 1.644531 -0.34375 1.878906 -0.398438 2.046875 -0.515625 C 2.210938 -0.640625 2.296875 -0.820312 2.296875 -1.0625 C 2.296875 -1.269531 2.21875 -1.4375 2.0625 -1.5625 C 1.914062 -1.6875 1.707031 -1.75 1.4375 -1.75 L 1.015625 -1.75 L 1.015625 -2.15625 L 1.453125 -2.15625 C 1.691406 -2.15625 1.875 -2.203125 2 -2.296875 C 2.132812 -2.390625 2.203125 -2.53125 2.203125 -2.71875 C 2.203125 -2.90625 2.132812 -3.046875 2 -3.140625 C 1.875 -3.242188 1.6875 -3.296875 1.4375 -3.296875 C 1.300781 -3.296875 1.15625 -3.28125 1 -3.25 C 0.84375 -3.21875 0.671875 -3.171875 0.484375 -3.109375 L 0.484375 -3.5625 C 0.671875 -3.613281 0.847656 -3.648438 1.015625 -3.671875 C 1.179688 -3.703125 1.335938 -3.71875 1.484375 -3.71875 C 1.859375 -3.71875 2.15625 -3.628906 2.375 -3.453125 C 2.59375 -3.285156 2.703125 -3.054688 2.703125 -2.765625 C 2.703125 -2.566406 2.640625 -2.394531 2.515625 -2.25 C 2.398438 -2.113281 2.238281 -2.019531 2.03125 -1.96875 Z M 2.03125 -1.96875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph3-4\">\n<path style=\"stroke:none;\" d=\"M 1.65625 -2.015625 C 1.425781 -2.015625 1.25 -1.9375 1.125 -1.78125 C 1 -1.632812 0.9375 -1.429688 0.9375 -1.171875 C 0.9375 -0.910156 1 -0.703125 1.125 -0.546875 C 1.25 -0.390625 1.425781 -0.3125 1.65625 -0.3125 C 1.875 -0.3125 2.046875 -0.390625 2.171875 -0.546875 C 2.304688 -0.703125 2.375 -0.910156 2.375 -1.171875 C 2.375 -1.429688 2.304688 -1.632812 2.171875 -1.78125 C 2.046875 -1.9375 1.875 -2.015625 1.65625 -2.015625 Z M 2.625 -3.5625 L 2.625 -3.109375 C 2.5 -3.171875 2.375 -3.21875 2.25 -3.25 C 2.125 -3.28125 2 -3.296875 1.875 -3.296875 C 1.550781 -3.296875 1.300781 -3.1875 1.125 -2.96875 C 0.957031 -2.75 0.863281 -2.414062 0.84375 -1.96875 C 0.9375 -2.113281 1.054688 -2.222656 1.203125 -2.296875 C 1.347656 -2.367188 1.507812 -2.40625 1.6875 -2.40625 C 2.050781 -2.40625 2.335938 -2.296875 2.546875 -2.078125 C 2.753906 -1.859375 2.859375 -1.554688 2.859375 -1.171875 C 2.859375 -0.796875 2.75 -0.492188 2.53125 -0.265625 C 2.3125 -0.0351562 2.019531 0.078125 1.65625 0.078125 C 1.226562 0.078125 0.898438 -0.0820312 0.671875 -0.40625 C 0.453125 -0.738281 0.34375 -1.207031 0.34375 -1.8125 C 0.34375 -2.394531 0.476562 -2.859375 0.75 -3.203125 C 1.03125 -3.546875 1.398438 -3.71875 1.859375 -3.71875 C 1.984375 -3.71875 2.109375 -3.703125 2.234375 -3.671875 C 2.359375 -3.648438 2.488281 -3.613281 2.625 -3.5625 Z M 2.625 -3.5625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph3-5\">\n<path style=\"stroke:none;\" d=\"M 0.546875 -3.640625 L 2.46875 -3.640625 L 2.46875 -3.234375 L 0.984375 -3.234375 L 0.984375 -2.34375 C 1.054688 -2.363281 1.128906 -2.378906 1.203125 -2.390625 C 1.273438 -2.398438 1.347656 -2.40625 1.421875 -2.40625 C 1.828125 -2.40625 2.148438 -2.289062 2.390625 -2.0625 C 2.628906 -1.84375 2.75 -1.546875 2.75 -1.171875 C 2.75 -0.773438 2.625 -0.46875 2.375 -0.25 C 2.132812 -0.03125 1.789062 0.078125 1.34375 0.078125 C 1.1875 0.078125 1.03125 0.0625 0.875 0.03125 C 0.71875 0.0078125 0.554688 -0.0234375 0.390625 -0.078125 L 0.390625 -0.578125 C 0.535156 -0.503906 0.6875 -0.445312 0.84375 -0.40625 C 1 -0.363281 1.160156 -0.34375 1.328125 -0.34375 C 1.617188 -0.34375 1.84375 -0.414062 2 -0.5625 C 2.164062 -0.707031 2.25 -0.910156 2.25 -1.171875 C 2.25 -1.421875 2.164062 -1.617188 2 -1.765625 C 1.84375 -1.921875 1.617188 -2 1.328125 -2 C 1.203125 -2 1.070312 -1.984375 0.9375 -1.953125 C 0.8125 -1.921875 0.679688 -1.875 0.546875 -1.8125 Z M 0.546875 -3.640625 \"/>\n</symbol>\n</g>\n</defs>\n<g id=\"surface3\">\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(10.980392%,10.196078%,11.372549%);fill-opacity:1;\" d=\"M 313.441406 0 C 351.441406 0 381.9375 30.789062 381.9375 68.605469 L 381.9375 171.636719 C 381.9375 209.695312 351.199219 240.242188 313.441406 240.242188 L 73.335938 240.242188 C 35.578125 240.484375 4.839844 209.695312 4.839844 171.878906 L 4.839844 68.605469 C 4.839844 30.789062 35.578125 0 73.335938 0 L 313.441406 0 M 42.355469 216.242188 C 42.355469 217.9375 43.808594 219.394531 45.503906 219.394531 C 47.199219 219.394531 48.648438 217.9375 48.648438 216.242188 C 48.648438 214.546875 47.199219 213.089844 45.503906 213.089844 C 43.808594 213.089844 42.355469 214.546875 42.355469 216.242188 Z M 42.355469 198.789062 C 42.355469 200.484375 43.808594 201.9375 45.503906 201.9375 C 47.199219 201.9375 48.40625 200.484375 48.40625 198.789062 C 48.40625 197.089844 46.957031 195.636719 45.261719 195.636719 C 43.566406 195.636719 42.355469 197.089844 42.355469 198.789062 Z M 59.785156 216.242188 C 59.785156 217.9375 61.234375 219.394531 62.929688 219.394531 C 64.625 219.394531 66.078125 217.9375 66.078125 216.242188 C 66.078125 214.546875 64.625 213.089844 62.929688 213.089844 C 61.234375 213.089844 59.785156 214.546875 59.785156 216.242188 Z M 59.785156 198.789062 C 59.785156 200.484375 61.234375 201.9375 62.929688 201.9375 C 64.625 201.9375 66.078125 200.484375 66.078125 198.789062 C 66.078125 197.089844 64.625 195.636719 62.929688 195.636719 C 61.234375 195.636719 59.785156 197.089844 59.785156 198.789062 Z M 77.210938 216.242188 C 77.210938 217.9375 78.664062 219.394531 80.355469 219.394531 C 82.050781 219.394531 83.503906 217.9375 83.503906 216.242188 C 83.503906 214.546875 82.050781 213.089844 80.355469 213.089844 C 78.421875 213.089844 77.210938 214.546875 77.210938 216.242188 Z M 77.210938 198.789062 C 77.210938 200.484375 78.664062 201.9375 80.355469 201.9375 C 82.050781 201.9375 83.503906 200.484375 83.503906 198.789062 C 83.503906 197.089844 82.050781 195.636719 80.355469 195.636719 C 78.421875 195.636719 77.210938 197.089844 77.210938 198.789062 Z M 94.636719 216.242188 C 94.636719 217.9375 96.089844 219.394531 97.785156 219.394531 C 99.476562 219.394531 100.929688 217.9375 100.929688 216.242188 C 100.929688 214.546875 99.476562 213.089844 97.785156 213.089844 C 95.847656 213.089844 94.636719 214.546875 94.636719 216.242188 Z M 94.636719 198.789062 C 94.636719 200.484375 96.089844 201.9375 97.785156 201.9375 C 99.476562 201.9375 100.929688 200.484375 100.929688 198.789062 C 100.929688 197.089844 99.476562 195.636719 97.785156 195.636719 C 95.847656 195.636719 94.636719 197.089844 94.636719 198.789062 Z M 112.0625 216.242188 C 112.0625 217.9375 113.515625 219.394531 115.210938 219.394531 C 116.90625 219.394531 118.355469 217.9375 118.355469 216.242188 C 118.355469 214.546875 116.90625 213.089844 115.210938 213.089844 C 113.273438 213.089844 112.0625 214.546875 112.0625 216.242188 Z M 112.0625 198.789062 C 112.0625 200.484375 113.515625 201.9375 115.210938 201.9375 C 116.90625 201.9375 118.355469 200.484375 118.355469 198.789062 C 118.355469 197.089844 116.90625 195.636719 115.210938 195.636719 C 113.273438 195.636719 112.0625 197.089844 112.0625 198.789062 Z M 129.492188 216.242188 C 129.492188 217.9375 130.941406 219.394531 132.636719 219.394531 C 134.332031 219.394531 135.785156 217.9375 135.785156 216.242188 C 135.785156 214.546875 134.332031 213.089844 132.636719 213.089844 C 130.699219 213.089844 129.492188 214.546875 129.492188 216.242188 Z M 129.492188 198.789062 C 129.492188 200.484375 130.941406 201.9375 132.636719 201.9375 C 134.332031 201.9375 135.785156 200.484375 135.785156 198.789062 C 135.785156 197.089844 134.332031 195.636719 132.636719 195.636719 C 130.699219 195.636719 129.492188 197.089844 129.492188 198.789062 Z M 146.917969 216.242188 C 146.917969 217.9375 148.371094 219.394531 150.0625 219.394531 C 151.757812 219.394531 153.210938 217.9375 153.210938 216.242188 C 153.210938 214.546875 151.757812 213.089844 150.0625 213.089844 C 148.128906 213.089844 146.917969 214.546875 146.917969 216.242188 Z M 146.917969 198.789062 C 146.917969 200.484375 148.371094 201.9375 150.0625 201.9375 C 151.757812 201.9375 153.210938 200.484375 153.210938 198.789062 C 153.210938 197.089844 151.757812 195.636719 150.0625 195.636719 C 148.128906 195.636719 146.917969 197.089844 146.917969 198.789062 Z M 164.34375 216.242188 C 164.34375 217.9375 165.796875 219.394531 167.492188 219.394531 C 169.183594 219.394531 170.636719 217.9375 170.636719 216.242188 C 170.636719 214.546875 169.183594 213.089844 167.492188 213.089844 C 165.554688 213.089844 164.34375 214.546875 164.34375 216.242188 Z M 164.34375 198.789062 C 164.34375 200.484375 165.796875 201.9375 167.492188 201.9375 C 169.183594 201.9375 170.636719 200.484375 170.636719 198.789062 C 170.636719 197.089844 169.183594 195.636719 167.492188 195.636719 C 165.554688 195.636719 164.34375 197.089844 164.34375 198.789062 Z M 181.769531 216.242188 C 181.769531 217.9375 183.222656 219.394531 184.917969 219.394531 C 186.613281 219.394531 188.0625 217.9375 188.0625 216.242188 C 188.0625 214.546875 186.613281 213.089844 184.917969 213.089844 C 182.980469 213.089844 181.769531 214.546875 181.769531 216.242188 Z M 181.769531 198.789062 C 181.769531 200.484375 183.222656 201.9375 184.917969 201.9375 C 186.613281 201.9375 188.0625 200.484375 188.0625 198.789062 C 188.0625 197.089844 186.613281 195.636719 184.917969 195.636719 C 182.980469 195.636719 181.769531 197.089844 181.769531 198.789062 Z M 199.199219 216.242188 C 199.199219 217.9375 200.648438 219.394531 202.34375 219.394531 C 204.039062 219.394531 205.492188 217.9375 205.492188 216.242188 C 205.492188 214.546875 204.039062 213.089844 202.34375 213.089844 C 200.40625 213.089844 199.199219 214.546875 199.199219 216.242188 Z M 199.199219 198.789062 C 199.199219 200.484375 200.648438 201.9375 202.34375 201.9375 C 204.039062 201.9375 205.492188 200.484375 205.492188 198.789062 C 205.492188 197.089844 204.039062 195.636719 202.34375 195.636719 C 200.40625 195.636719 199.199219 197.089844 199.199219 198.789062 Z M 216.625 216.242188 C 216.625 217.9375 218.078125 219.394531 219.769531 219.394531 C 221.464844 219.394531 222.917969 217.9375 222.917969 216.242188 C 222.917969 214.546875 221.464844 213.089844 219.769531 213.089844 C 217.835938 213.089844 216.625 214.546875 216.625 216.242188 Z M 216.625 198.789062 C 216.625 200.484375 218.078125 201.9375 219.769531 201.9375 C 221.464844 201.9375 222.917969 200.484375 222.917969 198.789062 C 222.917969 197.089844 221.464844 195.636719 219.769531 195.636719 C 217.835938 195.636719 216.625 197.089844 216.625 198.789062 Z M 234.050781 216.242188 C 234.050781 217.9375 235.503906 219.394531 237.199219 219.394531 C 238.890625 219.394531 240.34375 217.9375 240.34375 216.242188 C 240.34375 214.546875 238.890625 213.089844 237.199219 213.089844 C 235.261719 213.089844 234.050781 214.546875 234.050781 216.242188 Z M 234.050781 198.789062 C 234.050781 200.484375 235.503906 201.9375 237.199219 201.9375 C 238.890625 201.9375 240.34375 200.484375 240.34375 198.789062 C 240.34375 197.089844 238.890625 195.636719 237.199219 195.636719 C 235.261719 195.636719 234.050781 197.089844 234.050781 198.789062 Z M 251.476562 216.242188 C 251.476562 217.9375 252.929688 219.394531 254.625 219.394531 C 256.320312 219.394531 257.769531 217.9375 257.769531 216.242188 C 257.769531 214.546875 256.320312 213.089844 254.625 213.089844 C 252.6875 213.089844 251.476562 214.546875 251.476562 216.242188 Z M 251.476562 198.789062 C 251.476562 200.484375 252.929688 201.9375 254.625 201.9375 C 256.320312 201.9375 257.769531 200.484375 257.769531 198.789062 C 257.769531 197.089844 256.320312 195.636719 254.625 195.636719 C 252.6875 195.636719 251.476562 197.089844 251.476562 198.789062 Z M 268.90625 216.242188 C 268.90625 217.9375 270.355469 219.394531 272.050781 219.394531 C 273.746094 219.394531 275.199219 217.9375 275.199219 216.242188 C 275.199219 214.546875 273.746094 213.089844 272.050781 213.089844 C 270.113281 213.089844 268.90625 214.546875 268.90625 216.242188 Z M 268.90625 198.789062 C 268.90625 200.484375 270.355469 201.9375 272.050781 201.9375 C 273.746094 201.9375 275.199219 200.484375 275.199219 198.789062 C 275.199219 197.089844 273.746094 195.636719 272.050781 195.636719 C 270.113281 195.636719 268.90625 197.089844 268.90625 198.789062 Z M 286.332031 216.242188 C 286.332031 217.9375 287.785156 219.394531 289.476562 219.394531 C 291.171875 219.394531 292.625 217.9375 292.625 216.242188 C 292.625 214.546875 291.171875 213.089844 289.476562 213.089844 C 287.542969 213.089844 286.332031 214.546875 286.332031 216.242188 Z M 286.332031 198.789062 C 286.332031 200.484375 287.785156 201.9375 289.476562 201.9375 C 291.171875 201.9375 292.625 200.484375 292.625 198.789062 C 292.625 197.089844 291.171875 195.636719 289.476562 195.636719 C 287.542969 195.636719 286.332031 197.089844 286.332031 198.789062 Z M 303.757812 216.242188 C 303.757812 217.9375 305.210938 219.394531 306.90625 219.394531 C 308.597656 219.394531 310.050781 217.9375 310.050781 216.242188 C 310.050781 214.546875 308.597656 213.089844 306.90625 213.089844 C 304.96875 213.089844 303.757812 214.546875 303.757812 216.242188 Z M 303.757812 198.789062 C 303.757812 200.484375 305.210938 201.9375 306.90625 201.9375 C 308.597656 201.9375 310.050781 200.484375 310.050781 198.789062 C 310.050781 197.089844 308.597656 195.636719 306.90625 195.636719 C 304.96875 195.636719 303.757812 197.089844 303.757812 198.789062 Z M 321.183594 216.242188 C 321.183594 217.9375 322.636719 219.394531 324.332031 219.394531 C 326.027344 219.394531 327.476562 217.9375 327.476562 216.242188 C 327.476562 214.546875 326.027344 213.089844 324.332031 213.089844 C 322.394531 213.089844 321.183594 214.546875 321.183594 216.242188 Z M 321.183594 198.789062 C 321.183594 200.484375 322.636719 201.9375 324.332031 201.9375 C 326.027344 201.9375 327.476562 200.484375 327.476562 198.789062 C 327.476562 197.089844 326.027344 195.636719 324.332031 195.636719 C 322.394531 195.636719 321.183594 197.089844 321.183594 198.789062 Z M 338.613281 216.242188 C 338.613281 217.9375 340.0625 219.394531 341.757812 219.394531 C 343.453125 219.394531 344.90625 217.9375 344.90625 216.242188 C 344.90625 214.546875 343.453125 213.089844 341.757812 213.089844 C 339.820312 213.089844 338.613281 214.546875 338.613281 216.242188 Z M 338.613281 198.789062 C 338.613281 200.484375 340.0625 201.9375 341.757812 201.9375 C 343.453125 201.9375 344.90625 200.484375 344.90625 198.789062 C 344.90625 197.089844 343.453125 195.636719 341.757812 195.636719 C 339.820312 195.636719 338.613281 197.089844 338.613281 198.789062 Z M 42.355469 41.695312 C 42.355469 43.394531 43.808594 44.847656 45.503906 44.847656 C 47.199219 44.847656 48.648438 43.394531 48.648438 41.695312 C 48.648438 40 47.199219 38.546875 45.503906 38.546875 C 43.808594 38.546875 42.355469 40 42.355469 41.695312 Z M 42.355469 24.242188 C 42.355469 25.9375 43.808594 27.394531 45.503906 27.394531 C 47.199219 27.394531 48.40625 25.9375 48.40625 24.242188 C 48.40625 22.546875 46.957031 21.089844 45.261719 21.089844 C 43.566406 21.089844 42.355469 22.546875 42.355469 24.242188 Z M 59.785156 41.695312 C 59.785156 43.394531 61.234375 44.847656 62.929688 44.847656 C 64.625 44.847656 66.078125 43.394531 66.078125 41.695312 C 66.078125 40 64.625 38.546875 62.929688 38.546875 C 61.234375 38.546875 59.785156 40 59.785156 41.695312 Z M 59.785156 24.242188 C 59.785156 25.9375 61.234375 27.394531 62.929688 27.394531 C 64.625 27.394531 66.078125 25.9375 66.078125 24.242188 C 66.078125 22.546875 64.625 21.089844 62.929688 21.089844 C 61.234375 21.089844 59.785156 22.546875 59.785156 24.242188 Z M 77.210938 41.695312 C 77.210938 43.394531 78.664062 44.847656 80.355469 44.847656 C 82.050781 44.847656 83.503906 43.394531 83.503906 41.695312 C 83.503906 40 82.050781 38.546875 80.355469 38.546875 C 78.421875 38.546875 77.210938 40 77.210938 41.695312 Z M 77.210938 24.242188 C 77.210938 25.9375 78.664062 27.394531 80.355469 27.394531 C 82.050781 27.394531 83.503906 25.9375 83.503906 24.242188 C 83.503906 22.546875 82.050781 21.089844 80.355469 21.089844 C 78.421875 21.089844 77.210938 22.546875 77.210938 24.242188 Z M 94.636719 41.695312 C 94.636719 43.394531 96.089844 44.847656 97.785156 44.847656 C 99.476562 44.847656 100.929688 43.394531 100.929688 41.695312 C 100.929688 40 99.476562 38.546875 97.785156 38.546875 C 95.847656 38.546875 94.636719 40 94.636719 41.695312 Z M 94.636719 24.242188 C 94.636719 25.9375 96.089844 27.394531 97.785156 27.394531 C 99.476562 27.394531 100.929688 25.9375 100.929688 24.242188 C 100.929688 22.546875 99.234375 21.089844 97.542969 21.089844 C 95.847656 21.089844 94.636719 22.546875 94.636719 24.242188 Z M 112.0625 41.695312 C 112.0625 43.394531 113.515625 44.847656 115.210938 44.847656 C 116.90625 44.847656 118.355469 43.394531 118.355469 41.695312 C 118.355469 40 116.90625 38.546875 115.210938 38.546875 C 113.273438 38.546875 112.0625 40 112.0625 41.695312 Z M 112.0625 24.242188 C 112.0625 25.9375 113.515625 27.394531 115.210938 27.394531 C 116.90625 27.394531 118.355469 25.9375 118.355469 24.242188 C 118.355469 22.546875 116.90625 21.089844 115.210938 21.089844 C 113.273438 21.089844 112.0625 22.546875 112.0625 24.242188 Z M 129.492188 41.695312 C 129.492188 43.394531 130.941406 44.847656 132.636719 44.847656 C 134.332031 44.847656 135.785156 43.394531 135.785156 41.695312 C 135.785156 40 134.332031 38.546875 132.636719 38.546875 C 130.699219 38.546875 129.492188 40 129.492188 41.695312 Z M 129.492188 24.242188 C 129.492188 25.9375 130.941406 27.394531 132.636719 27.394531 C 134.332031 27.394531 135.785156 25.9375 135.785156 24.242188 C 135.785156 22.546875 134.332031 21.089844 132.636719 21.089844 C 130.699219 21.089844 129.492188 22.546875 129.492188 24.242188 Z M 146.917969 41.695312 C 146.917969 43.394531 148.371094 44.847656 150.0625 44.847656 C 151.757812 44.847656 153.210938 43.394531 153.210938 41.695312 C 153.210938 40 151.757812 38.546875 150.0625 38.546875 C 148.128906 38.546875 146.917969 40 146.917969 41.695312 Z M 146.917969 24.242188 C 146.917969 25.9375 148.371094 27.394531 150.0625 27.394531 C 151.757812 27.394531 153.210938 25.9375 153.210938 24.242188 C 153.210938 22.546875 151.757812 21.089844 150.0625 21.089844 C 148.128906 21.089844 146.917969 22.546875 146.917969 24.242188 Z M 164.34375 41.695312 C 164.34375 43.394531 165.796875 44.847656 167.492188 44.847656 C 169.183594 44.847656 170.636719 43.394531 170.636719 41.695312 C 170.636719 40 169.183594 38.546875 167.492188 38.546875 C 165.796875 38.546875 164.34375 40 164.34375 41.695312 Z M 164.34375 24.242188 C 164.34375 25.9375 165.796875 27.394531 167.492188 27.394531 C 169.183594 27.394531 170.636719 25.9375 170.636719 24.242188 C 170.636719 22.546875 169.183594 21.089844 167.492188 21.089844 C 165.796875 21.089844 164.34375 22.546875 164.34375 24.242188 Z M 181.769531 41.695312 C 181.769531 43.394531 183.222656 44.847656 184.917969 44.847656 C 186.613281 44.847656 188.0625 43.394531 188.0625 41.695312 C 188.0625 40 186.613281 38.546875 184.917969 38.546875 C 183.222656 38.546875 181.769531 40 181.769531 41.695312 Z M 181.769531 24.242188 C 181.769531 25.9375 183.222656 27.394531 184.917969 27.394531 C 186.613281 27.394531 188.0625 25.9375 188.0625 24.242188 C 188.0625 22.546875 186.613281 21.089844 184.917969 21.089844 C 183.222656 21.089844 181.769531 22.546875 181.769531 24.242188 Z M 199.199219 41.695312 C 199.199219 43.394531 200.648438 44.847656 202.34375 44.847656 C 204.039062 44.847656 205.492188 43.394531 205.492188 41.695312 C 205.492188 40 204.039062 38.546875 202.34375 38.546875 C 200.648438 38.546875 199.199219 40 199.199219 41.695312 Z M 199.199219 24.242188 C 199.199219 25.9375 200.648438 27.394531 202.34375 27.394531 C 204.039062 27.394531 205.492188 25.9375 205.492188 24.242188 C 205.492188 22.546875 204.039062 21.089844 202.34375 21.089844 C 200.648438 21.089844 199.199219 22.546875 199.199219 24.242188 Z M 216.625 41.695312 C 216.625 43.394531 218.078125 44.847656 219.769531 44.847656 C 221.464844 44.847656 222.917969 43.394531 222.917969 41.695312 C 222.917969 40 221.464844 38.546875 219.769531 38.546875 C 218.078125 38.546875 216.625 40 216.625 41.695312 Z M 216.625 24.242188 C 216.625 25.9375 218.078125 27.394531 219.769531 27.394531 C 221.464844 27.394531 222.675781 25.9375 222.675781 24.242188 C 222.675781 22.546875 221.222656 21.089844 219.527344 21.089844 C 217.835938 21.089844 216.625 22.546875 216.625 24.242188 Z M 234.050781 41.695312 C 234.050781 43.394531 235.503906 44.847656 237.199219 44.847656 C 238.890625 44.847656 240.34375 43.394531 240.34375 41.695312 C 240.34375 40 238.890625 38.546875 237.199219 38.546875 C 235.503906 38.546875 234.050781 40 234.050781 41.695312 Z M 234.050781 24.242188 C 234.050781 25.9375 235.503906 27.394531 237.199219 27.394531 C 238.890625 27.394531 240.34375 25.9375 240.34375 24.242188 C 240.34375 22.546875 238.890625 21.089844 237.199219 21.089844 C 235.503906 21.089844 234.050781 22.546875 234.050781 24.242188 Z M 251.476562 41.695312 C 251.476562 43.394531 252.929688 44.847656 254.625 44.847656 C 256.320312 44.847656 257.769531 43.394531 257.769531 41.695312 C 257.769531 40 256.320312 38.546875 254.625 38.546875 C 252.929688 38.546875 251.476562 40 251.476562 41.695312 Z M 251.476562 24.242188 C 251.476562 25.9375 252.929688 27.394531 254.625 27.394531 C 256.320312 27.394531 257.769531 25.9375 257.769531 24.242188 C 257.769531 22.546875 256.320312 21.089844 254.625 21.089844 C 252.929688 21.089844 251.476562 22.546875 251.476562 24.242188 Z M 268.90625 41.695312 C 268.90625 43.394531 270.355469 44.847656 272.050781 44.847656 C 273.746094 44.847656 275.199219 43.394531 275.199219 41.695312 C 275.199219 40 273.746094 38.546875 272.050781 38.546875 C 270.355469 38.546875 268.90625 40 268.90625 41.695312 Z M 268.90625 24.242188 C 268.90625 25.9375 270.355469 27.394531 272.050781 27.394531 C 273.746094 27.394531 275.199219 25.9375 275.199219 24.242188 C 275.199219 22.546875 273.746094 21.089844 272.050781 21.089844 C 270.355469 21.089844 268.90625 22.546875 268.90625 24.242188 Z M 286.332031 41.695312 C 286.332031 43.394531 287.785156 44.847656 289.476562 44.847656 C 291.171875 44.847656 292.625 43.394531 292.625 41.695312 C 292.625 40 291.171875 38.546875 289.476562 38.546875 C 287.785156 38.546875 286.332031 40 286.332031 41.695312 Z M 286.332031 24.242188 C 286.332031 25.9375 287.785156 27.394531 289.476562 27.394531 C 291.171875 27.394531 292.625 25.9375 292.625 24.242188 C 292.625 22.546875 291.171875 21.089844 289.476562 21.089844 C 287.785156 21.089844 286.332031 22.546875 286.332031 24.242188 Z M 303.757812 41.695312 C 303.757812 43.394531 305.210938 44.847656 306.90625 44.847656 C 308.597656 44.847656 310.050781 43.394531 310.050781 41.695312 C 310.050781 40 308.597656 38.546875 306.90625 38.546875 C 305.210938 38.546875 303.757812 40 303.757812 41.695312 Z M 303.757812 24.242188 C 303.757812 25.9375 305.210938 27.394531 306.90625 27.394531 C 308.597656 27.394531 310.050781 25.9375 310.050781 24.242188 C 310.050781 22.546875 308.597656 21.089844 306.90625 21.089844 C 305.210938 21.089844 303.757812 22.546875 303.757812 24.242188 Z M 321.183594 41.695312 C 321.183594 43.394531 322.636719 44.847656 324.332031 44.847656 C 326.027344 44.847656 327.476562 43.394531 327.476562 41.695312 C 327.476562 40 326.027344 38.546875 324.332031 38.546875 C 322.394531 38.546875 321.183594 40 321.183594 41.695312 Z M 321.183594 24.242188 C 321.183594 25.9375 322.636719 27.394531 324.332031 27.394531 C 326.027344 27.394531 327.476562 25.9375 327.476562 24.242188 C 327.476562 22.546875 326.027344 21.089844 324.332031 21.089844 C 322.394531 21.089844 321.183594 22.546875 321.183594 24.242188 Z M 338.613281 41.695312 C 338.613281 43.394531 340.0625 44.847656 341.757812 44.847656 C 343.453125 44.847656 344.90625 43.394531 344.90625 41.695312 C 344.90625 40 343.453125 38.546875 341.757812 38.546875 C 339.820312 38.546875 338.613281 40 338.613281 41.695312 Z M 338.613281 24.242188 C 338.613281 25.9375 340.0625 27.394531 341.757812 27.394531 C 343.453125 27.394531 344.90625 25.9375 344.90625 24.242188 C 344.90625 22.546875 343.453125 21.089844 341.757812 21.089844 C 339.820312 21.089844 338.613281 22.546875 338.613281 24.242188 Z M 338.613281 24.242188 \"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 51.199301 79.299902 L 51.199301 92.499902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 51.199301 19.500293 L 51.199301 6.300293 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 87.200524 79.299902 L 87.200524 92.499902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 123.200134 79.299902 L 123.200134 92.499902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 87.200524 19.500293 L 87.200524 6.300293 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 123.200134 19.500293 L 123.200134 6.300293 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 14.899507 75.100781 L 17.09925 75.100781 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 21.400288 75.100781 L 23.600031 75.100781 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 8.500401 75.100781 L 10.600082 75.100781 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 27.899455 75.100781 L 30.099198 75.100781 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.72;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 16.400432 22.500586 L 16.400432 20.399414 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:1.4173;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 95.40074 79.799414 C 95.40074 80.076562 95.176408 80.300537 94.900432 80.300537 C 94.624455 80.300537 94.400123 80.076562 94.400123 79.799414 C 94.400123 79.523877 94.624455 79.299902 94.900432 79.299902 C 95.176408 79.299902 95.40074 79.523877 95.40074 79.799414 Z M 95.40074 79.799414 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph0-1\" x=\"234.835938\" y=\"190.630445\"/>\n  <use xlink:href=\"#glyph0-2\" x=\"239.558519\" y=\"190.630445\"/>\n  <use xlink:href=\"#glyph0-3\" x=\"243.366366\" y=\"190.630445\"/>\n  <use xlink:href=\"#glyph0-4\" x=\"247.987311\" y=\"190.630445\"/>\n  <use xlink:href=\"#glyph0-4\" x=\"251.804613\" y=\"190.630445\"/>\n  <use xlink:href=\"#glyph0-5\" x=\"255.621915\" y=\"190.630445\"/>\n  <use xlink:href=\"#glyph0-6\" x=\"259.439217\" y=\"190.630445\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-1\" x=\"124.113281\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-2\" x=\"128.651498\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-3\" x=\"133.546626\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-4\" x=\"137.945387\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"142.292148\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-6\" x=\"147.213276\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-7\" x=\"150.349846\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"155.838251\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-8\" x=\"160.75938\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-9\" x=\"165.661599\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-10\" x=\"170.738729\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"172.960564\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-11\" x=\"177.881693\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-12\" x=\"180.424985\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"185.625025\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-13\" x=\"190.546153\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-11\" x=\"195.280553\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-14\" x=\"197.823846\" y=\"12.036103\"/>\n  <use xlink:href=\"#glyph1-15\" x=\"203.295706\" y=\"12.036103\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-16\" x=\"113.148438\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"118.225567\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-8\" x=\"123.146696\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-9\" x=\"128.048915\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-10\" x=\"133.126045\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"135.34788\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-16\" x=\"140.269009\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-2\" x=\"145.346139\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-8\" x=\"150.241267\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-17\" x=\"155.143486\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-18\" x=\"158.294238\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-19\" x=\"163.371367\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-2\" x=\"165.91466\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-17\" x=\"170.809788\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-9\" x=\"173.960539\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-20\" x=\"179.037669\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-21\" x=\"181.732235\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-2\" x=\"186.809365\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-3\" x=\"191.704493\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-4\" x=\"196.103254\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"200.450015\" y=\"234.754853\"/>\n  <use xlink:href=\"#glyph1-6\" x=\"205.371144\" y=\"234.754853\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph2-1\" x=\"62.917969\" y=\"239.188329\"/>\n  <use xlink:href=\"#glyph2-2\" x=\"69.550383\" y=\"239.188329\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph2-1\" x=\"63.789062\" y=\"14.477391\"/>\n  <use xlink:href=\"#glyph2-3\" x=\"70.421477\" y=\"14.477391\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-1\" x=\"44.289062\" y=\"230.412169\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-2\" x=\"43.417969\" y=\"17.466856\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-3\" x=\"350.722656\" y=\"27.318419\"/>\n  <use xlink:href=\"#glyph3-4\" x=\"353.904135\" y=\"27.318419\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-3\" x=\"350.722656\" y=\"219.318419\"/>\n  <use xlink:href=\"#glyph3-5\" x=\"353.904135\" y=\"219.318419\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-3\" x=\"350.722656\" y=\"44.771544\"/>\n  <use xlink:href=\"#glyph3-5\" x=\"353.904135\" y=\"44.771544\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-3\" x=\"350.722656\" y=\"201.865294\"/>\n  <use xlink:href=\"#glyph3-4\" x=\"353.904135\" y=\"201.865294\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-2\" x=\"43.417969\" y=\"190.771544\"/>\n</g>\n<g style=\"fill:rgb(100%,100%,100%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph3-1\" x=\"43.417969\" y=\"55.8692\"/>\n</g>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 20.399671 89.199902 C 20.399671 90.139307 19.639525 90.899854 18.700236 90.899854 C 17.760948 90.899854 17.000802 90.139307 17.000802 89.199902 C 17.000802 88.260498 17.760948 87.499951 18.700236 87.499951 C 19.639525 87.499951 20.399671 88.260498 20.399671 89.199902 Z M 20.399671 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 17.000802 87.499951 L 20.399671 87.499951 L 20.399671 90.899854 L 17.000802 90.899854 Z M 17.000802 87.499951 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 20.399671 82.000488 C 20.399671 82.938281 19.639525 83.700439 18.700236 83.700439 C 17.760948 83.700439 17.000802 82.938281 17.000802 82.000488 C 17.000802 81.061084 17.760948 80.300537 18.700236 80.300537 C 19.639525 80.300537 20.399671 81.061084 20.399671 82.000488 Z M 20.399671 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 27.59927 89.199902 C 27.59927 90.139307 26.839124 90.899854 25.899836 90.899854 C 24.960547 90.899854 24.200401 90.139307 24.200401 89.199902 C 24.200401 88.260498 24.960547 87.499951 25.899836 87.499951 C 26.839124 87.499951 27.59927 88.260498 27.59927 89.199902 Z M 27.59927 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 27.59927 82.000488 C 27.59927 82.938281 26.839124 83.700439 25.899836 83.700439 C 24.960547 83.700439 24.200401 82.938281 24.200401 82.000488 C 24.200401 81.061084 24.960547 80.300537 25.899836 80.300537 C 26.839124 80.300537 27.59927 81.061084 27.59927 82.000488 Z M 27.59927 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 34.800483 89.199902 C 34.800483 90.139307 34.038723 90.899854 33.099435 90.899854 C 32.16176 90.899854 31.4 90.139307 31.4 89.199902 C 31.4 88.260498 32.16176 87.499951 33.099435 87.499951 C 34.038723 87.499951 34.800483 88.260498 34.800483 89.199902 Z M 34.800483 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 34.800483 82.000488 C 34.800483 82.938281 34.038723 83.700439 33.099435 83.700439 C 32.16176 83.700439 31.4 82.938281 31.4 82.000488 C 31.4 81.061084 32.16176 80.300537 33.099435 80.300537 C 34.038723 80.300537 34.800483 81.061084 34.800483 82.000488 Z M 34.800483 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 42.000082 89.199902 C 42.000082 90.139307 41.238322 90.899854 40.300648 90.899854 C 39.361359 90.899854 38.599599 90.139307 38.599599 89.199902 C 38.599599 88.260498 39.361359 87.499951 40.300648 87.499951 C 41.238322 87.499951 42.000082 88.260498 42.000082 89.199902 Z M 42.000082 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 42.000082 82.000488 C 42.000082 82.938281 41.238322 83.700439 40.300648 83.700439 C 39.361359 83.700439 38.599599 82.938281 38.599599 82.000488 C 38.599599 81.061084 39.361359 80.300537 40.300648 80.300537 C 41.238322 80.300537 42.000082 81.061084 42.000082 82.000488 Z M 42.000082 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 49.199681 89.199902 C 49.199681 90.139307 48.439535 90.899854 47.500247 90.899854 C 46.560958 90.899854 45.799198 90.139307 45.799198 89.199902 C 45.799198 88.260498 46.560958 87.499951 47.500247 87.499951 C 48.439535 87.499951 49.199681 88.260498 49.199681 89.199902 Z M 49.199681 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 49.199681 82.000488 C 49.199681 82.938281 48.439535 83.700439 47.500247 83.700439 C 46.560958 83.700439 45.799198 82.938281 45.799198 82.000488 C 45.799198 81.061084 46.560958 80.300537 47.500247 80.300537 C 48.439535 80.300537 49.199681 81.061084 49.199681 82.000488 Z M 49.199681 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 56.39928 89.199902 C 56.39928 90.139307 55.639134 90.899854 54.699846 90.899854 C 53.760557 90.899854 53.000411 90.139307 53.000411 89.199902 C 53.000411 88.260498 53.760557 87.499951 54.699846 87.499951 C 55.639134 87.499951 56.39928 88.260498 56.39928 89.199902 Z M 56.39928 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 56.39928 82.000488 C 56.39928 82.938281 55.639134 83.700439 54.699846 83.700439 C 53.760557 83.700439 53.000411 82.938281 53.000411 82.000488 C 53.000411 81.061084 53.760557 80.300537 54.699846 80.300537 C 55.639134 80.300537 56.39928 81.061084 56.39928 82.000488 Z M 56.39928 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 63.600493 89.199902 C 63.600493 90.139307 62.838734 90.899854 61.899445 90.899854 C 60.96177 90.899854 60.20001 90.139307 60.20001 89.199902 C 60.20001 88.260498 60.96177 87.499951 61.899445 87.499951 C 62.838734 87.499951 63.600493 88.260498 63.600493 89.199902 Z M 63.600493 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 63.600493 82.000488 C 63.600493 82.938281 62.838734 83.700439 61.899445 83.700439 C 60.96177 83.700439 60.20001 82.938281 60.20001 82.000488 C 60.20001 81.061084 60.96177 80.300537 61.899445 80.300537 C 62.838734 80.300537 63.600493 81.061084 63.600493 82.000488 Z M 63.600493 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 70.800093 89.199902 C 70.800093 90.139307 70.038333 90.899854 69.100658 90.899854 C 68.161369 90.899854 67.399609 90.139307 67.399609 89.199902 C 67.399609 88.260498 68.161369 87.499951 69.100658 87.499951 C 70.038333 87.499951 70.800093 88.260498 70.800093 89.199902 Z M 70.800093 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 70.800093 82.000488 C 70.800093 82.938281 70.038333 83.700439 69.100658 83.700439 C 68.161369 83.700439 67.399609 82.938281 67.399609 82.000488 C 67.399609 81.061084 68.161369 80.300537 69.100658 80.300537 C 70.038333 80.300537 70.800093 81.061084 70.800093 82.000488 Z M 70.800093 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 77.999692 89.199902 C 77.999692 90.139307 77.239546 90.899854 76.300257 90.899854 C 75.360968 90.899854 74.599208 90.139307 74.599208 89.199902 C 74.599208 88.260498 75.360968 87.499951 76.300257 87.499951 C 77.239546 87.499951 77.999692 88.260498 77.999692 89.199902 Z M 77.999692 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 77.999692 82.000488 C 77.999692 82.938281 77.239546 83.700439 76.300257 83.700439 C 75.360968 83.700439 74.599208 82.938281 74.599208 82.000488 C 74.599208 81.061084 75.360968 80.300537 76.300257 80.300537 C 77.239546 80.300537 77.999692 81.061084 77.999692 82.000488 Z M 77.999692 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 85.199291 89.199902 C 85.199291 90.139307 84.439145 90.899854 83.499856 90.899854 C 82.560567 90.899854 81.800421 90.139307 81.800421 89.199902 C 81.800421 88.260498 82.560567 87.499951 83.499856 87.499951 C 84.439145 87.499951 85.199291 88.260498 85.199291 89.199902 Z M 85.199291 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 85.199291 82.000488 C 85.199291 82.938281 84.439145 83.700439 83.499856 83.700439 C 82.560567 83.700439 81.800421 82.938281 81.800421 82.000488 C 81.800421 81.061084 82.560567 80.300537 83.499856 80.300537 C 84.439145 80.300537 85.199291 81.061084 85.199291 82.000488 Z M 85.199291 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 92.400504 89.199902 C 92.400504 90.139307 91.638744 90.899854 90.699455 90.899854 C 89.76178 90.899854 89.000021 90.139307 89.000021 89.199902 C 89.000021 88.260498 89.76178 87.499951 90.699455 87.499951 C 91.638744 87.499951 92.400504 88.260498 92.400504 89.199902 Z M 92.400504 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 92.400504 82.000488 C 92.400504 82.938281 91.638744 83.700439 90.699455 83.700439 C 89.76178 83.700439 89.000021 82.938281 89.000021 82.000488 C 89.000021 81.061084 89.76178 80.300537 90.699455 80.300537 C 91.638744 80.300537 92.400504 81.061084 92.400504 82.000488 Z M 92.400504 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 99.600103 89.199902 C 99.600103 90.139307 98.838343 90.899854 97.900668 90.899854 C 96.96138 90.899854 96.19962 90.139307 96.19962 89.199902 C 96.19962 88.260498 96.96138 87.499951 97.900668 87.499951 C 98.838343 87.499951 99.600103 88.260498 99.600103 89.199902 Z M 99.600103 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 99.600103 82.000488 C 99.600103 82.938281 98.838343 83.700439 97.900668 83.700439 C 96.96138 83.700439 96.19962 82.938281 96.19962 82.000488 C 96.19962 81.061084 96.96138 80.300537 97.900668 80.300537 C 98.838343 80.300537 99.600103 81.061084 99.600103 82.000488 Z M 99.600103 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 106.799702 89.199902 C 106.799702 90.139307 106.039556 90.899854 105.100267 90.899854 C 104.160979 90.899854 103.399219 90.139307 103.399219 89.199902 C 103.399219 88.260498 104.160979 87.499951 105.100267 87.499951 C 106.039556 87.499951 106.799702 88.260498 106.799702 89.199902 Z M 106.799702 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 106.799702 82.000488 C 106.799702 82.938281 106.039556 83.700439 105.100267 83.700439 C 104.160979 83.700439 103.399219 82.938281 103.399219 82.000488 C 103.399219 81.061084 104.160979 80.300537 105.100267 80.300537 C 106.039556 80.300537 106.799702 81.061084 106.799702 82.000488 Z M 106.799702 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 113.999301 89.199902 C 113.999301 90.139307 113.239155 90.899854 112.299866 90.899854 C 111.360578 90.899854 110.600432 90.139307 110.600432 89.199902 C 110.600432 88.260498 111.360578 87.499951 112.299866 87.499951 C 113.239155 87.499951 113.999301 88.260498 113.999301 89.199902 Z M 113.999301 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 113.999301 82.000488 C 113.999301 82.938281 113.239155 83.700439 112.299866 83.700439 C 111.360578 83.700439 110.600432 82.938281 110.600432 82.000488 C 110.600432 81.061084 111.360578 80.300537 112.299866 80.300537 C 113.239155 80.300537 113.999301 81.061084 113.999301 82.000488 Z M 113.999301 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 121.200514 89.199902 C 121.200514 90.139307 120.438754 90.899854 119.499465 90.899854 C 118.561791 90.899854 117.800031 90.139307 117.800031 89.199902 C 117.800031 88.260498 118.561791 87.499951 119.499465 87.499951 C 120.438754 87.499951 121.200514 88.260498 121.200514 89.199902 Z M 121.200514 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 121.200514 82.000488 C 121.200514 82.938281 120.438754 83.700439 119.499465 83.700439 C 118.561791 83.700439 117.800031 82.938281 117.800031 82.000488 C 117.800031 81.061084 118.561791 80.300537 119.499465 80.300537 C 120.438754 80.300537 121.200514 81.061084 121.200514 82.000488 Z M 121.200514 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 128.400113 89.199902 C 128.400113 90.139307 127.638353 90.899854 126.700678 90.899854 C 125.76139 90.899854 124.99963 90.139307 124.99963 89.199902 C 124.99963 88.260498 125.76139 87.499951 126.700678 87.499951 C 127.638353 87.499951 128.400113 88.260498 128.400113 89.199902 Z M 128.400113 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 128.400113 82.000488 C 128.400113 82.938281 127.638353 83.700439 126.700678 83.700439 C 125.76139 83.700439 124.99963 82.938281 124.99963 82.000488 C 124.99963 81.061084 125.76139 80.300537 126.700678 80.300537 C 127.638353 80.300537 128.400113 81.061084 128.400113 82.000488 Z M 128.400113 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 135.599712 89.199902 C 135.599712 90.139307 134.839566 90.899854 133.900278 90.899854 C 132.960989 90.899854 132.199229 90.139307 132.199229 89.199902 C 132.199229 88.260498 132.960989 87.499951 133.900278 87.499951 C 134.839566 87.499951 135.599712 88.260498 135.599712 89.199902 Z M 135.599712 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 135.599712 82.000488 C 135.599712 82.938281 134.839566 83.700439 133.900278 83.700439 C 132.960989 83.700439 132.199229 82.938281 132.199229 82.000488 C 132.199229 81.061084 132.960989 80.300537 133.900278 80.300537 C 134.839566 80.300537 135.599712 81.061084 135.599712 82.000488 Z M 135.599712 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 142.799311 89.199902 C 142.799311 90.139307 142.039165 90.899854 141.099877 90.899854 C 140.160588 90.899854 139.400442 90.139307 139.400442 89.199902 C 139.400442 88.260498 140.160588 87.499951 141.099877 87.499951 C 142.039165 87.499951 142.799311 88.260498 142.799311 89.199902 Z M 142.799311 89.199902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 142.799311 82.000488 C 142.799311 82.938281 142.039165 83.700439 141.099877 83.700439 C 140.160588 83.700439 139.400442 82.938281 139.400442 82.000488 C 139.400442 81.061084 140.160588 80.300537 141.099877 80.300537 C 142.039165 80.300537 142.799311 81.061084 142.799311 82.000488 Z M 142.799311 82.000488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 20.399671 17.199316 C 20.399671 18.138721 19.639525 18.899268 18.700236 18.899268 C 17.760948 18.899268 17.000802 18.138721 17.000802 17.199316 C 17.000802 16.261523 17.760948 15.499365 18.700236 15.499365 C 19.639525 15.499365 20.399671 16.261523 20.399671 17.199316 Z M 20.399671 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 17.000802 15.499365 L 20.399671 15.499365 L 20.399671 18.899268 L 17.000802 18.899268 Z M 17.000802 15.499365 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 20.399671 9.999902 C 20.399671 10.939307 19.639525 11.699854 18.700236 11.699854 C 17.760948 11.699854 17.000802 10.939307 17.000802 9.999902 C 17.000802 9.060498 17.760948 8.299951 18.700236 8.299951 C 19.639525 8.299951 20.399671 9.060498 20.399671 9.999902 Z M 20.399671 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 27.59927 17.199316 C 27.59927 18.138721 26.839124 18.899268 25.899836 18.899268 C 24.960547 18.899268 24.200401 18.138721 24.200401 17.199316 C 24.200401 16.261523 24.960547 15.499365 25.899836 15.499365 C 26.839124 15.499365 27.59927 16.261523 27.59927 17.199316 Z M 27.59927 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 27.59927 9.999902 C 27.59927 10.939307 26.839124 11.699854 25.899836 11.699854 C 24.960547 11.699854 24.200401 10.939307 24.200401 9.999902 C 24.200401 9.060498 24.960547 8.299951 25.899836 8.299951 C 26.839124 8.299951 27.59927 9.060498 27.59927 9.999902 Z M 27.59927 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 34.800483 17.199316 C 34.800483 18.138721 34.038723 18.899268 33.099435 18.899268 C 32.16176 18.899268 31.4 18.138721 31.4 17.199316 C 31.4 16.261523 32.16176 15.499365 33.099435 15.499365 C 34.038723 15.499365 34.800483 16.261523 34.800483 17.199316 Z M 34.800483 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 34.800483 9.999902 C 34.800483 10.939307 34.038723 11.699854 33.099435 11.699854 C 32.16176 11.699854 31.4 10.939307 31.4 9.999902 C 31.4 9.060498 32.16176 8.299951 33.099435 8.299951 C 34.038723 8.299951 34.800483 9.060498 34.800483 9.999902 Z M 34.800483 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 42.000082 17.199316 C 42.000082 18.138721 41.238322 18.899268 40.300648 18.899268 C 39.361359 18.899268 38.599599 18.138721 38.599599 17.199316 C 38.599599 16.261523 39.361359 15.499365 40.300648 15.499365 C 41.238322 15.499365 42.000082 16.261523 42.000082 17.199316 Z M 42.000082 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 42.000082 9.999902 C 42.000082 10.939307 41.238322 11.699854 40.300648 11.699854 C 39.361359 11.699854 38.599599 10.939307 38.599599 9.999902 C 38.599599 9.060498 39.361359 8.299951 40.300648 8.299951 C 41.238322 8.299951 42.000082 9.060498 42.000082 9.999902 Z M 42.000082 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 49.199681 17.199316 C 49.199681 18.138721 48.439535 18.899268 47.500247 18.899268 C 46.560958 18.899268 45.799198 18.138721 45.799198 17.199316 C 45.799198 16.261523 46.560958 15.499365 47.500247 15.499365 C 48.439535 15.499365 49.199681 16.261523 49.199681 17.199316 Z M 49.199681 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 49.199681 9.999902 C 49.199681 10.939307 48.439535 11.699854 47.500247 11.699854 C 46.560958 11.699854 45.799198 10.939307 45.799198 9.999902 C 45.799198 9.060498 46.560958 8.299951 47.500247 8.299951 C 48.439535 8.299951 49.199681 9.060498 49.199681 9.999902 Z M 49.199681 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 56.39928 17.199316 C 56.39928 18.138721 55.639134 18.899268 54.699846 18.899268 C 53.760557 18.899268 53.000411 18.138721 53.000411 17.199316 C 53.000411 16.261523 53.760557 15.499365 54.699846 15.499365 C 55.639134 15.499365 56.39928 16.261523 56.39928 17.199316 Z M 56.39928 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 56.39928 9.999902 C 56.39928 10.939307 55.639134 11.699854 54.699846 11.699854 C 53.760557 11.699854 53.000411 10.939307 53.000411 9.999902 C 53.000411 9.060498 53.760557 8.299951 54.699846 8.299951 C 55.639134 8.299951 56.39928 9.060498 56.39928 9.999902 Z M 56.39928 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 63.600493 17.199316 C 63.600493 18.138721 62.838734 18.899268 61.899445 18.899268 C 60.96177 18.899268 60.20001 18.138721 60.20001 17.199316 C 60.20001 16.261523 60.96177 15.499365 61.899445 15.499365 C 62.838734 15.499365 63.600493 16.261523 63.600493 17.199316 Z M 63.600493 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 63.600493 9.999902 C 63.600493 10.939307 62.838734 11.699854 61.899445 11.699854 C 60.96177 11.699854 60.20001 10.939307 60.20001 9.999902 C 60.20001 9.060498 60.96177 8.299951 61.899445 8.299951 C 62.838734 8.299951 63.600493 9.060498 63.600493 9.999902 Z M 63.600493 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 70.800093 17.199316 C 70.800093 18.138721 70.038333 18.899268 69.100658 18.899268 C 68.161369 18.899268 67.399609 18.138721 67.399609 17.199316 C 67.399609 16.261523 68.161369 15.499365 69.100658 15.499365 C 70.038333 15.499365 70.800093 16.261523 70.800093 17.199316 Z M 70.800093 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 70.800093 9.999902 C 70.800093 10.939307 70.038333 11.699854 69.100658 11.699854 C 68.161369 11.699854 67.399609 10.939307 67.399609 9.999902 C 67.399609 9.060498 68.161369 8.299951 69.100658 8.299951 C 70.038333 8.299951 70.800093 9.060498 70.800093 9.999902 Z M 70.800093 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 77.999692 17.199316 C 77.999692 18.138721 77.239546 18.899268 76.300257 18.899268 C 75.360968 18.899268 74.599208 18.138721 74.599208 17.199316 C 74.599208 16.261523 75.360968 15.499365 76.300257 15.499365 C 77.239546 15.499365 77.999692 16.261523 77.999692 17.199316 Z M 77.999692 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 77.999692 9.999902 C 77.999692 10.939307 77.239546 11.699854 76.300257 11.699854 C 75.360968 11.699854 74.599208 10.939307 74.599208 9.999902 C 74.599208 9.060498 75.360968 8.299951 76.300257 8.299951 C 77.239546 8.299951 77.999692 9.060498 77.999692 9.999902 Z M 77.999692 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 85.199291 17.199316 C 85.199291 18.138721 84.439145 18.899268 83.499856 18.899268 C 82.560567 18.899268 81.800421 18.138721 81.800421 17.199316 C 81.800421 16.261523 82.560567 15.499365 83.499856 15.499365 C 84.439145 15.499365 85.199291 16.261523 85.199291 17.199316 Z M 85.199291 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 85.199291 9.999902 C 85.199291 10.939307 84.439145 11.699854 83.499856 11.699854 C 82.560567 11.699854 81.800421 10.939307 81.800421 9.999902 C 81.800421 9.060498 82.560567 8.299951 83.499856 8.299951 C 84.439145 8.299951 85.199291 9.060498 85.199291 9.999902 Z M 85.199291 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 92.400504 17.199316 C 92.400504 18.138721 91.638744 18.899268 90.699455 18.899268 C 89.76178 18.899268 89.000021 18.138721 89.000021 17.199316 C 89.000021 16.261523 89.76178 15.499365 90.699455 15.499365 C 91.638744 15.499365 92.400504 16.261523 92.400504 17.199316 Z M 92.400504 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 92.400504 9.999902 C 92.400504 10.939307 91.638744 11.699854 90.699455 11.699854 C 89.76178 11.699854 89.000021 10.939307 89.000021 9.999902 C 89.000021 9.060498 89.76178 8.299951 90.699455 8.299951 C 91.638744 8.299951 92.400504 9.060498 92.400504 9.999902 Z M 92.400504 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 99.600103 17.199316 C 99.600103 18.138721 98.838343 18.899268 97.900668 18.899268 C 96.96138 18.899268 96.19962 18.138721 96.19962 17.199316 C 96.19962 16.261523 96.96138 15.499365 97.900668 15.499365 C 98.838343 15.499365 99.600103 16.261523 99.600103 17.199316 Z M 99.600103 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 99.600103 9.999902 C 99.600103 10.939307 98.838343 11.699854 97.900668 11.699854 C 96.96138 11.699854 96.19962 10.939307 96.19962 9.999902 C 96.19962 9.060498 96.96138 8.299951 97.900668 8.299951 C 98.838343 8.299951 99.600103 9.060498 99.600103 9.999902 Z M 99.600103 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 106.799702 17.199316 C 106.799702 18.138721 106.039556 18.899268 105.100267 18.899268 C 104.160979 18.899268 103.399219 18.138721 103.399219 17.199316 C 103.399219 16.261523 104.160979 15.499365 105.100267 15.499365 C 106.039556 15.499365 106.799702 16.261523 106.799702 17.199316 Z M 106.799702 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 106.799702 9.999902 C 106.799702 10.939307 106.039556 11.699854 105.100267 11.699854 C 104.160979 11.699854 103.399219 10.939307 103.399219 9.999902 C 103.399219 9.060498 104.160979 8.299951 105.100267 8.299951 C 106.039556 8.299951 106.799702 9.060498 106.799702 9.999902 Z M 106.799702 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 113.999301 17.199316 C 113.999301 18.138721 113.239155 18.899268 112.299866 18.899268 C 111.360578 18.899268 110.600432 18.138721 110.600432 17.199316 C 110.600432 16.261523 111.360578 15.499365 112.299866 15.499365 C 113.239155 15.499365 113.999301 16.261523 113.999301 17.199316 Z M 113.999301 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 113.999301 9.999902 C 113.999301 10.939307 113.239155 11.699854 112.299866 11.699854 C 111.360578 11.699854 110.600432 10.939307 110.600432 9.999902 C 110.600432 9.060498 111.360578 8.299951 112.299866 8.299951 C 113.239155 8.299951 113.999301 9.060498 113.999301 9.999902 Z M 113.999301 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 121.200514 17.199316 C 121.200514 18.138721 120.438754 18.899268 119.499465 18.899268 C 118.561791 18.899268 117.800031 18.138721 117.800031 17.199316 C 117.800031 16.261523 118.561791 15.499365 119.499465 15.499365 C 120.438754 15.499365 121.200514 16.261523 121.200514 17.199316 Z M 121.200514 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 121.200514 9.999902 C 121.200514 10.939307 120.438754 11.699854 119.499465 11.699854 C 118.561791 11.699854 117.800031 10.939307 117.800031 9.999902 C 117.800031 9.060498 118.561791 8.299951 119.499465 8.299951 C 120.438754 8.299951 121.200514 9.060498 121.200514 9.999902 Z M 121.200514 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 128.400113 17.199316 C 128.400113 18.138721 127.638353 18.899268 126.700678 18.899268 C 125.76139 18.899268 124.99963 18.138721 124.99963 17.199316 C 124.99963 16.261523 125.76139 15.499365 126.700678 15.499365 C 127.638353 15.499365 128.400113 16.261523 128.400113 17.199316 Z M 128.400113 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 128.400113 9.999902 C 128.400113 10.939307 127.638353 11.699854 126.700678 11.699854 C 125.76139 11.699854 124.99963 10.939307 124.99963 9.999902 C 124.99963 9.060498 125.76139 8.299951 126.700678 8.299951 C 127.638353 8.299951 128.400113 9.060498 128.400113 9.999902 Z M 128.400113 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 135.599712 17.199316 C 135.599712 18.138721 134.839566 18.899268 133.900278 18.899268 C 132.960989 18.899268 132.199229 18.138721 132.199229 17.199316 C 132.199229 16.261523 132.960989 15.499365 133.900278 15.499365 C 134.839566 15.499365 135.599712 16.261523 135.599712 17.199316 Z M 135.599712 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 135.599712 9.999902 C 135.599712 10.939307 134.839566 11.699854 133.900278 11.699854 C 132.960989 11.699854 132.199229 10.939307 132.199229 9.999902 C 132.199229 9.060498 132.960989 8.299951 133.900278 8.299951 C 134.839566 8.299951 135.599712 9.060498 135.599712 9.999902 Z M 135.599712 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 142.799311 17.199316 C 142.799311 18.138721 142.039165 18.899268 141.099877 18.899268 C 140.160588 18.899268 139.400442 18.138721 139.400442 17.199316 C 139.400442 16.261523 140.160588 15.499365 141.099877 15.499365 C 142.039165 15.499365 142.799311 16.261523 142.799311 17.199316 Z M 142.799311 17.199316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.9;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(60.392157%,56.862745%,42.352941%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 142.799311 9.999902 C 142.799311 10.939307 142.039165 11.699854 141.099877 11.699854 C 140.160588 11.699854 139.400442 10.939307 139.400442 9.999902 C 139.400442 9.060498 140.160588 8.299951 141.099877 8.299951 C 142.039165 8.299951 142.799311 9.060498 142.799311 9.999902 Z M 142.799311 9.999902 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 43.566406 134.546875 L 51.796875 134.546875 L 51.796875 140.847656 L 43.566406 140.847656 Z M 43.566406 134.546875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 71.160156 134.546875 L 79.386719 134.546875 L 79.386719 140.847656 L 71.160156 140.847656 Z M 71.160156 134.546875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 43.566406 144.726562 L 51.796875 144.726562 L 51.796875 151.03125 L 43.566406 151.03125 Z M 43.566406 144.726562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 71.160156 144.726562 L 79.386719 144.726562 L 79.386719 151.03125 L 71.160156 151.03125 Z M 71.160156 144.726562 \"/>\n<path style=\"fill:none;stroke-width:0.576;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 18.700236 59.000391 L 18.700236 58.800586 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.576;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 32.00037 59.000391 L 32.00037 58.800586 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.576;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 18.700236 54.599854 L 32.00037 54.599854 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.576;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 18.700236 63.099609 L 32.00037 63.099609 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.576;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 27.400761 58.900488 C 27.400761 60.004248 26.505047 60.900146 25.399527 60.900146 C 24.295621 60.900146 23.399907 60.004248 23.399907 58.900488 C 23.399907 57.795117 24.295621 56.899219 25.399527 56.899219 C 26.505047 56.899219 27.400761 57.795117 27.400761 58.900488 Z M 27.400761 58.900488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 12.899887 21.499951 L 11.89927 20.499316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 12.899887 21.499951 L 11.89927 22.400684 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 11.89927 22.400684 L 11.89927 20.499316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 12.299517 22.099365 L 12.299517 20.800635 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 12.599702 21.699756 L 12.599702 21.200244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 34.700421 19.700098 L 34.700421 79.2 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 34.700421 79.2 L 94.300062 79.2 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 94.300062 79.2 L 94.300062 19.700098 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 94.300062 19.700098 L 34.700421 19.700098 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 29.000134 71.599365 L 30.00075 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 29.000134 71.599365 L 27.999517 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 27.999517 70.700244 L 30.00075 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 28.399764 70.999951 L 29.600504 70.999951 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 28.699949 71.299658 L 29.200257 71.299658 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 22.499352 71.599365 L 23.499969 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 22.499352 71.599365 L 21.50035 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 21.50035 70.700244 L 23.499969 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 21.900596 70.999951 L 23.099722 70.999951 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 22.200781 71.299658 L 22.799537 71.299658 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 16.000185 71.599365 L 17.000802 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 16.000185 71.599365 L 14.999568 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 14.999568 70.700244 L 17.000802 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 15.399815 70.999951 L 16.600555 70.999951 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 15.800062 71.299658 L 16.30037 71.299658 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 9.499404 71.599365 L 10.500021 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 9.499404 71.599365 L 8.600463 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 8.600463 70.700244 L 10.500021 70.700244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 8.900648 70.999951 L 10.199836 70.999951 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.432;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 9.29928 71.299658 L 9.799589 71.299658 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.99962 39.000586 L 1.99962 60.199219 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.99962 39.000586 L 2.900175 39.000586 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.99962 60.199219 L 2.900175 60.199219 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 9.29928 60.199219 L 10.600082 60.199219 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 9.29928 39.000586 L 10.600082 39.000586 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 14.200689 44.300244 L 14.200689 44.899658 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.36;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 14.200689 54.300146 L 14.200689 54.899561 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 45.099463 L 1.599373 45.099463 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 45.099463 L 1.300802 45.400781 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 45.099463 L 1.300802 44.799756 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 43.900635 L 1.599373 43.900635 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 43.900635 L 1.300802 44.200342 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 43.900635 L 1.300802 43.699219 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 42.800098 L 1.599373 42.800098 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 42.800098 L 1.300802 43.099805 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 42.800098 L 1.300802 42.500391 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 41.699561 L 1.599373 41.699561 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 41.699561 L 1.300802 41.999268 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 41.699561 L 1.300802 41.399854 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 40.500732 L 1.599373 40.500732 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 40.500732 L 1.300802 40.800439 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 40.500732 L 1.300802 40.299316 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 58.700684 L 1.599373 58.700684 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 58.700684 L 1.300802 59.000391 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 58.700684 L 1.300802 58.399365 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 57.500244 L 1.599373 57.500244 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 57.500244 L 1.300802 57.799951 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 57.500244 L 1.300802 57.300439 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 56.399707 L 1.599373 56.399707 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 56.399707 L 1.300802 56.699414 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 56.399707 L 1.300802 56.1 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 55.300781 L 1.599373 55.300781 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 55.300781 L 1.300802 55.600488 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 55.300781 L 1.300802 54.999463 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 0.900555 54.100342 L 1.599373 54.100342 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 54.100342 L 1.300802 54.400049 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\"fill:none;stroke-width:0.108;stroke-linecap:round;stroke-linejoin:miter;stroke:rgb(100%,100%,100%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 1.599373 54.100342 L 1.300802 53.900537 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 27.582031 54.800781 L 22.015625 54.800781 L 22.015625 49.226562 L 27.582031 49.226562 Z M 27.582031 54.800781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 38 54.800781 L 32.433594 54.800781 L 32.433594 49.226562 L 38 49.226562 Z M 38 54.800781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 67.527344 164.605469 L 73.09375 164.605469 L 73.09375 170.183594 L 67.527344 170.183594 Z M 67.527344 164.605469 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 67.527344 174.789062 L 73.09375 174.789062 L 73.09375 180.363281 L 67.527344 180.363281 Z M 67.527344 174.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 51.796875 164.605469 L 57.363281 164.605469 L 57.363281 170.183594 L 51.796875 170.183594 Z M 51.796875 164.605469 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 51.796875 174.789062 L 57.363281 174.789062 L 57.363281 180.363281 L 51.796875 180.363281 Z M 51.796875 174.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 36.0625 164.605469 L 41.628906 164.605469 L 41.628906 170.183594 L 36.0625 170.183594 Z M 36.0625 164.605469 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 36.0625 174.789062 L 41.628906 174.789062 L 41.628906 180.363281 L 36.0625 180.363281 Z M 36.0625 174.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 20.332031 164.605469 L 25.898438 164.605469 L 25.898438 170.183594 L 20.332031 170.183594 Z M 20.332031 164.605469 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 20.332031 174.789062 L 25.898438 174.789062 L 25.898438 180.363281 L 20.332031 180.363281 Z M 20.332031 174.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 21.273438 100.289062 L 8.203125 100.289062 L 8.203125 87.925781 L 21.273438 87.925781 Z M 21.273438 100.289062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 21.273438 118.570312 L 8.203125 118.570312 L 8.203125 105.476562 L 21.273438 105.476562 Z M 21.273438 118.570312 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 21.273438 135.070312 L 8.203125 135.070312 L 8.203125 121.976562 L 21.273438 121.976562 Z M 21.273438 135.070312 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 21.273438 152.621094 L 8.203125 152.621094 L 8.203125 140.257812 L 21.273438 140.257812 Z M 21.273438 152.621094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 37.625 148.816406 L 26.734375 148.816406 L 26.734375 134.273438 L 37.625 134.273438 Z M 37.625 148.816406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 37.628906 106.273438 L 26.734375 106.273438 L 26.734375 91.730469 L 37.628906 91.730469 Z M 37.628906 106.273438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 37.648438 121.726562 L 28.449219 121.726562 L 28.449219 119.0625 L 37.648438 119.0625 Z M 37.648438 121.726562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 37.648438 117.15625 L 28.449219 117.15625 L 28.449219 114.492188 L 37.648438 114.492188 Z M 37.648438 117.15625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 37.648438 130.625 L 28.449219 130.625 L 28.449219 127.957031 L 37.648438 127.957031 Z M 37.648438 130.625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 37.648438 126.054688 L 28.449219 126.054688 L 28.449219 123.386719 L 37.648438 123.386719 Z M 37.648438 126.054688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 37.648438 112.589844 L 28.449219 112.589844 L 28.449219 109.921875 L 37.648438 109.921875 Z M 37.648438 112.589844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 103.273438 L 267.210938 103.273438 L 267.210938 108.121094 L 256.320312 108.121094 Z M 256.320312 103.273438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 110.789062 L 267.210938 110.789062 L 267.210938 115.636719 L 256.320312 115.636719 Z M 256.320312 110.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 118.546875 L 267.210938 118.546875 L 267.210938 123.394531 L 256.320312 123.394531 Z M 256.320312 118.546875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 126.0625 L 267.210938 126.0625 L 267.210938 130.910156 L 256.320312 130.910156 Z M 256.320312 126.0625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 133.574219 L 267.210938 133.574219 L 267.210938 138.425781 L 256.320312 138.425781 Z M 256.320312 133.574219 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 141.089844 L 267.210938 141.089844 L 267.210938 145.9375 L 256.320312 145.9375 Z M 256.320312 141.089844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 148.605469 L 267.210938 148.605469 L 267.210938 153.453125 L 256.320312 153.453125 Z M 256.320312 148.605469 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 156.121094 L 267.210938 156.121094 L 267.210938 160.96875 L 256.320312 160.96875 Z M 256.320312 156.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 256.320312 163.878906 L 267.210938 163.878906 L 267.210938 168.726562 L 256.320312 168.726562 Z M 256.320312 163.878906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 260.433594 169.9375 L 271.324219 169.9375 L 271.324219 178.183594 L 260.433594 178.183594 Z M 260.433594 169.9375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 323.605469 169.9375 L 338.613281 169.9375 L 338.613281 178.183594 L 323.605469 178.183594 Z M 323.605469 169.9375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 323.605469 63.515625 L 338.613281 63.515625 L 338.613281 71.757812 L 323.605469 71.757812 Z M 323.605469 63.515625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60.392157%,56.862745%,42.352941%);fill-opacity:1;\" d=\"M 260.433594 68.363281 L 270.113281 68.363281 L 270.113281 79.273438 L 260.433594 79.273438 Z M 260.433594 68.363281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;\" d=\"M 76.984375 139.007812 L 76.984375 135.613281 L 73.351562 135.613281 L 73.351562 132.460938 L 49.390625 132.460938 L 49.390625 135.613281 L 46.003906 135.613281 L 46.003906 139.007812 L 49.390625 139.007812 L 49.390625 146.523438 L 46.003906 146.523438 L 46.003906 149.917969 L 49.390625 149.917969 L 49.390625 153.066406 L 73.351562 153.066406 L 73.351562 149.917969 L 76.984375 149.917969 L 76.984375 146.523438 L 73.351562 146.523438 L 73.351562 139.007812 Z M 76.984375 139.007812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(11.764706%,11.764706%,11.764706%);fill-opacity:1;\" d=\"M 67.542969 142.886719 C 67.542969 146.234375 64.835938 148.945312 61.492188 148.945312 C 58.152344 148.945312 55.441406 146.234375 55.441406 142.886719 C 55.441406 139.539062 58.152344 136.824219 61.492188 136.824219 C 64.835938 136.824219 67.542969 139.539062 67.542969 142.886719 Z M 67.542969 142.886719 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(70.588235%,70.588235%,70.588235%);fill-opacity:1;\" d=\"M 48.421875 132.460938 L 49.875 132.460938 L 49.875 153.066406 L 48.421875 153.066406 Z M 48.421875 132.460938 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(70.588235%,70.588235%,70.588235%);fill-opacity:1;\" d=\"M 73.109375 132.460938 L 74.5625 132.460938 L 74.5625 153.066406 L 73.109375 153.066406 Z M 73.109375 132.460938 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;\" d=\"M 25.308594 49.179688 L 34.992188 49.179688 C 35.476562 49.179688 35.71875 49.421875 35.71875 49.90625 L 35.71875 54.027344 C 35.476562 54.511719 35.234375 54.753906 34.75 54.753906 L 25.066406 54.753906 C 24.824219 54.753906 24.582031 54.511719 24.582031 54.027344 L 24.582031 49.90625 C 24.582031 49.664062 24.824219 49.179688 25.308594 49.179688 Z M 25.308594 49.179688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,50.196078%,100%);fill-opacity:1;\" d=\"M 32.816406 54.835938 L 27.25 54.835938 L 27.25 49.261719 L 32.816406 49.261719 Z M 32.816406 54.835938 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,31.372549%,62.745098%);fill-opacity:1;\" d=\"M 30.148438 51.117188 C 30.683594 51.117188 31.117188 51.554688 31.117188 52.089844 C 31.117188 52.625 30.683594 53.058594 30.148438 53.058594 C 29.617188 53.058594 29.183594 52.625 29.183594 52.089844 C 29.183594 51.554688 29.617188 51.117188 30.148438 51.117188 Z M 30.148438 51.117188 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;\" d=\"M 72.976562 167.671875 L 72.976562 177.371094 C 72.976562 177.855469 72.734375 178.097656 72.25 178.097656 L 68.132812 178.097656 C 67.648438 177.855469 67.40625 177.613281 67.40625 177.128906 L 67.40625 167.429688 C 67.40625 167.1875 67.648438 166.945312 68.132812 166.945312 L 72.25 166.945312 C 72.492188 166.945312 72.976562 167.1875 72.976562 167.671875 Z M 72.976562 167.671875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,50.196078%,100%);fill-opacity:1;\" d=\"M 67.40625 169.613281 L 72.976562 169.613281 L 72.976562 175.1875 L 67.40625 175.1875 Z M 67.40625 169.613281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,31.372549%,62.745098%);fill-opacity:1;\" d=\"M 71.039062 172.519531 C 71.039062 173.058594 70.605469 173.492188 70.070312 173.492188 C 69.535156 173.492188 69.101562 173.058594 69.101562 172.519531 C 69.101562 171.984375 69.535156 171.550781 70.070312 171.550781 C 70.605469 171.550781 71.039062 171.984375 71.039062 172.519531 Z M 71.039062 172.519531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;\" d=\"M 57.289062 167.671875 L 57.289062 177.371094 C 57.289062 177.855469 57.050781 178.097656 56.566406 178.097656 L 52.449219 178.097656 C 51.964844 177.855469 51.722656 177.613281 51.722656 177.128906 L 51.722656 167.429688 C 51.722656 167.1875 51.964844 166.945312 52.449219 166.945312 L 56.566406 166.945312 C 56.808594 166.945312 57.289062 167.1875 57.289062 167.671875 Z M 57.289062 167.671875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,50.196078%,100%);fill-opacity:1;\" d=\"M 51.722656 169.613281 L 57.289062 169.613281 L 57.289062 175.1875 L 51.722656 175.1875 Z M 51.722656 169.613281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,31.372549%,62.745098%);fill-opacity:1;\" d=\"M 55.355469 172.519531 C 55.355469 173.058594 54.921875 173.492188 54.386719 173.492188 C 53.851562 173.492188 53.417969 173.058594 53.417969 172.519531 C 53.417969 171.984375 53.851562 171.550781 54.386719 171.550781 C 54.921875 171.550781 55.355469 171.984375 55.355469 172.519531 Z M 55.355469 172.519531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;\" d=\"M 41.605469 167.671875 L 41.605469 177.371094 C 41.605469 177.855469 41.363281 178.097656 40.878906 178.097656 L 36.765625 178.097656 C 36.28125 177.855469 36.039062 177.613281 36.039062 177.128906 L 36.039062 167.429688 C 36.039062 167.1875 36.28125 166.945312 36.765625 166.945312 L 40.878906 166.945312 C 41.121094 166.945312 41.605469 167.1875 41.605469 167.671875 Z M 41.605469 167.671875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,50.196078%,100%);fill-opacity:1;\" d=\"M 36.039062 169.613281 L 41.605469 169.613281 L 41.605469 175.1875 L 36.039062 175.1875 Z M 36.039062 169.613281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,31.372549%,62.745098%);fill-opacity:1;\" d=\"M 39.671875 172.519531 C 39.671875 173.058594 39.238281 173.492188 38.703125 173.492188 C 38.167969 173.492188 37.734375 173.058594 37.734375 172.519531 C 37.734375 171.984375 38.167969 171.550781 38.703125 171.550781 C 39.238281 171.550781 39.671875 171.984375 39.671875 172.519531 Z M 39.671875 172.519531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;\" d=\"M 25.921875 167.671875 L 25.921875 177.371094 C 25.921875 177.855469 25.679688 178.097656 25.195312 178.097656 L 21.082031 178.097656 C 20.597656 177.855469 20.355469 177.613281 20.355469 177.128906 L 20.355469 167.429688 C 20.355469 167.1875 20.597656 166.945312 21.082031 166.945312 L 25.195312 166.945312 C 25.4375 166.945312 25.921875 167.1875 25.921875 167.671875 Z M 25.921875 167.671875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,50.196078%,100%);fill-opacity:1;\" d=\"M 20.355469 169.613281 L 25.921875 169.613281 L 25.921875 175.1875 L 20.355469 175.1875 Z M 20.355469 169.613281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,31.372549%,62.745098%);fill-opacity:1;\" d=\"M 23.988281 172.519531 C 23.988281 173.058594 23.554688 173.492188 23.019531 173.492188 C 22.484375 173.492188 22.050781 173.058594 22.050781 172.519531 C 22.050781 171.984375 22.484375 171.550781 23.019531 171.550781 C 23.554688 171.550781 23.988281 171.984375 23.988281 172.519531 Z M 23.988281 172.519531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(40%,40%,40%);fill-opacity:1;\" d=\"M 36.867188 114.148438 L 35.414062 114.148438 L 35.414062 112.210938 L 36.867188 112.210938 Z M 36.867188 114.148438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60%,60%,60%);fill-opacity:1;\" d=\"M 36.671875 112.355469 L 35.703125 112.355469 L 35.703125 112.113281 L 36.671875 112.113281 Z M 36.671875 112.355469 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(40%,40%,40%);fill-opacity:1;\" d=\"M 36.671875 117.835938 L 35.21875 117.835938 L 35.21875 115.894531 L 36.671875 115.894531 Z M 36.671875 117.835938 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60%,60%,60%);fill-opacity:1;\" d=\"M 36.722656 116.039062 L 35.753906 116.039062 L 35.753906 115.796875 L 36.722656 115.796875 Z M 36.722656 116.039062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(40%,40%,40%);fill-opacity:1;\" d=\"M 36.769531 121.324219 L 35.316406 121.324219 L 35.316406 119.386719 L 36.769531 119.386719 Z M 36.769531 121.324219 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60%,60%,60%);fill-opacity:1;\" d=\"M 36.816406 119.53125 L 35.847656 119.53125 L 35.847656 119.289062 L 36.816406 119.289062 Z M 36.816406 119.53125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(40%,40%,40%);fill-opacity:1;\" d=\"M 36.816406 125.007812 L 35.367188 125.007812 L 35.367188 123.070312 L 36.816406 123.070312 Z M 36.816406 125.007812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60%,60%,60%);fill-opacity:1;\" d=\"M 36.867188 123.214844 L 35.898438 123.214844 L 35.898438 122.972656 L 36.867188 122.972656 Z M 36.867188 123.214844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(40%,40%,40%);fill-opacity:1;\" d=\"M 36.671875 128.5 L 35.21875 128.5 L 35.21875 126.5625 L 36.671875 126.5625 Z M 36.671875 128.5 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60%,60%,60%);fill-opacity:1;\" d=\"M 36.722656 126.707031 L 35.753906 126.707031 L 35.753906 126.464844 L 36.722656 126.464844 Z M 36.722656 126.707031 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(70.196078%,70.196078%,70.196078%);fill-opacity:1;\" d=\"M 3.027344 102.125 L 35.945312 102.125 L 35.945312 138.730469 L 3.027344 138.730469 Z M 3.027344 102.125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(71.764706%,71.764706%,71.764706%);fill-opacity:1;\" d=\"M 22.925781 142.609375 L 17.117188 142.609375 L 17.117188 139.214844 L 22.925781 139.214844 Z M 22.925781 142.609375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(71.764706%,71.764706%,71.764706%);fill-opacity:1;\" d=\"M 23.019531 101.496094 L 17.210938 101.496094 L 17.210938 98.101562 L 23.019531 98.101562 Z M 23.019531 101.496094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(80%,80%,80%);fill-opacity:1;\" d=\"M 36.089844 138.488281 L 35.847656 138.488281 L 35.847656 102.125 L 36.089844 102.125 Z M 36.089844 138.488281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 36.042969 130.246094 L 3.125 130.246094 L 3.125 110.367188 L 36.042969 110.367188 Z M 36.042969 130.246094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(70.196078%,70.196078%,70.196078%);fill-opacity:1;\" d=\"M 5.109375 101.738281 L 2.933594 101.738281 L 2.933594 99.796875 L 5.109375 99.796875 Z M 5.109375 101.738281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(94.901961%,94.901961%,94.901961%);fill-opacity:1;\" d=\"M 5.304688 101.445312 L 3.125 101.445312 L 3.125 100.234375 L 5.304688 100.234375 Z M 5.304688 101.445312 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(70.196078%,70.196078%,70.196078%);fill-opacity:1;\" d=\"M 5.207031 141.105469 L 3.027344 141.105469 L 3.027344 139.167969 L 5.207031 139.167969 Z M 5.207031 141.105469 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60%,60%,60%);fill-opacity:1;\" d=\"M 5.304688 140.234375 L 3.125 140.234375 L 3.125 139.023438 L 5.304688 139.023438 Z M 5.304688 140.234375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(80%,80%,80%);fill-opacity:1;\" d=\"M 34.734375 101.640625 L 35.945312 102.125 L 19.972656 106.972656 C 19.972656 106.972656 19.730469 102.609375 19.488281 102.367188 C 19.246094 102.125 19.003906 102.609375 19.003906 102.609375 L 19.003906 101.882812 L 34.734375 101.882812 Z M 34.734375 101.640625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(80%,80%,80%);fill-opacity:1;\" d=\"M 34.734375 138.972656 L 35.945312 138.488281 L 35.945312 133.640625 C 35.945312 133.640625 35.703125 138.003906 35.460938 138.246094 C 34.976562 138.488281 34.976562 138.003906 34.976562 138.003906 C 34.976562 138.003906 34.734375 138.972656 34.734375 138.972656 Z M 34.734375 138.972656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(90.196078%,90.196078%,90.196078%);fill-opacity:1;\" d=\"M 34.734375 132.425781 L 32.800781 132.425781 L 32.800781 129.277344 L 35.945312 129.277344 L 35.945312 128.304688 L 34.734375 128.304688 L 34.734375 112.0625 L 35.945312 112.0625 L 35.945312 111.09375 L 32.800781 111.09375 L 32.800781 107.941406 L 34.976562 107.941406 L 34.976562 101.640625 L 3.027344 101.640625 L 3.027344 138.972656 L 34.734375 138.972656 Z M 9.078125 111.09375 L 7.628906 111.09375 L 7.628906 107.941406 L 9.320312 107.941406 C 9.804688 107.214844 10.773438 106.488281 11.742188 106.488281 C 12.953125 106.488281 13.921875 106.972656 14.40625 107.941406 L 23.117188 107.941406 L 23.117188 111.09375 L 14.40625 112.546875 C 13.921875 112.0625 12.953125 112.792969 11.742188 112.792969 C 10.53125 112.792969 9.5625 112.0625 9.078125 111.09375 Z M 9.078125 132.183594 L 7.628906 132.183594 L 7.628906 129.277344 L 9.320312 129.277344 C 9.804688 128.546875 10.773438 127.820312 11.742188 127.820312 C 12.953125 127.820312 13.921875 128.304688 14.40625 129.277344 L 23.117188 129.277344 L 23.117188 132.425781 L 14.40625 132.425781 C 13.921875 133.398438 12.953125 133.882812 11.742188 133.882812 C 10.53125 133.882812 9.5625 133.15625 9.078125 132.183594 Z M 9.078125 132.183594 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(94.901961%,94.901961%,94.901961%);fill-opacity:1;\" d=\"M 3.027344 101.640625 L 34.734375 101.640625 L 34.734375 104.546875 L 3.027344 102.367188 Z M 3.027344 101.640625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(60%,60%,60%);fill-opacity:1;\" d=\"M 24.328125 138.003906 L 34.734375 136.792969 L 34.734375 138.972656 L 3.027344 138.972656 Z M 24.328125 138.003906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(80%,80%,80%);fill-opacity:1;\" d=\"M 23.117188 111.238281 L 22.875 111.238281 L 22.875 108.089844 L 23.117188 108.089844 Z M 23.117188 111.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(80%,80%,80%);fill-opacity:1;\" d=\"M 22.925781 132.378906 L 22.683594 132.378906 L 22.683594 129.226562 L 22.925781 129.226562 Z M 22.925781 132.378906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(70.196078%,70.196078%,70.196078%);fill-opacity:1;\" d=\"M 5.59375 137.035156 L 4.140625 137.035156 L 4.140625 103.335938 L 5.59375 103.335938 Z M 5.59375 137.035156 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(80%,80%,80%);fill-opacity:1;\" d=\"M 4.433594 137.226562 L 2.980469 137.226562 L 2.980469 103.53125 L 4.433594 103.53125 Z M 4.433594 137.226562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;\" d=\"M 261.886719 78.304688 L 261.886719 171.636719 L 357.734375 171.636719 L 357.734375 124.121094 C 357.734375 113.453125 359.667969 103.03125 363.542969 93.089844 C 364.265625 90.910156 364.75 88.484375 364.75 86.304688 L 364.75 68.847656 L 269.871094 68.847656 L 269.871094 78.546875 L 261.886719 78.546875 Z M 261.886719 78.304688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(45.490196%,46.27451%,47.058824%);fill-opacity:1;\" d=\"M 326.992188 71.757812 L 326.507812 71.515625 L 314.40625 71.515625 L 313.679688 72 L 312.957031 72.726562 L 312.957031 85.332031 L 313.679688 86.304688 L 314.40625 86.789062 L 326.507812 86.789062 L 326.992188 86.546875 L 327.71875 85.574219 L 328.203125 85.332031 L 328.6875 85.332031 L 328.203125 85.332031 L 360.636719 85.332031 L 361.363281 85.089844 L 361.847656 84.605469 L 361.847656 83.152344 L 361.605469 82.425781 L 361.121094 82.183594 L 360.636719 81.9375 L 329.171875 80.96875 L 328.929688 81.210938 L 328.445312 81.210938 L 328.203125 81.453125 L 325.300781 84.363281 L 325.058594 84.605469 L 316.34375 84.605469 L 316.101562 84.121094 L 315.617188 83.636719 L 315.617188 74.667969 L 316.101562 74.183594 L 316.34375 73.695312 L 324.816406 73.695312 L 325.300781 74.183594 L 328.203125 77.089844 L 328.6875 77.332031 L 328.929688 77.332031 L 329.171875 77.574219 L 360.636719 76.363281 L 361.121094 75.878906 L 361.605469 75.636719 L 361.847656 75.152344 L 361.847656 73.695312 L 361.363281 73.210938 L 360.636719 72.726562 L 328.203125 72.726562 L 327.71875 72.484375 Z M 326.992188 71.757812 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(76.862745%,77.254902%,78.039216%);fill-opacity:1;stroke-width:0.003;stroke-linecap:butt;stroke-linejoin:miter;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 130.499794 30.600732 L 130.799979 30.399316 L 131.100164 30.399316 L 130.900041 30.399316 L 131.100164 30.399316 L 131.000103 30.499219 L 130.900041 30.600732 L 130.799979 30.800537 L 130.799979 34.500146 L 130.900041 34.699951 L 131.100164 34.899756 L 130.799979 34.899756 L 130.499794 34.699951 L 130.299671 34.500146 L 130.299671 30.800537 Z M 130.499794 30.600732 \" transform=\"matrix(2.420382,0,0,2.424242,0,0)\"/>\n</g>\n</svg>\n",
      "config.ts": "\nnamespace config {\n\n    export const PIN_A0 = DAL.CFG_PIN_A0;\n}\n",
      "device.d.ts": "declare namespace pins {\n    //% fixedInstance shim=pxt::getPin(PIN_A0)\n    const PIN_A0: PwmPin;\n    //% fixedInstance shim=pxt::getPin(PIN_A0)\n    const PIN_A1: AnalogOutPin;\n   \n    //% fixedInstance shim=pxt::getPin(P8_1)\n    const LED: DigitalInOutPin;\n}",
      "pxt.json": "{\n    \"name\": \"pocketbeagle\",\n    \"description\": \"Support for PocketBeagle Board\",\n    \"files\": [\n        \"README.md\",\n        \"device.d.ts\",\n        \"config.ts\",\n        \"board.json\",\n        \"board.svg\"\n    ],\n    \"core\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"public\": true,\n    \"features\": [\n        \"i2c\",\n        \"pinled\",\n        \"pind0\",\n        \"pind1\",\n        \"pina0\",\n        \"pina1\",\n        \"buttond0\",\n        \"buttond1\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"0.0.1\"\n    },\n    \"icon\": \"/pxt-beaglebone/docs/static/libs/pocketbeagle.jpg\"\n}"
    },
    "beagleboneblack": {
      "README.md": "# BeagleboneBlack\n\nThe BeagleboneBlack library.\n\n",
      "board.json": "{\n  \"driveDisplayName\": \"BEAGLEBONEBLACK\",\n  \"visual\": {\n    \"image\": \"pkg://board.svg\",\n    \"useCrocClips\": false,\n    \"width\": 365,\n    \"height\": 243.5,\n    \"pinDist\": 9.5,\n    \"pinBlocks\": [{\n      \"x\": 79.1643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"GND\"\n      ]\n    },{\n      \"x\": 79.1643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"GND\"\n      ]\n    },{\n      \"x\": 88.6643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_04\"\n      ]\n    },{\n      \"x\": 88.6643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_03\"\n      ]\n    },{\n      \"x\": 98.1643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_06\"\n      ]\n    },{\n      \"x\": 98.1643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_05\"\n      ]\n    },{\n      \"x\": 107.6643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_08\"\n      ]\n    },{\n      \"x\": 107.6643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_07\"\n      ]\n    },{\n      \"x\": 116.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_10\"\n      ]\n    },{\n      \"x\": 116.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_09\"\n      ]\n    },{\n      \"x\": 125.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_12\"\n      ]\n    },{\n      \"x\": 125.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_11\"\n      ]\n    },{\n      \"x\": 135.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_14\"\n      ]\n    },{\n      \"x\": 135.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_13\"\n      ]\n    },{\n      \"x\": 144.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_16\"\n      ]\n    },{\n      \"x\": 144.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_15\"\n      ]\n    },{\n      \"x\": 154.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_18\"\n      ]\n    },{\n      \"x\": 154.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_17\"\n      ]\n    },{\n      \"x\": 163.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_20\"\n      ]\n    },{\n      \"x\": 163.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_19\"\n      ]\n    },{\n      \"x\": 173.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_22\"\n      ]\n    },{\n      \"x\": 173.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_21\"\n      ]\n    }, {\n      \"x\": 182.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_24\"\n      ]\n    },{\n      \"x\": 182.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_23\"\n      ]\n    }, {\n      \"x\": 192.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_26\"\n      ]\n    },{\n      \"x\": 192.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_25\"\n      ]\n    }, {\n      \"x\": 201.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_28\"\n      ]\n    },{\n      \"x\": 201.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_27\"\n      ]\n    }, {\n      \"x\": 210.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_30\"\n      ]\n    },{\n      \"x\": 210.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_29\"\n      ]\n    }, {\n      \"x\": 219.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_32\"\n      ]\n    },{\n      \"x\": 219.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_31\"\n      ]\n    }, {\n      \"x\": 229.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_34\"\n      ]\n    },{\n      \"x\": 229.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_33\"\n      ]\n    }, {\n      \"x\": 238.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_36\"\n      ]\n    },{\n      \"x\": 238.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_35\"\n      ]\n    }, {\n      \"x\": 248.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_38\"\n      ]\n    },{\n      \"x\": 248.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_37\"\n      ]\n    }, {\n      \"x\": 257.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_40\"\n      ]\n    },{\n      \"x\": 257.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_39\"\n      ]\n    }, {\n      \"x\": 267.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_42\"\n      ]\n    },{\n      \"x\": 267.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_41\"\n      ]\n    }, {\n      \"x\": 275.5643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_44\"\n      ]\n    },{\n      \"x\": 275.5643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_43\"\n      ]\n    }, {\n      \"x\": 285.0643011094483,\n      \"y\": 25.32240423853298,\n      \"labels\": [\n        \"P8_46\"\n      ]\n    },{\n      \"x\": 285.0643011094483,\n      \"y\": 32.82240423853298,\n      \"labels\": [\n        \"P8_45\"\n      ]\n    },\n    \n    {\n        \"x\": 79.1643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"GND\"\n        ]\n      },{\n        \"x\": 79.1643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"GND\"\n        ]\n      },{\n        \"x\": 88.6643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"VCC\"\n        ]\n      },{\n        \"x\": 88.6643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"VCC\"\n        ]\n      },{\n        \"x\": 98.1643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_06\"\n        ]\n      },{\n        \"x\": 98.1643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_05\"\n        ]\n      },{\n        \"x\": 107.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_08\"\n        ]\n      },{\n        \"x\": 107.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_07\"\n        ]\n      },{\n        \"x\": 116.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_10\"\n        ]\n      },{\n        \"x\": 116.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_09\"\n        ]\n      },{\n        \"x\": 125.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_12\"\n        ]\n      },{\n        \"x\": 125.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_11\"\n        ]\n      },{\n        \"x\": 135.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_14\"\n        ]\n      },{\n        \"x\": 135.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_13\"\n        ]\n      },{\n        \"x\": 144.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_16\"\n        ]\n      },{\n        \"x\": 144.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_15\"\n        ]\n      },{\n        \"x\": 154.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_18\"\n        ]\n      },{\n        \"x\": 154.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_17\"\n        ]\n      },{\n        \"x\": 163.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_20\"\n        ]\n      },{\n        \"x\": 163.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_19\"\n        ]\n      },{\n        \"x\": 173.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_22\"\n        ]\n      },{\n        \"x\": 173.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_21\"\n        ]\n      }, {\n        \"x\": 182.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_24\"\n        ]\n      },{\n        \"x\": 182.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_23\"\n        ]\n      }, {\n        \"x\": 192.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_26\"\n        ]\n      },{\n        \"x\": 192.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_25\"\n        ]\n      }, {\n        \"x\": 201.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_28\"\n        ]\n      },{\n        \"x\": 201.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_27\"\n        ]\n      }, {\n        \"x\": 210.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_30\"\n        ]\n      },{\n        \"x\": 210.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_29\"\n        ]\n      }, {\n        \"x\": 219.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_32\"\n        ]\n      },{\n        \"x\": 219.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_31\"\n        ]\n      }, {\n        \"x\": 229.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_34\"\n        ]\n      },{\n        \"x\": 229.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_33\"\n        ]\n      }, {\n        \"x\": 238.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_36\"\n        ]\n      },{\n        \"x\": 238.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_35\"\n        ]\n      }, {\n        \"x\": 248.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_38\"\n        ]\n      },{\n        \"x\": 248.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_37\"\n        ]\n      }, {\n        \"x\": 257.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_40\"\n        ]\n      },{\n        \"x\": 257.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_39\"\n        ]\n      }, {\n        \"x\": 267.0643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"P9_42\"\n        ]\n      },{\n        \"x\": 267.0643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"P9_41\"\n        ]\n      }, {\n        \"x\": 276.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"GND\"\n        ]\n      },{\n        \"x\": 276.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"GND\"\n        ]\n      }, {\n        \"x\": 285.5643011094483,\n        \"y\": 203.82240423853298,\n        \"labels\": [\n          \"GND\"\n        ]\n      },{\n        \"x\": 285.5643011094483,\n        \"y\": 211.32240423853298,\n        \"labels\": [\n          \"GND\"\n        ]\n      }\n    ],\n    \"leds\": [\n      {\n        \"x\": 36.870660853741754,\n        \"y\": 53.61459602300603,\n        \"w\": 16.443787023546098,\n        \"h\": 12.443789223272389,\n        \"color\": \"#0064ff\",\n        \"label\": \"USR0\"\n      },{\n        \"x\": 36.870660853741754,\n        \"y\": 67.61459602300603,\n        \"w\": 16.443787023546098,\n        \"h\": 12.443789223272389,\n        \"color\": \"#0064ff\",\n        \"label\": \"USR1\"\n      },{\n        \"x\": 36.870660853741754,\n        \"y\": 80.61459602300603,\n        \"w\": 16.443787023546098,\n        \"h\": 12.443789223272389,\n        \"color\": \"#0064ff\",\n        \"label\": \"USR2\"\n      },{\n        \"x\": 36.870660853741754,\n        \"y\": 93.61459602300603,\n        \"w\": 16.443787023546098,\n        \"h\": 12.443789223272389,\n        \"color\": \"#0064ff\",\n        \"label\": \"USR3\"\n      }\n    ]\n  },\n  \"gpioPinMap\": {\n   \n  },\n  \"groundPins\": [\n    \"GND\"\n  ],\n  \"threeVoltPins\": [\n    \"VCC\"\n  ],\n  \"marginWhenBreadboarding\": [\n    0,\n    0,\n    80,\n    0\n  ]\n}",
      "board.svg": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"436pt\" height=\"240pt\" viewBox=\"0 0 436 240\" version=\"1.1\">\n<defs>\n<g>\n<symbol overflow=\"visible\" id=\"glyph0-0\">\n<path style=\"stroke:none;\" d=\"M 0.5 1.765625 L 0.5 -7.046875 L 5.5 -7.046875 L 5.5 1.765625 Z M 1.0625 1.21875 L 4.9375 1.21875 L 4.9375 -6.484375 L 1.0625 -6.484375 Z M 1.0625 1.21875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-1\">\n<path style=\"stroke:none;\" d=\"M 1.96875 -6.484375 L 1.96875 -3.734375 L 3.203125 -3.734375 C 3.660156 -3.734375 4.015625 -3.851562 4.265625 -4.09375 C 4.523438 -4.332031 4.65625 -4.671875 4.65625 -5.109375 C 4.65625 -5.546875 4.523438 -5.882812 4.265625 -6.125 C 4.015625 -6.363281 3.660156 -6.484375 3.203125 -6.484375 Z M 0.984375 -7.296875 L 3.203125 -7.296875 C 4.023438 -7.296875 4.644531 -7.109375 5.0625 -6.734375 C 5.476562 -6.367188 5.6875 -5.828125 5.6875 -5.109375 C 5.6875 -4.390625 5.476562 -3.847656 5.0625 -3.484375 C 4.644531 -3.117188 4.023438 -2.9375 3.203125 -2.9375 L 1.96875 -2.9375 L 1.96875 0 L 0.984375 0 Z M 0.984375 -7.296875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-2\">\n<path style=\"stroke:none;\" d=\"M 1.09375 -0.15625 L 1.09375 -1.046875 C 1.34375 -0.929688 1.59375 -0.84375 1.84375 -0.78125 C 2.101562 -0.71875 2.351562 -0.6875 2.59375 -0.6875 C 3.25 -0.6875 3.75 -0.90625 4.09375 -1.34375 C 4.4375 -1.78125 4.628906 -2.445312 4.671875 -3.34375 C 4.484375 -3.0625 4.242188 -2.84375 3.953125 -2.6875 C 3.671875 -2.539062 3.351562 -2.46875 3 -2.46875 C 2.269531 -2.46875 1.691406 -2.6875 1.265625 -3.125 C 0.835938 -3.570312 0.625 -4.175781 0.625 -4.9375 C 0.625 -5.6875 0.84375 -6.285156 1.28125 -6.734375 C 1.726562 -7.191406 2.320312 -7.421875 3.0625 -7.421875 C 3.90625 -7.421875 4.546875 -7.097656 4.984375 -6.453125 C 5.429688 -5.804688 5.65625 -4.867188 5.65625 -3.640625 C 5.65625 -2.492188 5.382812 -1.578125 4.84375 -0.890625 C 4.300781 -0.203125 3.566406 0.140625 2.640625 0.140625 C 2.390625 0.140625 2.140625 0.113281 1.890625 0.0625 C 1.640625 0.0195312 1.375 -0.0507812 1.09375 -0.15625 Z M 3.0625 -3.25 C 3.5 -3.25 3.847656 -3.398438 4.109375 -3.703125 C 4.367188 -4.003906 4.5 -4.414062 4.5 -4.9375 C 4.5 -5.46875 4.367188 -5.882812 4.109375 -6.1875 C 3.847656 -6.488281 3.5 -6.640625 3.0625 -6.640625 C 2.613281 -6.640625 2.257812 -6.488281 2 -6.1875 C 1.75 -5.882812 1.625 -5.46875 1.625 -4.9375 C 1.625 -4.414062 1.75 -4.003906 2 -3.703125 C 2.257812 -3.398438 2.613281 -3.25 3.0625 -3.25 Z M 3.0625 -3.25 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph0-3\">\n<path style=\"stroke:none;\" d=\"M 3.171875 -3.46875 C 2.703125 -3.46875 2.332031 -3.335938 2.0625 -3.078125 C 1.800781 -2.828125 1.671875 -2.484375 1.671875 -2.046875 C 1.671875 -1.609375 1.800781 -1.265625 2.0625 -1.015625 C 2.332031 -0.765625 2.703125 -0.640625 3.171875 -0.640625 C 3.640625 -0.640625 4.007812 -0.765625 4.28125 -1.015625 C 4.550781 -1.265625 4.6875 -1.609375 4.6875 -2.046875 C 4.6875 -2.484375 4.550781 -2.828125 4.28125 -3.078125 C 4.019531 -3.335938 3.648438 -3.46875 3.171875 -3.46875 Z M 2.1875 -3.875 C 1.769531 -3.976562 1.441406 -4.175781 1.203125 -4.46875 C 0.960938 -4.757812 0.84375 -5.113281 0.84375 -5.53125 C 0.84375 -6.113281 1.050781 -6.570312 1.46875 -6.90625 C 1.882812 -7.25 2.453125 -7.421875 3.171875 -7.421875 C 3.898438 -7.421875 4.472656 -7.25 4.890625 -6.90625 C 5.304688 -6.570312 5.515625 -6.113281 5.515625 -5.53125 C 5.515625 -5.113281 5.394531 -4.757812 5.15625 -4.46875 C 4.914062 -4.175781 4.585938 -3.976562 4.171875 -3.875 C 4.648438 -3.769531 5.019531 -3.554688 5.28125 -3.234375 C 5.539062 -2.910156 5.671875 -2.515625 5.671875 -2.046875 C 5.671875 -1.335938 5.457031 -0.796875 5.03125 -0.421875 C 4.601562 -0.046875 3.984375 0.140625 3.171875 0.140625 C 2.367188 0.140625 1.75 -0.046875 1.3125 -0.421875 C 0.882812 -0.796875 0.671875 -1.335938 0.671875 -2.046875 C 0.671875 -2.515625 0.804688 -2.910156 1.078125 -3.234375 C 1.347656 -3.554688 1.71875 -3.769531 2.1875 -3.875 Z M 1.828125 -5.4375 C 1.828125 -5.0625 1.945312 -4.765625 2.1875 -4.546875 C 2.425781 -4.335938 2.753906 -4.234375 3.171875 -4.234375 C 3.597656 -4.234375 3.929688 -4.335938 4.171875 -4.546875 C 4.410156 -4.765625 4.53125 -5.0625 4.53125 -5.4375 C 4.53125 -5.8125 4.410156 -6.101562 4.171875 -6.3125 C 3.929688 -6.53125 3.597656 -6.640625 3.171875 -6.640625 C 2.753906 -6.640625 2.425781 -6.53125 2.1875 -6.3125 C 1.945312 -6.101562 1.828125 -5.8125 1.828125 -5.4375 Z M 1.828125 -5.4375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-0\">\n<path style=\"stroke:none;\" d=\"M 0.25 0.890625 L 0.25 -3.53125 L 2.75 -3.53125 L 2.75 0.890625 Z M 0.53125 0.609375 L 2.46875 0.609375 L 2.46875 -3.25 L 0.53125 -3.25 Z M 0.53125 0.609375 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-1\">\n<path style=\"stroke:none;\" d=\"M 0.625 -0.421875 L 1.421875 -0.421875 L 1.421875 -3.203125 L 0.546875 -3.015625 L 0.546875 -3.46875 L 1.421875 -3.640625 L 1.921875 -3.640625 L 1.921875 -0.421875 L 2.71875 -0.421875 L 2.71875 0 L 0.625 0 Z M 0.625 -0.421875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-2\">\n<path style=\"stroke:none;\" d=\"M 0.953125 -0.421875 L 2.6875 -0.421875 L 2.6875 0 L 0.359375 0 L 0.359375 -0.421875 C 0.546875 -0.609375 0.800781 -0.863281 1.125 -1.1875 C 1.445312 -1.519531 1.648438 -1.734375 1.734375 -1.828125 C 1.898438 -2.003906 2.015625 -2.15625 2.078125 -2.28125 C 2.140625 -2.40625 2.171875 -2.523438 2.171875 -2.640625 C 2.171875 -2.835938 2.101562 -2.992188 1.96875 -3.109375 C 1.832031 -3.234375 1.65625 -3.296875 1.4375 -3.296875 C 1.28125 -3.296875 1.113281 -3.269531 0.9375 -3.21875 C 0.769531 -3.164062 0.585938 -3.082031 0.390625 -2.96875 L 0.390625 -3.46875 C 0.585938 -3.550781 0.769531 -3.613281 0.9375 -3.65625 C 1.113281 -3.695312 1.273438 -3.71875 1.421875 -3.71875 C 1.796875 -3.71875 2.09375 -3.617188 2.3125 -3.421875 C 2.539062 -3.234375 2.65625 -2.984375 2.65625 -2.671875 C 2.65625 -2.523438 2.628906 -2.382812 2.578125 -2.25 C 2.523438 -2.113281 2.421875 -1.953125 2.265625 -1.765625 C 2.222656 -1.722656 2.09375 -1.585938 1.875 -1.359375 C 1.664062 -1.128906 1.359375 -0.816406 0.953125 -0.421875 Z M 0.953125 -0.421875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-3\">\n<path style=\"stroke:none;\" d=\"M 1.890625 -3.21875 L 0.640625 -1.265625 L 1.890625 -1.265625 Z M 1.765625 -3.640625 L 2.375 -3.640625 L 2.375 -1.265625 L 2.90625 -1.265625 L 2.90625 -0.859375 L 2.375 -0.859375 L 2.375 0 L 1.890625 0 L 1.890625 -0.859375 L 0.25 -0.859375 L 0.25 -1.328125 Z M 1.765625 -3.640625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-4\">\n<path style=\"stroke:none;\" d=\"M 0.546875 -3.640625 L 2.46875 -3.640625 L 2.46875 -3.234375 L 0.984375 -3.234375 L 0.984375 -2.34375 C 1.054688 -2.363281 1.128906 -2.378906 1.203125 -2.390625 C 1.273438 -2.398438 1.347656 -2.40625 1.421875 -2.40625 C 1.828125 -2.40625 2.148438 -2.289062 2.390625 -2.0625 C 2.628906 -1.84375 2.75 -1.546875 2.75 -1.171875 C 2.75 -0.773438 2.625 -0.46875 2.375 -0.25 C 2.132812 -0.03125 1.789062 0.078125 1.34375 0.078125 C 1.1875 0.078125 1.03125 0.0625 0.875 0.03125 C 0.71875 0.0078125 0.554688 -0.0234375 0.390625 -0.078125 L 0.390625 -0.578125 C 0.535156 -0.503906 0.6875 -0.445312 0.84375 -0.40625 C 1 -0.363281 1.160156 -0.34375 1.328125 -0.34375 C 1.617188 -0.34375 1.84375 -0.414062 2 -0.5625 C 2.164062 -0.707031 2.25 -0.910156 2.25 -1.171875 C 2.25 -1.421875 2.164062 -1.617188 2 -1.765625 C 1.84375 -1.921875 1.617188 -2 1.328125 -2 C 1.203125 -2 1.070312 -1.984375 0.9375 -1.953125 C 0.8125 -1.921875 0.679688 -1.875 0.546875 -1.8125 Z M 0.546875 -3.640625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph1-5\">\n<path style=\"stroke:none;\" d=\"M 1.65625 -2.015625 C 1.425781 -2.015625 1.25 -1.9375 1.125 -1.78125 C 1 -1.632812 0.9375 -1.429688 0.9375 -1.171875 C 0.9375 -0.910156 1 -0.703125 1.125 -0.546875 C 1.25 -0.390625 1.425781 -0.3125 1.65625 -0.3125 C 1.875 -0.3125 2.046875 -0.390625 2.171875 -0.546875 C 2.304688 -0.703125 2.375 -0.910156 2.375 -1.171875 C 2.375 -1.429688 2.304688 -1.632812 2.171875 -1.78125 C 2.046875 -1.9375 1.875 -2.015625 1.65625 -2.015625 Z M 2.625 -3.5625 L 2.625 -3.109375 C 2.5 -3.171875 2.375 -3.21875 2.25 -3.25 C 2.125 -3.28125 2 -3.296875 1.875 -3.296875 C 1.550781 -3.296875 1.300781 -3.1875 1.125 -2.96875 C 0.957031 -2.75 0.863281 -2.414062 0.84375 -1.96875 C 0.9375 -2.113281 1.054688 -2.222656 1.203125 -2.296875 C 1.347656 -2.367188 1.507812 -2.40625 1.6875 -2.40625 C 2.050781 -2.40625 2.335938 -2.296875 2.546875 -2.078125 C 2.753906 -1.859375 2.859375 -1.554688 2.859375 -1.171875 C 2.859375 -0.796875 2.75 -0.492188 2.53125 -0.265625 C 2.3125 -0.0351562 2.019531 0.078125 1.65625 0.078125 C 1.226562 0.078125 0.898438 -0.0820312 0.671875 -0.40625 C 0.453125 -0.738281 0.34375 -1.207031 0.34375 -1.8125 C 0.34375 -2.394531 0.476562 -2.859375 0.75 -3.203125 C 1.03125 -3.546875 1.398438 -3.71875 1.859375 -3.71875 C 1.984375 -3.71875 2.109375 -3.703125 2.234375 -3.671875 C 2.359375 -3.648438 2.488281 -3.613281 2.625 -3.5625 Z M 2.625 -3.5625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-0\">\n<path style=\"stroke:none;\" d=\"M 2.125 -0.59375 L -8.46875 -0.59375 L -8.46875 -6.59375 L 2.125 -6.59375 Z M 1.453125 -1.265625 L 1.453125 -5.9375 L -7.78125 -5.9375 L -7.78125 -1.265625 Z M 1.453125 -1.265625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-1\">\n<path style=\"stroke:none;\" d=\"M -4.171875 -2.359375 L -0.96875 -2.359375 L -0.96875 -4.265625 C -0.96875 -4.898438 -1.097656 -5.367188 -1.359375 -5.671875 C -1.628906 -5.984375 -2.035156 -6.140625 -2.578125 -6.140625 C -3.128906 -6.140625 -3.53125 -5.984375 -3.78125 -5.671875 C -4.039062 -5.367188 -4.171875 -4.898438 -4.171875 -4.265625 Z M -7.78125 -2.359375 L -5.140625 -2.359375 L -5.140625 -4.109375 C -5.140625 -4.691406 -5.25 -5.125 -5.46875 -5.40625 C -5.6875 -5.6875 -6.015625 -5.828125 -6.453125 -5.828125 C -6.898438 -5.828125 -7.234375 -5.6875 -7.453125 -5.40625 C -7.671875 -5.125 -7.78125 -4.691406 -7.78125 -4.109375 Z M -8.75 -1.171875 L -8.75 -4.203125 C -8.75 -5.109375 -8.5625 -5.800781 -8.1875 -6.28125 C -7.8125 -6.769531 -7.28125 -7.015625 -6.59375 -7.015625 C -6.050781 -7.015625 -5.617188 -6.890625 -5.296875 -6.640625 C -4.984375 -6.390625 -4.789062 -6.023438 -4.71875 -5.546875 C -4.59375 -6.128906 -4.332031 -6.582031 -3.9375 -6.90625 C -3.539062 -7.226562 -3.046875 -7.390625 -2.453125 -7.390625 C -1.671875 -7.390625 -1.066406 -7.125 -0.640625 -6.59375 C -0.210938 -6.0625 0 -5.300781 0 -4.3125 L 0 -1.171875 Z M -8.75 -1.171875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-2\">\n<path style=\"stroke:none;\" d=\"M -3.546875 -6.75 L -3.03125 -6.75 L -3.03125 -1.78125 C -2.28125 -1.832031 -1.710938 -2.054688 -1.328125 -2.453125 C -0.941406 -2.859375 -0.75 -3.414062 -0.75 -4.125 C -0.75 -4.539062 -0.796875 -4.941406 -0.890625 -5.328125 C -0.992188 -5.722656 -1.148438 -6.113281 -1.359375 -6.5 L -0.328125 -6.5 C -0.171875 -6.101562 -0.0507812 -5.703125 0.03125 -5.296875 C 0.125 -4.890625 0.171875 -4.476562 0.171875 -4.0625 C 0.171875 -3.019531 -0.128906 -2.191406 -0.734375 -1.578125 C -1.347656 -0.960938 -2.175781 -0.65625 -3.21875 -0.65625 C -4.289062 -0.65625 -5.140625 -0.945312 -5.765625 -1.53125 C -6.398438 -2.113281 -6.71875 -2.894531 -6.71875 -3.875 C -6.71875 -4.757812 -6.429688 -5.457031 -5.859375 -5.96875 C -5.296875 -6.488281 -4.523438 -6.75 -3.546875 -6.75 Z M -3.875 -5.671875 C -4.457031 -5.660156 -4.925781 -5.492188 -5.28125 -5.171875 C -5.632812 -4.847656 -5.8125 -4.421875 -5.8125 -3.890625 C -5.8125 -3.285156 -5.640625 -2.800781 -5.296875 -2.4375 C -4.953125 -2.082031 -4.472656 -1.878906 -3.859375 -1.828125 Z M -3.875 -5.671875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-3\">\n<path style=\"stroke:none;\" d=\"M -3.296875 -4.109375 C -3.296875 -3.242188 -3.195312 -2.640625 -3 -2.296875 C -2.800781 -1.960938 -2.460938 -1.796875 -1.984375 -1.796875 C -1.597656 -1.796875 -1.289062 -1.921875 -1.0625 -2.171875 C -0.84375 -2.429688 -0.734375 -2.773438 -0.734375 -3.203125 C -0.734375 -3.804688 -0.941406 -4.285156 -1.359375 -4.640625 C -1.785156 -5.003906 -2.351562 -5.1875 -3.0625 -5.1875 L -3.296875 -5.1875 Z M -3.75 -6.265625 L 0 -6.265625 L 0 -5.1875 L -1 -5.1875 C -0.601562 -4.9375 -0.304688 -4.628906 -0.109375 -4.265625 C 0.078125 -3.898438 0.171875 -3.453125 0.171875 -2.921875 C 0.171875 -2.242188 -0.015625 -1.707031 -0.390625 -1.3125 C -0.773438 -0.914062 -1.28125 -0.71875 -1.90625 -0.71875 C -2.644531 -0.71875 -3.203125 -0.960938 -3.578125 -1.453125 C -3.953125 -1.953125 -4.140625 -2.691406 -4.140625 -3.671875 L -4.140625 -5.1875 L -4.25 -5.1875 C -4.75 -5.1875 -5.132812 -5.019531 -5.40625 -4.6875 C -5.675781 -4.363281 -5.8125 -3.910156 -5.8125 -3.328125 C -5.8125 -2.953125 -5.765625 -2.582031 -5.671875 -2.21875 C -5.578125 -1.863281 -5.441406 -1.523438 -5.265625 -1.203125 L -6.265625 -1.203125 C -6.421875 -1.597656 -6.535156 -1.976562 -6.609375 -2.34375 C -6.679688 -2.71875 -6.71875 -3.082031 -6.71875 -3.4375 C -6.71875 -4.382812 -6.472656 -5.09375 -5.984375 -5.5625 C -5.492188 -6.03125 -4.75 -6.265625 -3.75 -6.265625 Z M -3.75 -6.265625 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-4\">\n<path style=\"stroke:none;\" d=\"M -3.359375 -5.453125 C -4.140625 -5.453125 -4.742188 -5.289062 -5.171875 -4.96875 C -5.597656 -4.644531 -5.8125 -4.191406 -5.8125 -3.609375 C -5.8125 -3.035156 -5.597656 -2.585938 -5.171875 -2.265625 C -4.742188 -1.941406 -4.140625 -1.78125 -3.359375 -1.78125 C -2.578125 -1.78125 -1.972656 -1.941406 -1.546875 -2.265625 C -1.117188 -2.585938 -0.90625 -3.035156 -0.90625 -3.609375 C -0.90625 -4.191406 -1.117188 -4.644531 -1.546875 -4.96875 C -1.972656 -5.289062 -2.578125 -5.453125 -3.359375 -5.453125 Z M -0.8125 -6.53125 C 0.300781 -6.53125 1.128906 -6.28125 1.671875 -5.78125 C 2.222656 -5.289062 2.5 -4.53125 2.5 -3.5 C 2.5 -3.125 2.46875 -2.765625 2.40625 -2.421875 C 2.351562 -2.085938 2.269531 -1.765625 2.15625 -1.453125 L 1.109375 -1.453125 C 1.273438 -1.765625 1.398438 -2.078125 1.484375 -2.390625 C 1.566406 -2.703125 1.609375 -3.015625 1.609375 -3.328125 C 1.609375 -4.035156 1.421875 -4.566406 1.046875 -4.921875 C 0.679688 -5.273438 0.125 -5.453125 -0.625 -5.453125 L -1.15625 -5.453125 C -0.769531 -5.222656 -0.476562 -4.9375 -0.28125 -4.59375 C -0.09375 -4.25 0 -3.832031 0 -3.34375 C 0 -2.539062 -0.304688 -1.890625 -0.921875 -1.390625 C -1.535156 -0.898438 -2.347656 -0.65625 -3.359375 -0.65625 C -4.367188 -0.65625 -5.179688 -0.898438 -5.796875 -1.390625 C -6.410156 -1.890625 -6.71875 -2.539062 -6.71875 -3.34375 C -6.71875 -3.832031 -6.617188 -4.25 -6.421875 -4.59375 C -6.234375 -4.9375 -5.945312 -5.222656 -5.5625 -5.453125 L -6.5625 -5.453125 L -6.5625 -6.53125 Z M -0.8125 -6.53125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-5\">\n<path style=\"stroke:none;\" d=\"M -9.125 -1.125 L -9.125 -2.203125 L 0 -2.203125 L 0 -1.125 Z M -9.125 -1.125 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-6\">\n<path style=\"stroke:none;\" d=\"M -5.8125 -3.671875 C -5.8125 -3.097656 -5.582031 -2.640625 -5.125 -2.296875 C -4.675781 -1.960938 -4.0625 -1.796875 -3.28125 -1.796875 C -2.488281 -1.796875 -1.867188 -1.960938 -1.421875 -2.296875 C -0.972656 -2.628906 -0.75 -3.085938 -0.75 -3.671875 C -0.75 -4.242188 -0.972656 -4.695312 -1.421875 -5.03125 C -1.878906 -5.375 -2.5 -5.546875 -3.28125 -5.546875 C -4.050781 -5.546875 -4.664062 -5.375 -5.125 -5.03125 C -5.582031 -4.695312 -5.8125 -4.242188 -5.8125 -3.671875 Z M -6.71875 -3.671875 C -6.71875 -4.609375 -6.410156 -5.34375 -5.796875 -5.875 C -5.191406 -6.414062 -4.351562 -6.6875 -3.28125 -6.6875 C -2.207031 -6.6875 -1.363281 -6.414062 -0.75 -5.875 C -0.132812 -5.34375 0.171875 -4.609375 0.171875 -3.671875 C 0.171875 -2.734375 -0.132812 -1.992188 -0.75 -1.453125 C -1.363281 -0.921875 -2.207031 -0.65625 -3.28125 -0.65625 C -4.351562 -0.65625 -5.191406 -0.921875 -5.796875 -1.453125 C -6.410156 -1.992188 -6.71875 -2.734375 -6.71875 -3.671875 Z M -6.71875 -3.671875 \"/>\n</symbol>\n<symbol overflow=\"visible\" id=\"glyph2-7\">\n<path style=\"stroke:none;\" d=\"M -3.96875 -6.59375 L 0 -6.59375 L 0 -5.515625 L -3.921875 -5.515625 C -4.546875 -5.515625 -5.007812 -5.390625 -5.3125 -5.140625 C -5.625 -4.898438 -5.78125 -4.539062 -5.78125 -4.0625 C -5.78125 -3.476562 -5.59375 -3.015625 -5.21875 -2.671875 C -4.851562 -2.335938 -4.347656 -2.171875 -3.703125 -2.171875 L 0 -2.171875 L 0 -1.09375 L -6.5625 -1.09375 L -6.5625 -2.171875 L -5.546875 -2.171875 C -5.941406 -2.429688 -6.234375 -2.734375 -6.421875 -3.078125 C -6.617188 -3.429688 -6.71875 -3.835938 -6.71875 -4.296875 C -6.71875 -5.046875 -6.484375 -5.613281 -6.015625 -6 C -5.554688 -6.394531 -4.875 -6.59375 -3.96875 -6.59375 Z M -3.96875 -6.59375 \"/>\n</symbol>\n</g>\n<linearGradient id=\"linear0\" gradientUnits=\"userSpaceOnUse\" x1=\"63\" y1=\"405\" x2=\"90\" y2=\"369\" gradientTransform=\"matrix(1.242165,0,0,1.243523,11.179487,-318.963731)\">\n<stop offset=\"0\" style=\"stop-color:rgb(20%,20%,20%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(27.45098%,27.45098%,27.45098%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(17.254902%,17.254902%,17.254902%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear1\" gradientUnits=\"userSpaceOnUse\" x1=\"135\" y1=\"387\" x2=\"189\" y2=\"324\" gradientTransform=\"matrix(1.242165,0,0,1.243523,11.179487,-318.963731)\">\n<stop offset=\"0\" style=\"stop-color:rgb(20%,20%,20%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(27.45098%,27.45098%,27.45098%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(17.254902%,17.254902%,17.254902%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear2\" gradientUnits=\"userSpaceOnUse\" x1=\"81\" y1=\"324\" x2=\"117\" y2=\"279\" gradientTransform=\"matrix(1.242165,0,0,1.243523,11.179487,-318.963731)\">\n<stop offset=\"0\" style=\"stop-color:rgb(20%,20%,20%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(27.45098%,27.45098%,27.45098%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(17.254902%,17.254902%,17.254902%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear3\" gradientUnits=\"userSpaceOnUse\" x1=\"211.5\" y1=\"391.5\" x2=\"234\" y2=\"333\" gradientTransform=\"matrix(1.242165,0,0,1.243523,11.179487,-318.963731)\">\n<stop offset=\"0\" style=\"stop-color:rgb(20%,20%,20%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(27.45098%,27.45098%,27.45098%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(17.254902%,17.254902%,17.254902%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear4\" gradientUnits=\"userSpaceOnUse\" x1=\"211.5\" y1=\"72\" x2=\"229.5\" y2=\"27\" gradientTransform=\"matrix(1.242165,0,0,1.243523,11.179487,0)\">\n<stop offset=\"0\" style=\"stop-color:rgb(20%,20%,20%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(27.45098%,27.45098%,27.45098%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(17.254902%,17.254902%,17.254902%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear5\" gradientUnits=\"userSpaceOnUse\" x1=\"274.5\" y1=\"157.5\" x2=\"292.5\" y2=\"108\" gradientTransform=\"matrix(1.242165,0,0,1.243523,11.179487,0)\">\n<stop offset=\"0\" style=\"stop-color:rgb(70.196078%,70.196078%,70.196078%);stop-opacity:1;\"/>\n<stop offset=\"0.25\" style=\"stop-color:rgb(57.647059%,57.647059%,57.647059%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(82.745098%,82.745098%,82.745098%);stop-opacity:1;\"/>\n<stop offset=\"0.75\" style=\"stop-color:rgb(58.823529%,58.823529%,58.823529%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(56.470588%,56.470588%,56.470588%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear6\" gradientUnits=\"userSpaceOnUse\" x1=\"94.5\" y1=\"94.5\" x2=\"103.5\" y2=\"76.5\" gradientTransform=\"matrix(1,0,0,1,9,0)\">\n<stop offset=\"0\" style=\"stop-color:rgb(20%,20%,20%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(27.45098%,27.45098%,27.45098%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(17.254902%,17.254902%,17.254902%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear7\" gradientUnits=\"userSpaceOnUse\" x1=\"0\" y1=\"387\" x2=\"63\" y2=\"315\" gradientTransform=\"matrix(1.242165,0,0,1.243523,11.179487,-318.963731)\">\n<stop offset=\"0\" style=\"stop-color:rgb(70.196078%,70.196078%,70.196078%);stop-opacity:1;\"/>\n<stop offset=\"0.25\" style=\"stop-color:rgb(57.647059%,57.647059%,57.647059%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(82.745098%,82.745098%,82.745098%);stop-opacity:1;\"/>\n<stop offset=\"0.75\" style=\"stop-color:rgb(58.823529%,58.823529%,58.823529%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(56.470588%,56.470588%,56.470588%);stop-opacity:1;\"/>\n</linearGradient>\n<linearGradient id=\"linear8\" gradientUnits=\"userSpaceOnUse\" x1=\"18\" y1=\"427.5\" x2=\"18\" y2=\"396\" gradientTransform=\"matrix(1.242165,0,0,1.165803,11.179487,-285.563465)\">\n<stop offset=\"0\" style=\"stop-color:rgb(20%,20%,20%);stop-opacity:1;\"/>\n<stop offset=\"0.25\" style=\"stop-color:rgb(29.411765%,27.843137%,27.843137%);stop-opacity:1;\"/>\n<stop offset=\"0.5\" style=\"stop-color:rgb(53.72549%,53.72549%,53.72549%);stop-opacity:1;\"/>\n<stop offset=\"0.75\" style=\"stop-color:rgb(33.72549%,33.72549%,33.72549%);stop-opacity:1;\"/>\n<stop offset=\"1\" style=\"stop-color:rgb(17.254902%,17.254902%,17.254902%);stop-opacity:1;\"/>\n</linearGradient>\n</defs>\n<g id=\"surface3\">\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(10.196078%,10.196078%,10.196078%);fill-opacity:1;\" d=\"M 39.128906 0 C 23.691406 0 11.179688 12.527344 11.179688 27.980469 L 11.179688 212.640625 C 11.179688 228.09375 23.691406 240.621094 39.128906 240.621094 L 335.382812 240.621094 C 366.257812 240.621094 391.28125 215.566406 391.28125 184.664062 L 391.28125 55.957031 C 391.28125 25.054688 366.257812 0 335.382812 0 Z M 75.460938 5.597656 C 80.09375 5.597656 83.847656 9.355469 83.847656 13.988281 C 83.847656 18.625 80.09375 22.382812 75.460938 22.382812 C 70.832031 22.382812 67.078125 18.625 67.078125 13.988281 C 67.078125 9.355469 70.832031 5.597656 75.460938 5.597656 Z M 366.128906 19.585938 C 370.757812 19.585938 374.511719 23.34375 374.511719 27.980469 C 374.511719 32.613281 370.757812 36.375 366.128906 36.375 C 361.496094 36.375 357.742188 32.613281 357.742188 27.980469 C 357.742188 23.34375 361.496094 19.585938 366.128906 19.585938 Z M 366.128906 204.25 C 370.757812 204.25 374.511719 208.007812 374.511719 212.640625 C 374.511719 217.277344 370.757812 221.035156 366.128906 221.035156 C 361.496094 221.035156 357.742188 217.277344 357.742188 212.640625 C 357.742188 208.007812 361.496094 204.25 366.128906 204.25 Z M 75.460938 218.238281 C 80.09375 218.238281 83.847656 221.996094 83.847656 226.632812 C 83.847656 231.269531 80.09375 235.027344 75.460938 235.027344 C 70.832031 235.027344 67.078125 231.269531 67.078125 226.632812 C 67.078125 221.996094 70.832031 218.238281 75.460938 218.238281 Z M 75.460938 218.238281 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(86.27451%,86.27451%,86.27451%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 269.998549 116.999967 L 310.499274 116.999967 L 310.499274 152.998991 L 269.998549 152.998991 Z M 269.998549 116.999967 \" transform=\"matrix(1.242165,0,0,1.243523,0,0)\"/>\n<path style=\"fill:none;stroke-width:2.277;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(100%,85.490196%,41.176471%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 13.50121 186.750553 C 13.50121 190.479248 10.479143 193.501156 6.749516 193.501156 C 3.023034 193.501156 0.000967603 190.479248 0.000967603 186.750553 C 0.000967603 183.021859 3.023034 179.999951 6.749516 179.999951 C 10.479143 179.999951 13.50121 183.021859 13.50121 186.750553 Z M 13.50121 186.750553 \" transform=\"matrix(1.242165,0,0,1.243523,67.076923,-5.595855)\"/>\n<path style=\"fill:none;stroke-width:2.277;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(100%,85.490196%,41.176471%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 13.50121 186.74891 C 13.50121 190.477604 10.479143 193.499512 6.749516 193.499512 C 3.023034 193.499512 0.000967603 190.477604 0.000967603 186.74891 C 0.000967603 183.023356 3.023034 180.001449 6.749516 180.001449 C 10.479143 180.001449 13.50121 183.023356 13.50121 186.74891 Z M 13.50121 186.74891 \" transform=\"matrix(1.242165,0,0,1.243523,67.076923,-218.238342)\"/>\n<path style=\"fill:none;stroke-width:2.277;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(100%,85.490196%,41.176471%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 13.499113 186.75096 C 13.499113 190.476514 10.477046 193.501563 6.750564 193.501563 C 3.020938 193.501563 -0.00112887 190.476514 -0.00112887 186.75096 C -0.00112887 183.022266 3.020938 180.000358 6.750564 180.000358 C 10.477046 180.000358 13.499113 183.022266 13.499113 186.75096 Z M 13.499113 186.75096 \" transform=\"matrix(1.242165,0,0,1.243523,357.74359,-204.248705)\"/>\n<path style=\"fill:none;stroke-width:2.277;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(100%,85.490196%,41.176471%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 13.499113 186.748503 C 13.499113 190.477197 10.477046 193.499105 6.750564 193.499105 C 3.020938 193.499105 -0.00112887 190.477197 -0.00112887 186.748503 C -0.00112887 183.022949 3.020938 180.001042 6.750564 180.001042 C 10.477046 180.001042 13.499113 183.022949 13.499113 186.748503 Z M 13.499113 186.748503 \" transform=\"matrix(1.242165,0,0,1.243523,357.74359,-19.585492)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear0);\" d=\"M 100.617188 156.683594 L 128.5625 156.683594 L 128.5625 184.664062 L 100.617188 184.664062 Z M 100.617188 156.683594 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 178.871094 78.34375 L 245.949219 78.34375 L 245.949219 145.492188 L 178.871094 145.492188 Z M 178.871094 78.34375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear1);\" d=\"M 178.871094 78.34375 L 245.949219 78.34375 L 245.949219 145.492188 L 178.871094 145.492188 Z M 178.871094 78.34375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 111.792969 31.335938 L 173.28125 31.335938 L 173.28125 81.699219 L 111.792969 81.699219 Z M 111.792969 31.335938 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear2);\" d=\"M 111.792969 31.335938 L 173.28125 31.335938 L 173.28125 81.699219 L 111.792969 81.699219 Z M 111.792969 31.335938 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear3);\" d=\"M 271.101562 100.726562 L 304.640625 100.726562 L 304.640625 162.28125 L 271.101562 162.28125 Z M 271.101562 100.726562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 268.308594 44.765625 L 307.4375 44.765625 L 307.4375 83.9375 L 268.308594 83.9375 Z M 268.308594 44.765625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear4);\" d=\"M 268.308594 44.765625 L 307.4375 44.765625 L 307.4375 83.9375 L 268.308594 83.9375 Z M 268.308594 44.765625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(70.196078%,70.196078%,70.196078%);fill-opacity:1;\" d=\"M 329.792969 139.894531 L 329.792969 195.855469 L 391.28125 195.855469 L 391.28125 139.894531 Z M 363.332031 145.492188 L 385.691406 148.289062 L 385.691406 159.480469 L 363.332031 162.28125 L 363.332031 159.480469 L 380.101562 156.683594 L 380.101562 151.089844 L 363.332031 148.289062 Z M 363.332031 173.472656 L 385.691406 176.269531 L 385.691406 187.460938 L 363.332031 190.257812 L 363.332031 187.460938 L 380.101562 184.664062 L 380.101562 179.066406 L 363.332031 176.269531 Z M 363.332031 173.472656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear5);\" d=\"M 329.792969 139.894531 L 329.792969 195.855469 L 391.28125 195.855469 L 391.28125 139.894531 Z M 363.332031 145.492188 L 385.691406 148.289062 L 385.691406 159.480469 L 363.332031 162.28125 L 363.332031 159.480469 L 380.101562 156.683594 L 380.101562 151.089844 L 363.332031 148.289062 Z M 363.332031 173.472656 L 385.691406 176.269531 L 385.691406 187.460938 L 363.332031 190.257812 L 363.332031 187.460938 L 380.101562 184.664062 L 380.101562 179.066406 L 363.332031 176.269531 Z M 363.332031 173.472656 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 98.998629 76.499495 L 114.750484 76.499495 L 114.750484 92.249854 L 98.998629 92.249854 Z M 98.998629 76.499495 \" transform=\"matrix(1.242165,0,0,1.243523,0,0)\"/>\n<path style=\"fill-rule:nonzero;fill:url(#linear6);stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 98.998629 76.499495 L 114.750484 76.499495 L 114.750484 92.249854 L 98.998629 92.249854 Z M 98.998629 76.499495 \" transform=\"matrix(1.242165,0,0,1.243523,0,0)\"/>\n<path style=\"fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 193.05079 164.251042 L 198.450258 164.251042 C 199.443987 164.251042 200.249032 165.055208 200.249032 166.050993 L 200.249032 171.450846 C 200.249032 172.44349 199.443987 173.250798 198.450258 173.250798 L 193.05079 173.250798 C 192.057062 173.250798 191.248871 172.44349 191.248871 171.450846 L 191.248871 166.050993 C 191.248871 165.055208 192.057062 164.251042 193.05079 164.251042 Z M 193.05079 164.251042 \" transform=\"matrix(1.242165,0,0,1.243523,11.179487,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,86.27451%,45.490196%);fill-opacity:1;\" d=\"M 252.65625 208.164062 L 256.011719 208.164062 L 256.011719 211.523438 L 252.65625 211.523438 Z M 252.65625 208.164062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.352941;\" d=\"M 252.65625 211.523438 L 252.65625 208.164062 L 256.011719 208.164062 L 255.453125 208.726562 L 253.214844 208.726562 L 253.214844 210.964844 Z M 252.65625 211.523438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.215686;\" d=\"M 256.011719 208.164062 L 256.011719 211.523438 L 252.65625 211.523438 L 253.214844 210.964844 L 255.453125 210.964844 L 255.453125 208.726562 Z M 256.011719 208.164062 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 193.049827 164.251042 L 198.449294 164.251042 C 199.443023 164.251042 200.251213 165.055208 200.251213 166.050993 L 200.251213 171.450846 C 200.251213 172.44349 199.443023 173.250798 198.449294 173.250798 L 193.049827 173.250798 C 192.056098 173.250798 191.251052 172.44349 191.251052 171.450846 L 191.251052 166.050993 C 191.251052 165.055208 192.056098 164.251042 193.049827 164.251042 Z M 193.049827 164.251042 \" transform=\"matrix(1.242165,0,0,1.243523,-0.0341595,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,86.27451%,45.490196%);fill-opacity:1;\" d=\"M 241.441406 208.164062 L 244.796875 208.164062 L 244.796875 211.523438 L 241.441406 211.523438 Z M 241.441406 208.164062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.352941;\" d=\"M 241.441406 211.523438 L 241.441406 208.164062 L 244.796875 208.164062 L 244.238281 208.726562 L 242 208.726562 L 242 210.964844 Z M 241.441406 211.523438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.215686;\" d=\"M 244.796875 208.164062 L 244.796875 211.523438 L 241.441406 211.523438 L 242 210.964844 L 244.238281 210.964844 L 244.238281 208.726562 Z M 244.796875 208.164062 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 193.050468 164.251042 L 198.449935 164.251042 C 199.443664 164.251042 200.24871 165.055208 200.24871 166.050993 L 200.24871 171.450846 C 200.24871 172.44349 199.443664 173.250798 198.449935 173.250798 L 193.050468 173.250798 C 192.056739 173.250798 191.248549 172.44349 191.248549 171.450846 L 191.248549 166.050993 C 191.248549 165.055208 192.056739 164.251042 193.050468 164.251042 Z M 193.050468 164.251042 \" transform=\"matrix(1.242165,0,0,1.243523,-11.179487,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,86.27451%,45.490196%);fill-opacity:1;\" d=\"M 230.296875 208.164062 L 233.652344 208.164062 L 233.652344 211.523438 L 230.296875 211.523438 Z M 230.296875 208.164062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.352941;\" d=\"M 230.296875 211.523438 L 230.296875 208.164062 L 233.652344 208.164062 L 233.09375 208.726562 L 230.855469 208.726562 L 230.855469 210.964844 Z M 230.296875 211.523438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.215686;\" d=\"M 233.652344 208.164062 L 233.652344 211.523438 L 230.296875 211.523438 L 230.855469 210.964844 L 233.09375 210.964844 L 233.09375 208.726562 Z M 233.652344 208.164062 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 193.049504 164.251042 L 198.448972 164.251042 C 199.4427 164.251042 200.250891 165.055208 200.250891 166.050993 L 200.250891 171.450846 C 200.250891 172.44349 199.4427 173.250798 198.448972 173.250798 L 193.049504 173.250798 C 192.055776 173.250798 191.25073 172.44349 191.25073 171.450846 L 191.25073 166.050993 C 191.25073 165.055208 192.055776 164.251042 193.049504 164.251042 Z M 193.049504 164.251042 \" transform=\"matrix(1.242165,0,0,1.243523,-22.393134,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,86.27451%,45.490196%);fill-opacity:1;\" d=\"M 219.082031 208.164062 L 222.4375 208.164062 L 222.4375 211.523438 L 219.082031 211.523438 Z M 219.082031 208.164062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.352941;\" d=\"M 219.082031 211.523438 L 219.082031 208.164062 L 222.4375 208.164062 L 221.878906 208.726562 L 219.644531 208.726562 L 219.644531 210.964844 Z M 219.082031 211.523438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.215686;\" d=\"M 222.4375 208.164062 L 222.4375 211.523438 L 219.082031 211.523438 L 219.644531 210.964844 L 221.878906 210.964844 L 221.878906 208.726562 Z M 222.4375 208.164062 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 193.050145 164.251042 L 198.449613 164.251042 C 199.443341 164.251042 200.251532 165.055208 200.251532 166.050993 L 200.251532 171.450846 C 200.251532 172.44349 199.443341 173.250798 198.449613 173.250798 L 193.050145 173.250798 C 192.056417 173.250798 191.251371 172.44349 191.251371 171.450846 L 191.251371 166.050993 C 191.251371 165.055208 192.056417 164.251042 193.050145 164.251042 Z M 193.050145 164.251042 \" transform=\"matrix(1.242165,0,0,1.243523,-33.538462,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,86.27451%,45.490196%);fill-opacity:1;\" d=\"M 207.9375 208.164062 L 211.292969 208.164062 L 211.292969 211.523438 L 207.9375 211.523438 Z M 207.9375 208.164062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.352941;\" d=\"M 207.9375 211.523438 L 207.9375 208.164062 L 211.292969 208.164062 L 210.734375 208.726562 L 208.496094 208.726562 L 208.496094 210.964844 Z M 207.9375 211.523438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.215686;\" d=\"M 211.292969 208.164062 L 211.292969 211.523438 L 207.9375 211.523438 L 208.496094 210.964844 L 210.734375 210.964844 L 210.734375 208.726562 Z M 211.292969 208.164062 \"/>\n<path style=\"fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;stroke-width:0.09;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 193.049181 164.251042 L 198.448649 164.251042 C 199.445523 164.251042 200.250568 165.055208 200.250568 166.050993 L 200.250568 171.450846 C 200.250568 172.44349 199.445523 173.250798 198.448649 173.250798 L 193.049181 173.250798 C 192.055453 173.250798 191.250407 172.44349 191.250407 171.450846 L 191.250407 166.050993 C 191.250407 165.055208 192.055453 164.251042 193.049181 164.251042 Z M 193.049181 164.251042 \" transform=\"matrix(1.242165,0,0,1.243523,-44.752108,0)\"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,86.27451%,45.490196%);fill-opacity:1;\" d=\"M 196.726562 208.164062 L 200.078125 208.164062 L 200.078125 211.523438 L 196.726562 211.523438 Z M 196.726562 208.164062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.352941;\" d=\"M 196.726562 211.523438 L 196.726562 208.164062 L 200.078125 208.164062 L 199.519531 208.726562 L 197.285156 208.726562 L 197.285156 210.964844 Z M 196.726562 211.523438 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.215686;\" d=\"M 200.078125 208.164062 L 200.078125 211.523438 L 196.726562 211.523438 L 197.285156 210.964844 L 199.519531 210.964844 L 199.519531 208.726562 Z M 200.078125 208.164062 \"/>\n<g style=\"fill:rgb(30.196078%,30.196078%,30.196078%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph0-1\" x=\"91.113281\" y=\"214.322761\"/>\n  <use xlink:href=\"#glyph0-2\" x=\"97.143363\" y=\"214.322761\"/>\n</g>\n<g style=\"fill:rgb(30.196078%,30.196078%,30.196078%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph0-1\" x=\"91.113281\" y=\"34.135261\"/>\n  <use xlink:href=\"#glyph0-3\" x=\"97.143363\" y=\"34.135261\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-1\" x=\"87.199219\" y=\"237.264289\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-2\" x=\"87.199219\" y=\"219.916633\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-3\" x=\"350.476562\" y=\"234.467414\"/>\n  <use xlink:href=\"#glyph1-4\" x=\"353.657185\" y=\"234.467414\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-3\" x=\"350.476562\" y=\"223.272102\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"353.657185\" y=\"223.272102\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-1\" x=\"87.199219\" y=\"24.619758\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-2\" x=\"87.199219\" y=\"7.272102\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-3\" x=\"350.476562\" y=\"21.818977\"/>\n  <use xlink:href=\"#glyph1-4\" x=\"353.657185\" y=\"21.818977\"/>\n</g>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph1-3\" x=\"350.476562\" y=\"10.631477\"/>\n  <use xlink:href=\"#glyph1-5\" x=\"353.657185\" y=\"10.631477\"/>\n</g>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 92.230469 226.632812 L 103.410156 226.632812 L 103.410156 237.824219 L 92.230469 237.824219 Z M 92.230469 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 96.144531 230.550781 L 99.496094 230.550781 L 99.496094 233.90625 L 96.144531 233.90625 Z M 96.144531 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 93.90625 236.144531 L 96.144531 233.90625 L 99.496094 233.90625 L 99.496094 230.550781 L 101.734375 228.3125 L 101.734375 236.144531 Z M 93.90625 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 101.734375 228.3125 L 99.496094 230.550781 L 96.144531 230.550781 L 96.144531 233.90625 L 93.90625 236.144531 L 93.90625 228.3125 Z M 101.734375 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 103.410156 226.632812 L 114.589844 226.632812 L 114.589844 237.824219 L 103.410156 237.824219 Z M 103.410156 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 107.324219 230.550781 L 110.675781 230.550781 L 110.675781 233.90625 L 107.324219 233.90625 Z M 107.324219 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 105.085938 236.144531 L 107.324219 233.90625 L 110.675781 233.90625 L 110.675781 230.550781 L 112.914062 228.3125 L 112.914062 236.144531 Z M 105.085938 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 112.914062 228.3125 L 110.675781 230.550781 L 107.324219 230.550781 L 107.324219 233.90625 L 105.085938 236.144531 L 105.085938 228.3125 Z M 112.914062 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 114.589844 226.632812 L 125.769531 226.632812 L 125.769531 237.824219 L 114.589844 237.824219 Z M 114.589844 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 118.503906 230.550781 L 121.855469 230.550781 L 121.855469 233.90625 L 118.503906 233.90625 Z M 118.503906 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 116.265625 236.144531 L 118.503906 233.90625 L 121.855469 233.90625 L 121.855469 230.550781 L 124.09375 228.3125 L 124.09375 236.144531 Z M 116.265625 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 124.09375 228.3125 L 121.855469 230.550781 L 118.503906 230.550781 L 118.503906 233.90625 L 116.265625 236.144531 L 116.265625 228.3125 Z M 124.09375 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 125.769531 226.632812 L 136.949219 226.632812 L 136.949219 237.824219 L 125.769531 237.824219 Z M 125.769531 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 129.683594 230.550781 L 133.035156 230.550781 L 133.035156 233.90625 L 129.683594 233.90625 Z M 129.683594 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 127.445312 236.144531 L 129.683594 233.90625 L 133.035156 233.90625 L 133.035156 230.550781 L 135.273438 228.3125 L 135.273438 236.144531 Z M 127.445312 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 135.273438 228.3125 L 133.035156 230.550781 L 129.683594 230.550781 L 129.683594 233.90625 L 127.445312 236.144531 L 127.445312 228.3125 Z M 135.273438 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 136.949219 226.632812 L 148.128906 226.632812 L 148.128906 237.824219 L 136.949219 237.824219 Z M 136.949219 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 140.863281 230.550781 L 144.214844 230.550781 L 144.214844 233.90625 L 140.863281 233.90625 Z M 140.863281 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 138.625 236.144531 L 140.863281 233.90625 L 144.214844 233.90625 L 144.214844 230.550781 L 146.453125 228.3125 L 146.453125 236.144531 Z M 138.625 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 146.453125 228.3125 L 144.214844 230.550781 L 140.863281 230.550781 L 140.863281 233.90625 L 138.625 236.144531 L 138.625 228.3125 Z M 146.453125 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 148.128906 226.632812 L 159.308594 226.632812 L 159.308594 237.824219 L 148.128906 237.824219 Z M 148.128906 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 152.042969 230.550781 L 155.394531 230.550781 L 155.394531 233.90625 L 152.042969 233.90625 Z M 152.042969 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 149.804688 236.144531 L 152.042969 233.90625 L 155.394531 233.90625 L 155.394531 230.550781 L 157.628906 228.3125 L 157.628906 236.144531 Z M 149.804688 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 157.628906 228.3125 L 155.394531 230.550781 L 152.042969 230.550781 L 152.042969 233.90625 L 149.804688 236.144531 L 149.804688 228.3125 Z M 157.628906 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 159.308594 226.632812 L 170.488281 226.632812 L 170.488281 237.824219 L 159.308594 237.824219 Z M 159.308594 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 163.21875 230.550781 L 166.574219 230.550781 L 166.574219 233.90625 L 163.21875 233.90625 Z M 163.21875 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 160.984375 236.144531 L 163.21875 233.90625 L 166.574219 233.90625 L 166.574219 230.550781 L 168.808594 228.3125 L 168.808594 236.144531 Z M 160.984375 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 168.808594 228.3125 L 166.574219 230.550781 L 163.21875 230.550781 L 163.21875 233.90625 L 160.984375 236.144531 L 160.984375 228.3125 Z M 168.808594 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 170.488281 226.632812 L 181.667969 226.632812 L 181.667969 237.824219 L 170.488281 237.824219 Z M 170.488281 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 174.398438 230.550781 L 177.753906 230.550781 L 177.753906 233.90625 L 174.398438 233.90625 Z M 174.398438 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 172.164062 236.144531 L 174.398438 233.90625 L 177.753906 233.90625 L 177.753906 230.550781 L 179.988281 228.3125 L 179.988281 236.144531 Z M 172.164062 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 179.988281 228.3125 L 177.753906 230.550781 L 174.398438 230.550781 L 174.398438 233.90625 L 172.164062 236.144531 L 172.164062 228.3125 Z M 179.988281 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 181.667969 226.632812 L 192.847656 226.632812 L 192.847656 237.824219 L 181.667969 237.824219 Z M 181.667969 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 185.578125 230.550781 L 188.933594 230.550781 L 188.933594 233.90625 L 185.578125 233.90625 Z M 185.578125 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 183.34375 236.144531 L 185.578125 233.90625 L 188.933594 233.90625 L 188.933594 230.550781 L 191.167969 228.3125 L 191.167969 236.144531 Z M 183.34375 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 191.167969 228.3125 L 188.933594 230.550781 L 185.578125 230.550781 L 185.578125 233.90625 L 183.34375 236.144531 L 183.34375 228.3125 Z M 191.167969 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 192.847656 226.632812 L 204.027344 226.632812 L 204.027344 237.824219 L 192.847656 237.824219 Z M 192.847656 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 196.757812 230.550781 L 200.113281 230.550781 L 200.113281 233.90625 L 196.757812 233.90625 Z M 196.757812 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 194.523438 236.144531 L 196.757812 233.90625 L 200.113281 233.90625 L 200.113281 230.550781 L 202.347656 228.3125 L 202.347656 236.144531 Z M 194.523438 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 202.347656 228.3125 L 200.113281 230.550781 L 196.757812 230.550781 L 196.757812 233.90625 L 194.523438 236.144531 L 194.523438 228.3125 Z M 202.347656 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 204.027344 226.632812 L 215.207031 226.632812 L 215.207031 237.824219 L 204.027344 237.824219 Z M 204.027344 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 207.9375 230.550781 L 211.292969 230.550781 L 211.292969 233.90625 L 207.9375 233.90625 Z M 207.9375 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 205.703125 236.144531 L 207.9375 233.90625 L 211.292969 233.90625 L 211.292969 230.550781 L 213.527344 228.3125 L 213.527344 236.144531 Z M 205.703125 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 213.527344 228.3125 L 211.292969 230.550781 L 207.9375 230.550781 L 207.9375 233.90625 L 205.703125 236.144531 L 205.703125 228.3125 Z M 213.527344 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 215.207031 226.632812 L 226.382812 226.632812 L 226.382812 237.824219 L 215.207031 237.824219 Z M 215.207031 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 219.117188 230.550781 L 222.472656 230.550781 L 222.472656 233.90625 L 219.117188 233.90625 Z M 219.117188 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 216.882812 236.144531 L 219.117188 233.90625 L 222.472656 233.90625 L 222.472656 230.550781 L 224.707031 228.3125 L 224.707031 236.144531 Z M 216.882812 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 224.707031 228.3125 L 222.472656 230.550781 L 219.117188 230.550781 L 219.117188 233.90625 L 216.882812 236.144531 L 216.882812 228.3125 Z M 224.707031 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 226.382812 226.632812 L 237.5625 226.632812 L 237.5625 237.824219 L 226.382812 237.824219 Z M 226.382812 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 230.296875 230.550781 L 233.652344 230.550781 L 233.652344 233.90625 L 230.296875 233.90625 Z M 230.296875 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 228.0625 236.144531 L 230.296875 233.90625 L 233.652344 233.90625 L 233.652344 230.550781 L 235.886719 228.3125 L 235.886719 236.144531 Z M 228.0625 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 235.886719 228.3125 L 233.652344 230.550781 L 230.296875 230.550781 L 230.296875 233.90625 L 228.0625 236.144531 L 228.0625 228.3125 Z M 235.886719 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 237.5625 226.632812 L 248.742188 226.632812 L 248.742188 237.824219 L 237.5625 237.824219 Z M 237.5625 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 241.476562 230.550781 L 244.832031 230.550781 L 244.832031 233.90625 L 241.476562 233.90625 Z M 241.476562 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 239.242188 236.144531 L 241.476562 233.90625 L 244.832031 233.90625 L 244.832031 230.550781 L 247.066406 228.3125 L 247.066406 236.144531 Z M 239.242188 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 247.066406 228.3125 L 244.832031 230.550781 L 241.476562 230.550781 L 241.476562 233.90625 L 239.242188 236.144531 L 239.242188 228.3125 Z M 247.066406 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 248.742188 226.632812 L 259.921875 226.632812 L 259.921875 237.824219 L 248.742188 237.824219 Z M 248.742188 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 252.65625 230.550781 L 256.011719 230.550781 L 256.011719 233.90625 L 252.65625 233.90625 Z M 252.65625 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 250.421875 236.144531 L 252.65625 233.90625 L 256.011719 233.90625 L 256.011719 230.550781 L 258.246094 228.3125 L 258.246094 236.144531 Z M 250.421875 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 258.246094 228.3125 L 256.011719 230.550781 L 252.65625 230.550781 L 252.65625 233.90625 L 250.421875 236.144531 L 250.421875 228.3125 Z M 258.246094 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 259.921875 226.632812 L 271.101562 226.632812 L 271.101562 237.824219 L 259.921875 237.824219 Z M 259.921875 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 263.835938 230.550781 L 267.191406 230.550781 L 267.191406 233.90625 L 263.835938 233.90625 Z M 263.835938 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 261.601562 236.144531 L 263.835938 233.90625 L 267.191406 233.90625 L 267.191406 230.550781 L 269.425781 228.3125 L 269.425781 236.144531 Z M 261.601562 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 269.425781 228.3125 L 267.191406 230.550781 L 263.835938 230.550781 L 263.835938 233.90625 L 261.601562 236.144531 L 261.601562 228.3125 Z M 269.425781 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 271.101562 226.632812 L 282.28125 226.632812 L 282.28125 237.824219 L 271.101562 237.824219 Z M 271.101562 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 275.015625 230.550781 L 278.371094 230.550781 L 278.371094 233.90625 L 275.015625 233.90625 Z M 275.015625 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 272.78125 236.144531 L 275.015625 233.90625 L 278.371094 233.90625 L 278.371094 230.550781 L 280.605469 228.3125 L 280.605469 236.144531 Z M 272.78125 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 280.605469 228.3125 L 278.371094 230.550781 L 275.015625 230.550781 L 275.015625 233.90625 L 272.78125 236.144531 L 272.78125 228.3125 Z M 280.605469 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 282.28125 226.632812 L 293.460938 226.632812 L 293.460938 237.824219 L 282.28125 237.824219 Z M 282.28125 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 286.195312 230.550781 L 289.546875 230.550781 L 289.546875 233.90625 L 286.195312 233.90625 Z M 286.195312 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 283.957031 236.144531 L 286.195312 233.90625 L 289.546875 233.90625 L 289.546875 230.550781 L 291.785156 228.3125 L 291.785156 236.144531 Z M 283.957031 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 291.785156 228.3125 L 289.546875 230.550781 L 286.195312 230.550781 L 286.195312 233.90625 L 283.957031 236.144531 L 283.957031 228.3125 Z M 291.785156 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 293.460938 226.632812 L 304.640625 226.632812 L 304.640625 237.824219 L 293.460938 237.824219 Z M 293.460938 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 297.375 230.550781 L 300.726562 230.550781 L 300.726562 233.90625 L 297.375 233.90625 Z M 297.375 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 295.136719 236.144531 L 297.375 233.90625 L 300.726562 233.90625 L 300.726562 230.550781 L 302.964844 228.3125 L 302.964844 236.144531 Z M 295.136719 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 302.964844 228.3125 L 300.726562 230.550781 L 297.375 230.550781 L 297.375 233.90625 L 295.136719 236.144531 L 295.136719 228.3125 Z M 302.964844 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 304.640625 226.632812 L 315.820312 226.632812 L 315.820312 237.824219 L 304.640625 237.824219 Z M 304.640625 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 308.554688 230.550781 L 311.90625 230.550781 L 311.90625 233.90625 L 308.554688 233.90625 Z M 308.554688 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 306.316406 236.144531 L 308.554688 233.90625 L 311.90625 233.90625 L 311.90625 230.550781 L 314.144531 228.3125 L 314.144531 236.144531 Z M 306.316406 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 314.144531 228.3125 L 311.90625 230.550781 L 308.554688 230.550781 L 308.554688 233.90625 L 306.316406 236.144531 L 306.316406 228.3125 Z M 314.144531 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 315.820312 226.632812 L 327 226.632812 L 327 237.824219 L 315.820312 237.824219 Z M 315.820312 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 319.734375 230.550781 L 323.085938 230.550781 L 323.085938 233.90625 L 319.734375 233.90625 Z M 319.734375 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 317.496094 236.144531 L 319.734375 233.90625 L 323.085938 233.90625 L 323.085938 230.550781 L 325.324219 228.3125 L 325.324219 236.144531 Z M 317.496094 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 325.324219 228.3125 L 323.085938 230.550781 L 319.734375 230.550781 L 319.734375 233.90625 L 317.496094 236.144531 L 317.496094 228.3125 Z M 325.324219 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 327 226.632812 L 338.179688 226.632812 L 338.179688 237.824219 L 327 237.824219 Z M 327 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 330.914062 230.550781 L 334.265625 230.550781 L 334.265625 233.90625 L 330.914062 233.90625 Z M 330.914062 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 328.675781 236.144531 L 330.914062 233.90625 L 334.265625 233.90625 L 334.265625 230.550781 L 336.503906 228.3125 L 336.503906 236.144531 Z M 328.675781 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 336.503906 228.3125 L 334.265625 230.550781 L 330.914062 230.550781 L 330.914062 233.90625 L 328.675781 236.144531 L 328.675781 228.3125 Z M 336.503906 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 338.179688 226.632812 L 349.359375 226.632812 L 349.359375 237.824219 L 338.179688 237.824219 Z M 338.179688 226.632812 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 342.09375 230.550781 L 345.445312 230.550781 L 345.445312 233.90625 L 342.09375 233.90625 Z M 342.09375 230.550781 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 339.855469 236.144531 L 342.09375 233.90625 L 345.445312 233.90625 L 345.445312 230.550781 L 347.683594 228.3125 L 347.683594 236.144531 Z M 339.855469 236.144531 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 347.683594 228.3125 L 345.445312 230.550781 L 342.09375 230.550781 L 342.09375 233.90625 L 339.855469 236.144531 L 339.855469 228.3125 Z M 347.683594 228.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 92.230469 215.441406 L 103.410156 215.441406 L 103.410156 226.632812 L 92.230469 226.632812 Z M 92.230469 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 96.144531 219.359375 L 99.496094 219.359375 L 99.496094 222.714844 L 96.144531 222.714844 Z M 96.144531 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 93.90625 224.953125 L 96.144531 222.714844 L 99.496094 222.714844 L 99.496094 219.359375 L 101.734375 217.121094 L 101.734375 224.953125 Z M 93.90625 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 101.734375 217.121094 L 99.496094 219.359375 L 96.144531 219.359375 L 96.144531 222.714844 L 93.90625 224.953125 L 93.90625 217.121094 Z M 101.734375 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 103.410156 215.441406 L 114.589844 215.441406 L 114.589844 226.632812 L 103.410156 226.632812 Z M 103.410156 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 107.324219 219.359375 L 110.675781 219.359375 L 110.675781 222.714844 L 107.324219 222.714844 Z M 107.324219 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 105.085938 224.953125 L 107.324219 222.714844 L 110.675781 222.714844 L 110.675781 219.359375 L 112.914062 217.121094 L 112.914062 224.953125 Z M 105.085938 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 112.914062 217.121094 L 110.675781 219.359375 L 107.324219 219.359375 L 107.324219 222.714844 L 105.085938 224.953125 L 105.085938 217.121094 Z M 112.914062 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 114.589844 215.441406 L 125.769531 215.441406 L 125.769531 226.632812 L 114.589844 226.632812 Z M 114.589844 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 118.503906 219.359375 L 121.855469 219.359375 L 121.855469 222.714844 L 118.503906 222.714844 Z M 118.503906 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 116.265625 224.953125 L 118.503906 222.714844 L 121.855469 222.714844 L 121.855469 219.359375 L 124.09375 217.121094 L 124.09375 224.953125 Z M 116.265625 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 124.09375 217.121094 L 121.855469 219.359375 L 118.503906 219.359375 L 118.503906 222.714844 L 116.265625 224.953125 L 116.265625 217.121094 Z M 124.09375 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 125.769531 215.441406 L 136.949219 215.441406 L 136.949219 226.632812 L 125.769531 226.632812 Z M 125.769531 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 129.683594 219.359375 L 133.035156 219.359375 L 133.035156 222.714844 L 129.683594 222.714844 Z M 129.683594 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 127.445312 224.953125 L 129.683594 222.714844 L 133.035156 222.714844 L 133.035156 219.359375 L 135.273438 217.121094 L 135.273438 224.953125 Z M 127.445312 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 135.273438 217.121094 L 133.035156 219.359375 L 129.683594 219.359375 L 129.683594 222.714844 L 127.445312 224.953125 L 127.445312 217.121094 Z M 135.273438 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 136.949219 215.441406 L 148.128906 215.441406 L 148.128906 226.632812 L 136.949219 226.632812 Z M 136.949219 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 140.863281 219.359375 L 144.214844 219.359375 L 144.214844 222.714844 L 140.863281 222.714844 Z M 140.863281 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 138.625 224.953125 L 140.863281 222.714844 L 144.214844 222.714844 L 144.214844 219.359375 L 146.453125 217.121094 L 146.453125 224.953125 Z M 138.625 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 146.453125 217.121094 L 144.214844 219.359375 L 140.863281 219.359375 L 140.863281 222.714844 L 138.625 224.953125 L 138.625 217.121094 Z M 146.453125 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 148.128906 215.441406 L 159.308594 215.441406 L 159.308594 226.632812 L 148.128906 226.632812 Z M 148.128906 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 152.042969 219.359375 L 155.394531 219.359375 L 155.394531 222.714844 L 152.042969 222.714844 Z M 152.042969 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 149.804688 224.953125 L 152.042969 222.714844 L 155.394531 222.714844 L 155.394531 219.359375 L 157.628906 217.121094 L 157.628906 224.953125 Z M 149.804688 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 157.628906 217.121094 L 155.394531 219.359375 L 152.042969 219.359375 L 152.042969 222.714844 L 149.804688 224.953125 L 149.804688 217.121094 Z M 157.628906 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 159.308594 215.441406 L 170.488281 215.441406 L 170.488281 226.632812 L 159.308594 226.632812 Z M 159.308594 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 163.21875 219.359375 L 166.574219 219.359375 L 166.574219 222.714844 L 163.21875 222.714844 Z M 163.21875 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 160.984375 224.953125 L 163.21875 222.714844 L 166.574219 222.714844 L 166.574219 219.359375 L 168.808594 217.121094 L 168.808594 224.953125 Z M 160.984375 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 168.808594 217.121094 L 166.574219 219.359375 L 163.21875 219.359375 L 163.21875 222.714844 L 160.984375 224.953125 L 160.984375 217.121094 Z M 168.808594 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 170.488281 215.441406 L 181.667969 215.441406 L 181.667969 226.632812 L 170.488281 226.632812 Z M 170.488281 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 174.398438 219.359375 L 177.753906 219.359375 L 177.753906 222.714844 L 174.398438 222.714844 Z M 174.398438 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 172.164062 224.953125 L 174.398438 222.714844 L 177.753906 222.714844 L 177.753906 219.359375 L 179.988281 217.121094 L 179.988281 224.953125 Z M 172.164062 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 179.988281 217.121094 L 177.753906 219.359375 L 174.398438 219.359375 L 174.398438 222.714844 L 172.164062 224.953125 L 172.164062 217.121094 Z M 179.988281 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 181.667969 215.441406 L 192.847656 215.441406 L 192.847656 226.632812 L 181.667969 226.632812 Z M 181.667969 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 185.578125 219.359375 L 188.933594 219.359375 L 188.933594 222.714844 L 185.578125 222.714844 Z M 185.578125 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 183.34375 224.953125 L 185.578125 222.714844 L 188.933594 222.714844 L 188.933594 219.359375 L 191.167969 217.121094 L 191.167969 224.953125 Z M 183.34375 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 191.167969 217.121094 L 188.933594 219.359375 L 185.578125 219.359375 L 185.578125 222.714844 L 183.34375 224.953125 L 183.34375 217.121094 Z M 191.167969 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 192.847656 215.441406 L 204.027344 215.441406 L 204.027344 226.632812 L 192.847656 226.632812 Z M 192.847656 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 196.757812 219.359375 L 200.113281 219.359375 L 200.113281 222.714844 L 196.757812 222.714844 Z M 196.757812 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 194.523438 224.953125 L 196.757812 222.714844 L 200.113281 222.714844 L 200.113281 219.359375 L 202.347656 217.121094 L 202.347656 224.953125 Z M 194.523438 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 202.347656 217.121094 L 200.113281 219.359375 L 196.757812 219.359375 L 196.757812 222.714844 L 194.523438 224.953125 L 194.523438 217.121094 Z M 202.347656 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 204.027344 215.441406 L 215.207031 215.441406 L 215.207031 226.632812 L 204.027344 226.632812 Z M 204.027344 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 207.9375 219.359375 L 211.292969 219.359375 L 211.292969 222.714844 L 207.9375 222.714844 Z M 207.9375 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 205.703125 224.953125 L 207.9375 222.714844 L 211.292969 222.714844 L 211.292969 219.359375 L 213.527344 217.121094 L 213.527344 224.953125 Z M 205.703125 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 213.527344 217.121094 L 211.292969 219.359375 L 207.9375 219.359375 L 207.9375 222.714844 L 205.703125 224.953125 L 205.703125 217.121094 Z M 213.527344 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 215.207031 215.441406 L 226.382812 215.441406 L 226.382812 226.632812 L 215.207031 226.632812 Z M 215.207031 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 219.117188 219.359375 L 222.472656 219.359375 L 222.472656 222.714844 L 219.117188 222.714844 Z M 219.117188 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 216.882812 224.953125 L 219.117188 222.714844 L 222.472656 222.714844 L 222.472656 219.359375 L 224.707031 217.121094 L 224.707031 224.953125 Z M 216.882812 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 224.707031 217.121094 L 222.472656 219.359375 L 219.117188 219.359375 L 219.117188 222.714844 L 216.882812 224.953125 L 216.882812 217.121094 Z M 224.707031 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 226.382812 215.441406 L 237.5625 215.441406 L 237.5625 226.632812 L 226.382812 226.632812 Z M 226.382812 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 230.296875 219.359375 L 233.652344 219.359375 L 233.652344 222.714844 L 230.296875 222.714844 Z M 230.296875 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 228.0625 224.953125 L 230.296875 222.714844 L 233.652344 222.714844 L 233.652344 219.359375 L 235.886719 217.121094 L 235.886719 224.953125 Z M 228.0625 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 235.886719 217.121094 L 233.652344 219.359375 L 230.296875 219.359375 L 230.296875 222.714844 L 228.0625 224.953125 L 228.0625 217.121094 Z M 235.886719 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 237.5625 215.441406 L 248.742188 215.441406 L 248.742188 226.632812 L 237.5625 226.632812 Z M 237.5625 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 241.476562 219.359375 L 244.832031 219.359375 L 244.832031 222.714844 L 241.476562 222.714844 Z M 241.476562 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 239.242188 224.953125 L 241.476562 222.714844 L 244.832031 222.714844 L 244.832031 219.359375 L 247.066406 217.121094 L 247.066406 224.953125 Z M 239.242188 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 247.066406 217.121094 L 244.832031 219.359375 L 241.476562 219.359375 L 241.476562 222.714844 L 239.242188 224.953125 L 239.242188 217.121094 Z M 247.066406 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 248.742188 215.441406 L 259.921875 215.441406 L 259.921875 226.632812 L 248.742188 226.632812 Z M 248.742188 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 252.65625 219.359375 L 256.011719 219.359375 L 256.011719 222.714844 L 252.65625 222.714844 Z M 252.65625 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 250.421875 224.953125 L 252.65625 222.714844 L 256.011719 222.714844 L 256.011719 219.359375 L 258.246094 217.121094 L 258.246094 224.953125 Z M 250.421875 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 258.246094 217.121094 L 256.011719 219.359375 L 252.65625 219.359375 L 252.65625 222.714844 L 250.421875 224.953125 L 250.421875 217.121094 Z M 258.246094 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 259.921875 215.441406 L 271.101562 215.441406 L 271.101562 226.632812 L 259.921875 226.632812 Z M 259.921875 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 263.835938 219.359375 L 267.191406 219.359375 L 267.191406 222.714844 L 263.835938 222.714844 Z M 263.835938 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 261.601562 224.953125 L 263.835938 222.714844 L 267.191406 222.714844 L 267.191406 219.359375 L 269.425781 217.121094 L 269.425781 224.953125 Z M 261.601562 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 269.425781 217.121094 L 267.191406 219.359375 L 263.835938 219.359375 L 263.835938 222.714844 L 261.601562 224.953125 L 261.601562 217.121094 Z M 269.425781 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 271.101562 215.441406 L 282.28125 215.441406 L 282.28125 226.632812 L 271.101562 226.632812 Z M 271.101562 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 275.015625 219.359375 L 278.371094 219.359375 L 278.371094 222.714844 L 275.015625 222.714844 Z M 275.015625 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 272.78125 224.953125 L 275.015625 222.714844 L 278.371094 222.714844 L 278.371094 219.359375 L 280.605469 217.121094 L 280.605469 224.953125 Z M 272.78125 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 280.605469 217.121094 L 278.371094 219.359375 L 275.015625 219.359375 L 275.015625 222.714844 L 272.78125 224.953125 L 272.78125 217.121094 Z M 280.605469 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 282.28125 215.441406 L 293.460938 215.441406 L 293.460938 226.632812 L 282.28125 226.632812 Z M 282.28125 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 286.195312 219.359375 L 289.546875 219.359375 L 289.546875 222.714844 L 286.195312 222.714844 Z M 286.195312 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 283.957031 224.953125 L 286.195312 222.714844 L 289.546875 222.714844 L 289.546875 219.359375 L 291.785156 217.121094 L 291.785156 224.953125 Z M 283.957031 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 291.785156 217.121094 L 289.546875 219.359375 L 286.195312 219.359375 L 286.195312 222.714844 L 283.957031 224.953125 L 283.957031 217.121094 Z M 291.785156 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 293.460938 215.441406 L 304.640625 215.441406 L 304.640625 226.632812 L 293.460938 226.632812 Z M 293.460938 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 297.375 219.359375 L 300.726562 219.359375 L 300.726562 222.714844 L 297.375 222.714844 Z M 297.375 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 295.136719 224.953125 L 297.375 222.714844 L 300.726562 222.714844 L 300.726562 219.359375 L 302.964844 217.121094 L 302.964844 224.953125 Z M 295.136719 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 302.964844 217.121094 L 300.726562 219.359375 L 297.375 219.359375 L 297.375 222.714844 L 295.136719 224.953125 L 295.136719 217.121094 Z M 302.964844 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 304.640625 215.441406 L 315.820312 215.441406 L 315.820312 226.632812 L 304.640625 226.632812 Z M 304.640625 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 308.554688 219.359375 L 311.90625 219.359375 L 311.90625 222.714844 L 308.554688 222.714844 Z M 308.554688 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 306.316406 224.953125 L 308.554688 222.714844 L 311.90625 222.714844 L 311.90625 219.359375 L 314.144531 217.121094 L 314.144531 224.953125 Z M 306.316406 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 314.144531 217.121094 L 311.90625 219.359375 L 308.554688 219.359375 L 308.554688 222.714844 L 306.316406 224.953125 L 306.316406 217.121094 Z M 314.144531 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 315.820312 215.441406 L 327 215.441406 L 327 226.632812 L 315.820312 226.632812 Z M 315.820312 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 319.734375 219.359375 L 323.085938 219.359375 L 323.085938 222.714844 L 319.734375 222.714844 Z M 319.734375 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 317.496094 224.953125 L 319.734375 222.714844 L 323.085938 222.714844 L 323.085938 219.359375 L 325.324219 217.121094 L 325.324219 224.953125 Z M 317.496094 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 325.324219 217.121094 L 323.085938 219.359375 L 319.734375 219.359375 L 319.734375 222.714844 L 317.496094 224.953125 L 317.496094 217.121094 Z M 325.324219 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 327 215.441406 L 338.179688 215.441406 L 338.179688 226.632812 L 327 226.632812 Z M 327 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 330.914062 219.359375 L 334.265625 219.359375 L 334.265625 222.714844 L 330.914062 222.714844 Z M 330.914062 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 328.675781 224.953125 L 330.914062 222.714844 L 334.265625 222.714844 L 334.265625 219.359375 L 336.503906 217.121094 L 336.503906 224.953125 Z M 328.675781 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 336.503906 217.121094 L 334.265625 219.359375 L 330.914062 219.359375 L 330.914062 222.714844 L 328.675781 224.953125 L 328.675781 217.121094 Z M 336.503906 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 338.179688 215.441406 L 349.359375 215.441406 L 349.359375 226.632812 L 338.179688 226.632812 Z M 338.179688 215.441406 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 342.09375 219.359375 L 345.445312 219.359375 L 345.445312 222.714844 L 342.09375 222.714844 Z M 342.09375 219.359375 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 339.855469 224.953125 L 342.09375 222.714844 L 345.445312 222.714844 L 345.445312 219.359375 L 347.683594 217.121094 L 347.683594 224.953125 Z M 339.855469 224.953125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 347.683594 217.121094 L 345.445312 219.359375 L 342.09375 219.359375 L 342.09375 222.714844 L 339.855469 224.953125 L 339.855469 217.121094 Z M 347.683594 217.121094 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 92.230469 13.988281 L 103.410156 13.988281 L 103.410156 25.179688 L 92.230469 25.179688 Z M 92.230469 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 96.144531 17.90625 L 99.496094 17.90625 L 99.496094 21.265625 L 96.144531 21.265625 Z M 96.144531 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 93.90625 23.503906 L 96.144531 21.265625 L 99.496094 21.265625 L 99.496094 17.90625 L 101.734375 15.667969 L 101.734375 23.503906 Z M 93.90625 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 101.734375 15.667969 L 99.496094 17.90625 L 96.144531 17.90625 L 96.144531 21.265625 L 93.90625 23.503906 L 93.90625 15.667969 Z M 101.734375 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 103.410156 13.988281 L 114.589844 13.988281 L 114.589844 25.179688 L 103.410156 25.179688 Z M 103.410156 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 107.324219 17.90625 L 110.675781 17.90625 L 110.675781 21.265625 L 107.324219 21.265625 Z M 107.324219 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 105.085938 23.503906 L 107.324219 21.265625 L 110.675781 21.265625 L 110.675781 17.90625 L 112.914062 15.667969 L 112.914062 23.503906 Z M 105.085938 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 112.914062 15.667969 L 110.675781 17.90625 L 107.324219 17.90625 L 107.324219 21.265625 L 105.085938 23.503906 L 105.085938 15.667969 Z M 112.914062 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 114.589844 13.988281 L 125.769531 13.988281 L 125.769531 25.179688 L 114.589844 25.179688 Z M 114.589844 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 118.503906 17.90625 L 121.855469 17.90625 L 121.855469 21.265625 L 118.503906 21.265625 Z M 118.503906 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 116.265625 23.503906 L 118.503906 21.265625 L 121.855469 21.265625 L 121.855469 17.90625 L 124.09375 15.667969 L 124.09375 23.503906 Z M 116.265625 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 124.09375 15.667969 L 121.855469 17.90625 L 118.503906 17.90625 L 118.503906 21.265625 L 116.265625 23.503906 L 116.265625 15.667969 Z M 124.09375 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 125.769531 13.988281 L 136.949219 13.988281 L 136.949219 25.179688 L 125.769531 25.179688 Z M 125.769531 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 129.683594 17.90625 L 133.035156 17.90625 L 133.035156 21.265625 L 129.683594 21.265625 Z M 129.683594 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 127.445312 23.503906 L 129.683594 21.265625 L 133.035156 21.265625 L 133.035156 17.90625 L 135.273438 15.667969 L 135.273438 23.503906 Z M 127.445312 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 135.273438 15.667969 L 133.035156 17.90625 L 129.683594 17.90625 L 129.683594 21.265625 L 127.445312 23.503906 L 127.445312 15.667969 Z M 135.273438 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 136.949219 13.988281 L 148.128906 13.988281 L 148.128906 25.179688 L 136.949219 25.179688 Z M 136.949219 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 140.863281 17.90625 L 144.214844 17.90625 L 144.214844 21.265625 L 140.863281 21.265625 Z M 140.863281 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 138.625 23.503906 L 140.863281 21.265625 L 144.214844 21.265625 L 144.214844 17.90625 L 146.453125 15.667969 L 146.453125 23.503906 Z M 138.625 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 146.453125 15.667969 L 144.214844 17.90625 L 140.863281 17.90625 L 140.863281 21.265625 L 138.625 23.503906 L 138.625 15.667969 Z M 146.453125 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 148.128906 13.988281 L 159.308594 13.988281 L 159.308594 25.179688 L 148.128906 25.179688 Z M 148.128906 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 152.042969 17.90625 L 155.394531 17.90625 L 155.394531 21.265625 L 152.042969 21.265625 Z M 152.042969 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 149.804688 23.503906 L 152.042969 21.265625 L 155.394531 21.265625 L 155.394531 17.90625 L 157.628906 15.667969 L 157.628906 23.503906 Z M 149.804688 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 157.628906 15.667969 L 155.394531 17.90625 L 152.042969 17.90625 L 152.042969 21.265625 L 149.804688 23.503906 L 149.804688 15.667969 Z M 157.628906 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 159.308594 13.988281 L 170.488281 13.988281 L 170.488281 25.179688 L 159.308594 25.179688 Z M 159.308594 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 163.21875 17.90625 L 166.574219 17.90625 L 166.574219 21.265625 L 163.21875 21.265625 Z M 163.21875 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 160.984375 23.503906 L 163.21875 21.265625 L 166.574219 21.265625 L 166.574219 17.90625 L 168.808594 15.667969 L 168.808594 23.503906 Z M 160.984375 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 168.808594 15.667969 L 166.574219 17.90625 L 163.21875 17.90625 L 163.21875 21.265625 L 160.984375 23.503906 L 160.984375 15.667969 Z M 168.808594 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 170.488281 13.988281 L 181.667969 13.988281 L 181.667969 25.179688 L 170.488281 25.179688 Z M 170.488281 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 174.398438 17.90625 L 177.753906 17.90625 L 177.753906 21.265625 L 174.398438 21.265625 Z M 174.398438 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 172.164062 23.503906 L 174.398438 21.265625 L 177.753906 21.265625 L 177.753906 17.90625 L 179.988281 15.667969 L 179.988281 23.503906 Z M 172.164062 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 179.988281 15.667969 L 177.753906 17.90625 L 174.398438 17.90625 L 174.398438 21.265625 L 172.164062 23.503906 L 172.164062 15.667969 Z M 179.988281 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 181.667969 13.988281 L 192.847656 13.988281 L 192.847656 25.179688 L 181.667969 25.179688 Z M 181.667969 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 185.578125 17.90625 L 188.933594 17.90625 L 188.933594 21.265625 L 185.578125 21.265625 Z M 185.578125 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 183.34375 23.503906 L 185.578125 21.265625 L 188.933594 21.265625 L 188.933594 17.90625 L 191.167969 15.667969 L 191.167969 23.503906 Z M 183.34375 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 191.167969 15.667969 L 188.933594 17.90625 L 185.578125 17.90625 L 185.578125 21.265625 L 183.34375 23.503906 L 183.34375 15.667969 Z M 191.167969 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 192.847656 13.988281 L 204.027344 13.988281 L 204.027344 25.179688 L 192.847656 25.179688 Z M 192.847656 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 196.757812 17.90625 L 200.113281 17.90625 L 200.113281 21.265625 L 196.757812 21.265625 Z M 196.757812 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 194.523438 23.503906 L 196.757812 21.265625 L 200.113281 21.265625 L 200.113281 17.90625 L 202.347656 15.667969 L 202.347656 23.503906 Z M 194.523438 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 202.347656 15.667969 L 200.113281 17.90625 L 196.757812 17.90625 L 196.757812 21.265625 L 194.523438 23.503906 L 194.523438 15.667969 Z M 202.347656 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 204.027344 13.988281 L 215.207031 13.988281 L 215.207031 25.179688 L 204.027344 25.179688 Z M 204.027344 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 207.9375 17.90625 L 211.292969 17.90625 L 211.292969 21.265625 L 207.9375 21.265625 Z M 207.9375 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 205.703125 23.503906 L 207.9375 21.265625 L 211.292969 21.265625 L 211.292969 17.90625 L 213.527344 15.667969 L 213.527344 23.503906 Z M 205.703125 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 213.527344 15.667969 L 211.292969 17.90625 L 207.9375 17.90625 L 207.9375 21.265625 L 205.703125 23.503906 L 205.703125 15.667969 Z M 213.527344 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 215.207031 13.988281 L 226.382812 13.988281 L 226.382812 25.179688 L 215.207031 25.179688 Z M 215.207031 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 219.117188 17.90625 L 222.472656 17.90625 L 222.472656 21.265625 L 219.117188 21.265625 Z M 219.117188 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 216.882812 23.503906 L 219.117188 21.265625 L 222.472656 21.265625 L 222.472656 17.90625 L 224.707031 15.667969 L 224.707031 23.503906 Z M 216.882812 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 224.707031 15.667969 L 222.472656 17.90625 L 219.117188 17.90625 L 219.117188 21.265625 L 216.882812 23.503906 L 216.882812 15.667969 Z M 224.707031 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 226.382812 13.988281 L 237.5625 13.988281 L 237.5625 25.179688 L 226.382812 25.179688 Z M 226.382812 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 230.296875 17.90625 L 233.652344 17.90625 L 233.652344 21.265625 L 230.296875 21.265625 Z M 230.296875 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 228.0625 23.503906 L 230.296875 21.265625 L 233.652344 21.265625 L 233.652344 17.90625 L 235.886719 15.667969 L 235.886719 23.503906 Z M 228.0625 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 235.886719 15.667969 L 233.652344 17.90625 L 230.296875 17.90625 L 230.296875 21.265625 L 228.0625 23.503906 L 228.0625 15.667969 Z M 235.886719 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 237.5625 13.988281 L 248.742188 13.988281 L 248.742188 25.179688 L 237.5625 25.179688 Z M 237.5625 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 241.476562 17.90625 L 244.832031 17.90625 L 244.832031 21.265625 L 241.476562 21.265625 Z M 241.476562 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 239.242188 23.503906 L 241.476562 21.265625 L 244.832031 21.265625 L 244.832031 17.90625 L 247.066406 15.667969 L 247.066406 23.503906 Z M 239.242188 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 247.066406 15.667969 L 244.832031 17.90625 L 241.476562 17.90625 L 241.476562 21.265625 L 239.242188 23.503906 L 239.242188 15.667969 Z M 247.066406 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 248.742188 13.988281 L 259.921875 13.988281 L 259.921875 25.179688 L 248.742188 25.179688 Z M 248.742188 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 252.65625 17.90625 L 256.011719 17.90625 L 256.011719 21.265625 L 252.65625 21.265625 Z M 252.65625 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 250.421875 23.503906 L 252.65625 21.265625 L 256.011719 21.265625 L 256.011719 17.90625 L 258.246094 15.667969 L 258.246094 23.503906 Z M 250.421875 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 258.246094 15.667969 L 256.011719 17.90625 L 252.65625 17.90625 L 252.65625 21.265625 L 250.421875 23.503906 L 250.421875 15.667969 Z M 258.246094 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 259.921875 13.988281 L 271.101562 13.988281 L 271.101562 25.179688 L 259.921875 25.179688 Z M 259.921875 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 263.835938 17.90625 L 267.191406 17.90625 L 267.191406 21.265625 L 263.835938 21.265625 Z M 263.835938 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 261.601562 23.503906 L 263.835938 21.265625 L 267.191406 21.265625 L 267.191406 17.90625 L 269.425781 15.667969 L 269.425781 23.503906 Z M 261.601562 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 269.425781 15.667969 L 267.191406 17.90625 L 263.835938 17.90625 L 263.835938 21.265625 L 261.601562 23.503906 L 261.601562 15.667969 Z M 269.425781 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 271.101562 13.988281 L 282.28125 13.988281 L 282.28125 25.179688 L 271.101562 25.179688 Z M 271.101562 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 275.015625 17.90625 L 278.371094 17.90625 L 278.371094 21.265625 L 275.015625 21.265625 Z M 275.015625 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 272.78125 23.503906 L 275.015625 21.265625 L 278.371094 21.265625 L 278.371094 17.90625 L 280.605469 15.667969 L 280.605469 23.503906 Z M 272.78125 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 280.605469 15.667969 L 278.371094 17.90625 L 275.015625 17.90625 L 275.015625 21.265625 L 272.78125 23.503906 L 272.78125 15.667969 Z M 280.605469 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 282.28125 13.988281 L 293.460938 13.988281 L 293.460938 25.179688 L 282.28125 25.179688 Z M 282.28125 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 286.195312 17.90625 L 289.546875 17.90625 L 289.546875 21.265625 L 286.195312 21.265625 Z M 286.195312 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 283.957031 23.503906 L 286.195312 21.265625 L 289.546875 21.265625 L 289.546875 17.90625 L 291.785156 15.667969 L 291.785156 23.503906 Z M 283.957031 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 291.785156 15.667969 L 289.546875 17.90625 L 286.195312 17.90625 L 286.195312 21.265625 L 283.957031 23.503906 L 283.957031 15.667969 Z M 291.785156 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 293.460938 13.988281 L 304.640625 13.988281 L 304.640625 25.179688 L 293.460938 25.179688 Z M 293.460938 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 297.375 17.90625 L 300.726562 17.90625 L 300.726562 21.265625 L 297.375 21.265625 Z M 297.375 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 295.136719 23.503906 L 297.375 21.265625 L 300.726562 21.265625 L 300.726562 17.90625 L 302.964844 15.667969 L 302.964844 23.503906 Z M 295.136719 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 302.964844 15.667969 L 300.726562 17.90625 L 297.375 17.90625 L 297.375 21.265625 L 295.136719 23.503906 L 295.136719 15.667969 Z M 302.964844 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 304.640625 13.988281 L 315.820312 13.988281 L 315.820312 25.179688 L 304.640625 25.179688 Z M 304.640625 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 308.554688 17.90625 L 311.90625 17.90625 L 311.90625 21.265625 L 308.554688 21.265625 Z M 308.554688 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 306.316406 23.503906 L 308.554688 21.265625 L 311.90625 21.265625 L 311.90625 17.90625 L 314.144531 15.667969 L 314.144531 23.503906 Z M 306.316406 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 314.144531 15.667969 L 311.90625 17.90625 L 308.554688 17.90625 L 308.554688 21.265625 L 306.316406 23.503906 L 306.316406 15.667969 Z M 314.144531 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 315.820312 13.988281 L 327 13.988281 L 327 25.179688 L 315.820312 25.179688 Z M 315.820312 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 319.734375 17.90625 L 323.085938 17.90625 L 323.085938 21.265625 L 319.734375 21.265625 Z M 319.734375 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 317.496094 23.503906 L 319.734375 21.265625 L 323.085938 21.265625 L 323.085938 17.90625 L 325.324219 15.667969 L 325.324219 23.503906 Z M 317.496094 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 325.324219 15.667969 L 323.085938 17.90625 L 319.734375 17.90625 L 319.734375 21.265625 L 317.496094 23.503906 L 317.496094 15.667969 Z M 325.324219 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 327 13.988281 L 338.179688 13.988281 L 338.179688 25.179688 L 327 25.179688 Z M 327 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 330.914062 17.90625 L 334.265625 17.90625 L 334.265625 21.265625 L 330.914062 21.265625 Z M 330.914062 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 328.675781 23.503906 L 330.914062 21.265625 L 334.265625 21.265625 L 334.265625 17.90625 L 336.503906 15.667969 L 336.503906 23.503906 Z M 328.675781 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 336.503906 15.667969 L 334.265625 17.90625 L 330.914062 17.90625 L 330.914062 21.265625 L 328.675781 23.503906 L 328.675781 15.667969 Z M 336.503906 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 338.179688 13.988281 L 349.359375 13.988281 L 349.359375 25.179688 L 338.179688 25.179688 Z M 338.179688 13.988281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 342.09375 17.90625 L 345.445312 17.90625 L 345.445312 21.265625 L 342.09375 21.265625 Z M 342.09375 17.90625 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 339.855469 23.503906 L 342.09375 21.265625 L 345.445312 21.265625 L 345.445312 17.90625 L 347.683594 15.667969 L 347.683594 23.503906 Z M 339.855469 23.503906 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 347.683594 15.667969 L 345.445312 17.90625 L 342.09375 17.90625 L 342.09375 21.265625 L 339.855469 23.503906 L 339.855469 15.667969 Z M 347.683594 15.667969 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 92.230469 2.796875 L 103.410156 2.796875 L 103.410156 13.988281 L 92.230469 13.988281 Z M 92.230469 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 96.144531 6.714844 L 99.496094 6.714844 L 99.496094 10.074219 L 96.144531 10.074219 Z M 96.144531 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 93.90625 12.3125 L 96.144531 10.074219 L 99.496094 10.074219 L 99.496094 6.714844 L 101.734375 4.476562 L 101.734375 12.3125 Z M 93.90625 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 101.734375 4.476562 L 99.496094 6.714844 L 96.144531 6.714844 L 96.144531 10.074219 L 93.90625 12.3125 L 93.90625 4.476562 Z M 101.734375 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 103.410156 2.796875 L 114.589844 2.796875 L 114.589844 13.988281 L 103.410156 13.988281 Z M 103.410156 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 107.324219 6.714844 L 110.675781 6.714844 L 110.675781 10.074219 L 107.324219 10.074219 Z M 107.324219 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 105.085938 12.3125 L 107.324219 10.074219 L 110.675781 10.074219 L 110.675781 6.714844 L 112.914062 4.476562 L 112.914062 12.3125 Z M 105.085938 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 112.914062 4.476562 L 110.675781 6.714844 L 107.324219 6.714844 L 107.324219 10.074219 L 105.085938 12.3125 L 105.085938 4.476562 Z M 112.914062 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 114.589844 2.796875 L 125.769531 2.796875 L 125.769531 13.988281 L 114.589844 13.988281 Z M 114.589844 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 118.503906 6.714844 L 121.855469 6.714844 L 121.855469 10.074219 L 118.503906 10.074219 Z M 118.503906 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 116.265625 12.3125 L 118.503906 10.074219 L 121.855469 10.074219 L 121.855469 6.714844 L 124.09375 4.476562 L 124.09375 12.3125 Z M 116.265625 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 124.09375 4.476562 L 121.855469 6.714844 L 118.503906 6.714844 L 118.503906 10.074219 L 116.265625 12.3125 L 116.265625 4.476562 Z M 124.09375 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 125.769531 2.796875 L 136.949219 2.796875 L 136.949219 13.988281 L 125.769531 13.988281 Z M 125.769531 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 129.683594 6.714844 L 133.035156 6.714844 L 133.035156 10.074219 L 129.683594 10.074219 Z M 129.683594 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 127.445312 12.3125 L 129.683594 10.074219 L 133.035156 10.074219 L 133.035156 6.714844 L 135.273438 4.476562 L 135.273438 12.3125 Z M 127.445312 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 135.273438 4.476562 L 133.035156 6.714844 L 129.683594 6.714844 L 129.683594 10.074219 L 127.445312 12.3125 L 127.445312 4.476562 Z M 135.273438 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 136.949219 2.796875 L 148.128906 2.796875 L 148.128906 13.988281 L 136.949219 13.988281 Z M 136.949219 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 140.863281 6.714844 L 144.214844 6.714844 L 144.214844 10.074219 L 140.863281 10.074219 Z M 140.863281 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 138.625 12.3125 L 140.863281 10.074219 L 144.214844 10.074219 L 144.214844 6.714844 L 146.453125 4.476562 L 146.453125 12.3125 Z M 138.625 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 146.453125 4.476562 L 144.214844 6.714844 L 140.863281 6.714844 L 140.863281 10.074219 L 138.625 12.3125 L 138.625 4.476562 Z M 146.453125 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 148.128906 2.796875 L 159.308594 2.796875 L 159.308594 13.988281 L 148.128906 13.988281 Z M 148.128906 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 152.042969 6.714844 L 155.394531 6.714844 L 155.394531 10.074219 L 152.042969 10.074219 Z M 152.042969 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 149.804688 12.3125 L 152.042969 10.074219 L 155.394531 10.074219 L 155.394531 6.714844 L 157.628906 4.476562 L 157.628906 12.3125 Z M 149.804688 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 157.628906 4.476562 L 155.394531 6.714844 L 152.042969 6.714844 L 152.042969 10.074219 L 149.804688 12.3125 L 149.804688 4.476562 Z M 157.628906 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 159.308594 2.796875 L 170.488281 2.796875 L 170.488281 13.988281 L 159.308594 13.988281 Z M 159.308594 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 163.21875 6.714844 L 166.574219 6.714844 L 166.574219 10.074219 L 163.21875 10.074219 Z M 163.21875 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 160.984375 12.3125 L 163.21875 10.074219 L 166.574219 10.074219 L 166.574219 6.714844 L 168.808594 4.476562 L 168.808594 12.3125 Z M 160.984375 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 168.808594 4.476562 L 166.574219 6.714844 L 163.21875 6.714844 L 163.21875 10.074219 L 160.984375 12.3125 L 160.984375 4.476562 Z M 168.808594 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 170.488281 2.796875 L 181.667969 2.796875 L 181.667969 13.988281 L 170.488281 13.988281 Z M 170.488281 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 174.398438 6.714844 L 177.753906 6.714844 L 177.753906 10.074219 L 174.398438 10.074219 Z M 174.398438 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 172.164062 12.3125 L 174.398438 10.074219 L 177.753906 10.074219 L 177.753906 6.714844 L 179.988281 4.476562 L 179.988281 12.3125 Z M 172.164062 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 179.988281 4.476562 L 177.753906 6.714844 L 174.398438 6.714844 L 174.398438 10.074219 L 172.164062 12.3125 L 172.164062 4.476562 Z M 179.988281 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 181.667969 2.796875 L 192.847656 2.796875 L 192.847656 13.988281 L 181.667969 13.988281 Z M 181.667969 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 185.578125 6.714844 L 188.933594 6.714844 L 188.933594 10.074219 L 185.578125 10.074219 Z M 185.578125 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 183.34375 12.3125 L 185.578125 10.074219 L 188.933594 10.074219 L 188.933594 6.714844 L 191.167969 4.476562 L 191.167969 12.3125 Z M 183.34375 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 191.167969 4.476562 L 188.933594 6.714844 L 185.578125 6.714844 L 185.578125 10.074219 L 183.34375 12.3125 L 183.34375 4.476562 Z M 191.167969 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 192.847656 2.796875 L 204.027344 2.796875 L 204.027344 13.988281 L 192.847656 13.988281 Z M 192.847656 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 196.757812 6.714844 L 200.113281 6.714844 L 200.113281 10.074219 L 196.757812 10.074219 Z M 196.757812 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 194.523438 12.3125 L 196.757812 10.074219 L 200.113281 10.074219 L 200.113281 6.714844 L 202.347656 4.476562 L 202.347656 12.3125 Z M 194.523438 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 202.347656 4.476562 L 200.113281 6.714844 L 196.757812 6.714844 L 196.757812 10.074219 L 194.523438 12.3125 L 194.523438 4.476562 Z M 202.347656 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 204.027344 2.796875 L 215.207031 2.796875 L 215.207031 13.988281 L 204.027344 13.988281 Z M 204.027344 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 207.9375 6.714844 L 211.292969 6.714844 L 211.292969 10.074219 L 207.9375 10.074219 Z M 207.9375 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 205.703125 12.3125 L 207.9375 10.074219 L 211.292969 10.074219 L 211.292969 6.714844 L 213.527344 4.476562 L 213.527344 12.3125 Z M 205.703125 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 213.527344 4.476562 L 211.292969 6.714844 L 207.9375 6.714844 L 207.9375 10.074219 L 205.703125 12.3125 L 205.703125 4.476562 Z M 213.527344 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 215.207031 2.796875 L 226.382812 2.796875 L 226.382812 13.988281 L 215.207031 13.988281 Z M 215.207031 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 219.117188 6.714844 L 222.472656 6.714844 L 222.472656 10.074219 L 219.117188 10.074219 Z M 219.117188 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 216.882812 12.3125 L 219.117188 10.074219 L 222.472656 10.074219 L 222.472656 6.714844 L 224.707031 4.476562 L 224.707031 12.3125 Z M 216.882812 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 224.707031 4.476562 L 222.472656 6.714844 L 219.117188 6.714844 L 219.117188 10.074219 L 216.882812 12.3125 L 216.882812 4.476562 Z M 224.707031 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 226.382812 2.796875 L 237.5625 2.796875 L 237.5625 13.988281 L 226.382812 13.988281 Z M 226.382812 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 230.296875 6.714844 L 233.652344 6.714844 L 233.652344 10.074219 L 230.296875 10.074219 Z M 230.296875 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 228.0625 12.3125 L 230.296875 10.074219 L 233.652344 10.074219 L 233.652344 6.714844 L 235.886719 4.476562 L 235.886719 12.3125 Z M 228.0625 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 235.886719 4.476562 L 233.652344 6.714844 L 230.296875 6.714844 L 230.296875 10.074219 L 228.0625 12.3125 L 228.0625 4.476562 Z M 235.886719 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 237.5625 2.796875 L 248.742188 2.796875 L 248.742188 13.988281 L 237.5625 13.988281 Z M 237.5625 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 241.476562 6.714844 L 244.832031 6.714844 L 244.832031 10.074219 L 241.476562 10.074219 Z M 241.476562 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 239.242188 12.3125 L 241.476562 10.074219 L 244.832031 10.074219 L 244.832031 6.714844 L 247.066406 4.476562 L 247.066406 12.3125 Z M 239.242188 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 247.066406 4.476562 L 244.832031 6.714844 L 241.476562 6.714844 L 241.476562 10.074219 L 239.242188 12.3125 L 239.242188 4.476562 Z M 247.066406 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 248.742188 2.796875 L 259.921875 2.796875 L 259.921875 13.988281 L 248.742188 13.988281 Z M 248.742188 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 252.65625 6.714844 L 256.011719 6.714844 L 256.011719 10.074219 L 252.65625 10.074219 Z M 252.65625 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 250.421875 12.3125 L 252.65625 10.074219 L 256.011719 10.074219 L 256.011719 6.714844 L 258.246094 4.476562 L 258.246094 12.3125 Z M 250.421875 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 258.246094 4.476562 L 256.011719 6.714844 L 252.65625 6.714844 L 252.65625 10.074219 L 250.421875 12.3125 L 250.421875 4.476562 Z M 258.246094 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 259.921875 2.796875 L 271.101562 2.796875 L 271.101562 13.988281 L 259.921875 13.988281 Z M 259.921875 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 263.835938 6.714844 L 267.191406 6.714844 L 267.191406 10.074219 L 263.835938 10.074219 Z M 263.835938 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 261.601562 12.3125 L 263.835938 10.074219 L 267.191406 10.074219 L 267.191406 6.714844 L 269.425781 4.476562 L 269.425781 12.3125 Z M 261.601562 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 269.425781 4.476562 L 267.191406 6.714844 L 263.835938 6.714844 L 263.835938 10.074219 L 261.601562 12.3125 L 261.601562 4.476562 Z M 269.425781 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 271.101562 2.796875 L 282.28125 2.796875 L 282.28125 13.988281 L 271.101562 13.988281 Z M 271.101562 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 275.015625 6.714844 L 278.371094 6.714844 L 278.371094 10.074219 L 275.015625 10.074219 Z M 275.015625 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 272.78125 12.3125 L 275.015625 10.074219 L 278.371094 10.074219 L 278.371094 6.714844 L 280.605469 4.476562 L 280.605469 12.3125 Z M 272.78125 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 280.605469 4.476562 L 278.371094 6.714844 L 275.015625 6.714844 L 275.015625 10.074219 L 272.78125 12.3125 L 272.78125 4.476562 Z M 280.605469 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 282.28125 2.796875 L 293.460938 2.796875 L 293.460938 13.988281 L 282.28125 13.988281 Z M 282.28125 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 286.195312 6.714844 L 289.546875 6.714844 L 289.546875 10.074219 L 286.195312 10.074219 Z M 286.195312 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 283.957031 12.3125 L 286.195312 10.074219 L 289.546875 10.074219 L 289.546875 6.714844 L 291.785156 4.476562 L 291.785156 12.3125 Z M 283.957031 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 291.785156 4.476562 L 289.546875 6.714844 L 286.195312 6.714844 L 286.195312 10.074219 L 283.957031 12.3125 L 283.957031 4.476562 Z M 291.785156 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 293.460938 2.796875 L 304.640625 2.796875 L 304.640625 13.988281 L 293.460938 13.988281 Z M 293.460938 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 297.375 6.714844 L 300.726562 6.714844 L 300.726562 10.074219 L 297.375 10.074219 Z M 297.375 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 295.136719 12.3125 L 297.375 10.074219 L 300.726562 10.074219 L 300.726562 6.714844 L 302.964844 4.476562 L 302.964844 12.3125 Z M 295.136719 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 302.964844 4.476562 L 300.726562 6.714844 L 297.375 6.714844 L 297.375 10.074219 L 295.136719 12.3125 L 295.136719 4.476562 Z M 302.964844 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 304.640625 2.796875 L 315.820312 2.796875 L 315.820312 13.988281 L 304.640625 13.988281 Z M 304.640625 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 308.554688 6.714844 L 311.90625 6.714844 L 311.90625 10.074219 L 308.554688 10.074219 Z M 308.554688 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 306.316406 12.3125 L 308.554688 10.074219 L 311.90625 10.074219 L 311.90625 6.714844 L 314.144531 4.476562 L 314.144531 12.3125 Z M 306.316406 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 314.144531 4.476562 L 311.90625 6.714844 L 308.554688 6.714844 L 308.554688 10.074219 L 306.316406 12.3125 L 306.316406 4.476562 Z M 314.144531 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 315.820312 2.796875 L 327 2.796875 L 327 13.988281 L 315.820312 13.988281 Z M 315.820312 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 319.734375 6.714844 L 323.085938 6.714844 L 323.085938 10.074219 L 319.734375 10.074219 Z M 319.734375 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 317.496094 12.3125 L 319.734375 10.074219 L 323.085938 10.074219 L 323.085938 6.714844 L 325.324219 4.476562 L 325.324219 12.3125 Z M 317.496094 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 325.324219 4.476562 L 323.085938 6.714844 L 319.734375 6.714844 L 319.734375 10.074219 L 317.496094 12.3125 L 317.496094 4.476562 Z M 325.324219 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 327 2.796875 L 338.179688 2.796875 L 338.179688 13.988281 L 327 13.988281 Z M 327 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 330.914062 6.714844 L 334.265625 6.714844 L 334.265625 10.074219 L 330.914062 10.074219 Z M 330.914062 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 328.675781 12.3125 L 330.914062 10.074219 L 334.265625 10.074219 L 334.265625 6.714844 L 336.503906 4.476562 L 336.503906 12.3125 Z M 328.675781 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 336.503906 4.476562 L 334.265625 6.714844 L 330.914062 6.714844 L 330.914062 10.074219 L 328.675781 12.3125 L 328.675781 4.476562 Z M 336.503906 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 338.179688 2.796875 L 349.359375 2.796875 L 349.359375 13.988281 L 338.179688 13.988281 Z M 338.179688 2.796875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 342.09375 6.714844 L 345.445312 6.714844 L 345.445312 10.074219 L 342.09375 10.074219 Z M 342.09375 6.714844 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(100%,100%,100%);fill-opacity:0.117647;\" d=\"M 339.855469 12.3125 L 342.09375 10.074219 L 345.445312 10.074219 L 345.445312 6.714844 L 347.683594 4.476562 L 347.683594 12.3125 Z M 339.855469 12.3125 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:0.196078;\" d=\"M 347.683594 4.476562 L 345.445312 6.714844 L 342.09375 6.714844 L 342.09375 10.074219 L 339.855469 12.3125 L 339.855469 4.476562 Z M 347.683594 4.476562 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear7);\" d=\"M 1.675781 72.1875 L 93.347656 72.1875 C 94.273438 72.1875 95.027344 72.9375 95.027344 73.867188 L 95.027344 143.8125 C 95.027344 144.742188 94.273438 145.492188 93.347656 145.492188 L 1.675781 145.492188 C 0.75 145.492188 0 144.742188 0 143.8125 L 0 73.867188 C 0 72.9375 0.75 72.1875 1.675781 72.1875 Z M 1.675781 72.1875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 0 173.472656 L 61.488281 173.472656 L 61.488281 215.441406 L 0 215.441406 Z M 0 173.472656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:url(#linear8);\" d=\"M 1.675781 173.472656 L 59.808594 173.472656 C 60.738281 173.472656 61.488281 174.175781 61.488281 175.046875 L 61.488281 213.867188 C 61.488281 214.734375 60.738281 215.441406 59.808594 215.441406 L 1.675781 215.441406 C 0.75 215.441406 0 214.734375 0 213.867188 L 0 175.046875 C 0 174.175781 0.75 173.472656 1.675781 173.472656 Z M 1.675781 173.472656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 0 173.472656 L 3.355469 173.472656 L 3.355469 215.441406 L 0 215.441406 Z M 0 173.472656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(20%,20%,20%);fill-opacity:1;\" d=\"M 7.265625 173.472656 L 10.621094 173.472656 L 10.621094 215.441406 L 7.265625 215.441406 Z M 7.265625 173.472656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 3.355469 210.195312 L 7.265625 210.195312 L 7.265625 215.441406 L 3.355469 215.441406 Z M 3.355469 210.195312 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;\" d=\"M 3.355469 173.472656 L 7.265625 173.472656 L 7.265625 178.71875 L 3.355469 178.71875 Z M 3.355469 173.472656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(10.196078%,10.196078%,10.196078%);fill-opacity:1;\" d=\"M 3.355469 178.71875 L 7.265625 178.71875 L 7.265625 210.195312 L 3.355469 210.195312 Z M 3.355469 178.71875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 95.027344 229.429688 L 100.617188 229.429688 L 100.617188 235.027344 L 95.027344 235.027344 Z M 95.027344 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 95.027344 218.238281 L 100.617188 218.238281 L 100.617188 223.835938 L 95.027344 223.835938 Z M 95.027344 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 106.207031 229.429688 L 111.792969 229.429688 L 111.792969 235.027344 L 106.207031 235.027344 Z M 106.207031 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 106.207031 218.238281 L 111.792969 218.238281 L 111.792969 223.835938 L 106.207031 223.835938 Z M 106.207031 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 117.382812 229.429688 L 122.972656 229.429688 L 122.972656 235.027344 L 117.382812 235.027344 Z M 117.382812 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 117.382812 218.238281 L 122.972656 218.238281 L 122.972656 223.835938 L 117.382812 223.835938 Z M 117.382812 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 128.5625 229.429688 L 134.152344 229.429688 L 134.152344 235.027344 L 128.5625 235.027344 Z M 128.5625 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 128.5625 218.238281 L 134.152344 218.238281 L 134.152344 223.835938 L 128.5625 223.835938 Z M 128.5625 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 139.742188 229.429688 L 145.332031 229.429688 L 145.332031 235.027344 L 139.742188 235.027344 Z M 139.742188 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 139.742188 218.238281 L 145.332031 218.238281 L 145.332031 223.835938 L 139.742188 223.835938 Z M 139.742188 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 150.921875 229.429688 L 156.511719 229.429688 L 156.511719 235.027344 L 150.921875 235.027344 Z M 150.921875 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 150.921875 218.238281 L 156.511719 218.238281 L 156.511719 223.835938 L 150.921875 223.835938 Z M 150.921875 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 162.101562 229.429688 L 167.691406 229.429688 L 167.691406 235.027344 L 162.101562 235.027344 Z M 162.101562 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 162.101562 218.238281 L 167.691406 218.238281 L 167.691406 223.835938 L 162.101562 223.835938 Z M 162.101562 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 173.28125 229.429688 L 178.871094 229.429688 L 178.871094 235.027344 L 173.28125 235.027344 Z M 173.28125 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 173.28125 218.238281 L 178.871094 218.238281 L 178.871094 223.835938 L 173.28125 223.835938 Z M 173.28125 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 184.460938 229.429688 L 190.050781 229.429688 L 190.050781 235.027344 L 184.460938 235.027344 Z M 184.460938 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 184.460938 218.238281 L 190.050781 218.238281 L 190.050781 223.835938 L 184.460938 223.835938 Z M 184.460938 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 195.640625 229.429688 L 201.230469 229.429688 L 201.230469 235.027344 L 195.640625 235.027344 Z M 195.640625 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 195.640625 218.238281 L 201.230469 218.238281 L 201.230469 223.835938 L 195.640625 223.835938 Z M 195.640625 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 206.820312 229.429688 L 212.410156 229.429688 L 212.410156 235.027344 L 206.820312 235.027344 Z M 206.820312 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 206.820312 218.238281 L 212.410156 218.238281 L 212.410156 223.835938 L 206.820312 223.835938 Z M 206.820312 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 218 229.429688 L 223.589844 229.429688 L 223.589844 235.027344 L 218 235.027344 Z M 218 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 218 218.238281 L 223.589844 218.238281 L 223.589844 223.835938 L 218 223.835938 Z M 218 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 229.179688 229.429688 L 234.769531 229.429688 L 234.769531 235.027344 L 229.179688 235.027344 Z M 229.179688 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 229.179688 218.238281 L 234.769531 218.238281 L 234.769531 223.835938 L 229.179688 223.835938 Z M 229.179688 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 240.359375 229.429688 L 245.949219 229.429688 L 245.949219 235.027344 L 240.359375 235.027344 Z M 240.359375 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 240.359375 218.238281 L 245.949219 218.238281 L 245.949219 223.835938 L 240.359375 223.835938 Z M 240.359375 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 251.539062 229.429688 L 257.128906 229.429688 L 257.128906 235.027344 L 251.539062 235.027344 Z M 251.539062 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 251.539062 218.238281 L 257.128906 218.238281 L 257.128906 223.835938 L 251.539062 223.835938 Z M 251.539062 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 262.71875 229.429688 L 268.308594 229.429688 L 268.308594 235.027344 L 262.71875 235.027344 Z M 262.71875 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 262.71875 218.238281 L 268.308594 218.238281 L 268.308594 223.835938 L 262.71875 223.835938 Z M 262.71875 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 273.898438 229.429688 L 279.488281 229.429688 L 279.488281 235.027344 L 273.898438 235.027344 Z M 273.898438 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 273.898438 218.238281 L 279.488281 218.238281 L 279.488281 223.835938 L 273.898438 223.835938 Z M 273.898438 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 285.078125 229.429688 L 290.667969 229.429688 L 290.667969 235.027344 L 285.078125 235.027344 Z M 285.078125 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 285.078125 218.238281 L 290.667969 218.238281 L 290.667969 223.835938 L 285.078125 223.835938 Z M 285.078125 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 296.257812 229.429688 L 301.847656 229.429688 L 301.847656 235.027344 L 296.257812 235.027344 Z M 296.257812 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 296.257812 218.238281 L 301.847656 218.238281 L 301.847656 223.835938 L 296.257812 223.835938 Z M 296.257812 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 307.4375 229.429688 L 313.027344 229.429688 L 313.027344 235.027344 L 307.4375 235.027344 Z M 307.4375 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 307.4375 218.238281 L 313.027344 218.238281 L 313.027344 223.835938 L 307.4375 223.835938 Z M 307.4375 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 318.617188 229.429688 L 324.207031 229.429688 L 324.207031 235.027344 L 318.617188 235.027344 Z M 318.617188 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 318.617188 218.238281 L 324.207031 218.238281 L 324.207031 223.835938 L 318.617188 223.835938 Z M 318.617188 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 329.792969 229.429688 L 335.382812 229.429688 L 335.382812 235.027344 L 329.792969 235.027344 Z M 329.792969 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 329.792969 218.238281 L 335.382812 218.238281 L 335.382812 223.835938 L 329.792969 223.835938 Z M 329.792969 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 340.972656 229.429688 L 346.5625 229.429688 L 346.5625 235.027344 L 340.972656 235.027344 Z M 340.972656 229.429688 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 340.972656 218.238281 L 346.5625 218.238281 L 346.5625 223.835938 L 340.972656 223.835938 Z M 340.972656 218.238281 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 95.027344 16.789062 L 100.617188 16.789062 L 100.617188 22.382812 L 95.027344 22.382812 Z M 95.027344 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 95.027344 5.597656 L 100.617188 5.597656 L 100.617188 11.191406 L 95.027344 11.191406 Z M 95.027344 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 106.207031 16.789062 L 111.792969 16.789062 L 111.792969 22.382812 L 106.207031 22.382812 Z M 106.207031 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 106.207031 5.597656 L 111.792969 5.597656 L 111.792969 11.191406 L 106.207031 11.191406 Z M 106.207031 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 117.382812 16.789062 L 122.972656 16.789062 L 122.972656 22.382812 L 117.382812 22.382812 Z M 117.382812 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 117.382812 5.597656 L 122.972656 5.597656 L 122.972656 11.191406 L 117.382812 11.191406 Z M 117.382812 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 128.5625 16.789062 L 134.152344 16.789062 L 134.152344 22.382812 L 128.5625 22.382812 Z M 128.5625 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 128.5625 5.597656 L 134.152344 5.597656 L 134.152344 11.191406 L 128.5625 11.191406 Z M 128.5625 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 139.742188 16.789062 L 145.332031 16.789062 L 145.332031 22.382812 L 139.742188 22.382812 Z M 139.742188 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 139.742188 5.597656 L 145.332031 5.597656 L 145.332031 11.191406 L 139.742188 11.191406 Z M 139.742188 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 150.921875 16.789062 L 156.511719 16.789062 L 156.511719 22.382812 L 150.921875 22.382812 Z M 150.921875 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 150.921875 5.597656 L 156.511719 5.597656 L 156.511719 11.191406 L 150.921875 11.191406 Z M 150.921875 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 162.101562 16.789062 L 167.691406 16.789062 L 167.691406 22.382812 L 162.101562 22.382812 Z M 162.101562 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 162.101562 5.597656 L 167.691406 5.597656 L 167.691406 11.191406 L 162.101562 11.191406 Z M 162.101562 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 173.28125 16.789062 L 178.871094 16.789062 L 178.871094 22.382812 L 173.28125 22.382812 Z M 173.28125 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 173.28125 5.597656 L 178.871094 5.597656 L 178.871094 11.191406 L 173.28125 11.191406 Z M 173.28125 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 184.460938 16.789062 L 190.050781 16.789062 L 190.050781 22.382812 L 184.460938 22.382812 Z M 184.460938 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 184.460938 5.597656 L 190.050781 5.597656 L 190.050781 11.191406 L 184.460938 11.191406 Z M 184.460938 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 195.640625 16.789062 L 201.230469 16.789062 L 201.230469 22.382812 L 195.640625 22.382812 Z M 195.640625 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 195.640625 5.597656 L 201.230469 5.597656 L 201.230469 11.191406 L 195.640625 11.191406 Z M 195.640625 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 206.820312 16.789062 L 212.410156 16.789062 L 212.410156 22.382812 L 206.820312 22.382812 Z M 206.820312 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 206.820312 5.597656 L 212.410156 5.597656 L 212.410156 11.191406 L 206.820312 11.191406 Z M 206.820312 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 218 16.789062 L 223.589844 16.789062 L 223.589844 22.382812 L 218 22.382812 Z M 218 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 218 5.597656 L 223.589844 5.597656 L 223.589844 11.191406 L 218 11.191406 Z M 218 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 229.179688 16.789062 L 234.769531 16.789062 L 234.769531 22.382812 L 229.179688 22.382812 Z M 229.179688 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 229.179688 5.597656 L 234.769531 5.597656 L 234.769531 11.191406 L 229.179688 11.191406 Z M 229.179688 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 240.359375 16.789062 L 245.949219 16.789062 L 245.949219 22.382812 L 240.359375 22.382812 Z M 240.359375 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 240.359375 5.597656 L 245.949219 5.597656 L 245.949219 11.191406 L 240.359375 11.191406 Z M 240.359375 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 251.539062 16.789062 L 257.128906 16.789062 L 257.128906 22.382812 L 251.539062 22.382812 Z M 251.539062 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 251.539062 5.597656 L 257.128906 5.597656 L 257.128906 11.191406 L 251.539062 11.191406 Z M 251.539062 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 262.71875 16.789062 L 268.308594 16.789062 L 268.308594 22.382812 L 262.71875 22.382812 Z M 262.71875 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 262.71875 5.597656 L 268.308594 5.597656 L 268.308594 11.191406 L 262.71875 11.191406 Z M 262.71875 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 273.898438 16.789062 L 279.488281 16.789062 L 279.488281 22.382812 L 273.898438 22.382812 Z M 273.898438 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 273.898438 5.597656 L 279.488281 5.597656 L 279.488281 11.191406 L 273.898438 11.191406 Z M 273.898438 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 285.078125 16.789062 L 290.667969 16.789062 L 290.667969 22.382812 L 285.078125 22.382812 Z M 285.078125 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 285.078125 5.597656 L 290.667969 5.597656 L 290.667969 11.191406 L 285.078125 11.191406 Z M 285.078125 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 296.257812 16.789062 L 301.847656 16.789062 L 301.847656 22.382812 L 296.257812 22.382812 Z M 296.257812 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 296.257812 5.597656 L 301.847656 5.597656 L 301.847656 11.191406 L 296.257812 11.191406 Z M 296.257812 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 307.4375 16.789062 L 313.027344 16.789062 L 313.027344 22.382812 L 307.4375 22.382812 Z M 307.4375 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 307.4375 5.597656 L 313.027344 5.597656 L 313.027344 11.191406 L 307.4375 11.191406 Z M 307.4375 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 318.617188 16.789062 L 324.207031 16.789062 L 324.207031 22.382812 L 318.617188 22.382812 Z M 318.617188 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 318.617188 5.597656 L 324.207031 5.597656 L 324.207031 11.191406 L 318.617188 11.191406 Z M 318.617188 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 329.792969 16.789062 L 335.382812 16.789062 L 335.382812 22.382812 L 329.792969 22.382812 Z M 329.792969 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 329.792969 5.597656 L 335.382812 5.597656 L 335.382812 11.191406 L 329.792969 11.191406 Z M 329.792969 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 340.972656 16.789062 L 346.5625 16.789062 L 346.5625 22.382812 L 340.972656 22.382812 Z M 340.972656 16.789062 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 340.972656 5.597656 L 346.5625 5.597656 L 346.5625 11.191406 L 340.972656 11.191406 Z M 340.972656 5.597656 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 195.640625 207.046875 L 201.230469 207.046875 L 201.230469 212.640625 L 195.640625 212.640625 Z M 195.640625 207.046875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 206.820312 207.046875 L 212.410156 207.046875 L 212.410156 212.640625 L 206.820312 212.640625 Z M 206.820312 207.046875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 218 207.046875 L 223.589844 207.046875 L 223.589844 212.640625 L 218 212.640625 Z M 218 207.046875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 229.179688 207.046875 L 234.769531 207.046875 L 234.769531 212.640625 L 229.179688 212.640625 Z M 229.179688 207.046875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 240.359375 207.046875 L 245.949219 207.046875 L 245.949219 212.640625 L 240.359375 212.640625 Z M 240.359375 207.046875 \"/>\n<path style=\" stroke:none;fill-rule:nonzero;fill:rgb(50.196078%,50.196078%,50.196078%);fill-opacity:0.215686;\" d=\"M 251.539062 207.046875 L 257.128906 207.046875 L 257.128906 212.640625 L 251.539062 212.640625 Z M 251.539062 207.046875 \"/>\n<g style=\"fill:rgb(80%,80%,80%);fill-opacity:1;\">\n  <use xlink:href=\"#glyph2-1\" x=\"260.483184\" y=\"161.71875\"/>\n  <use xlink:href=\"#glyph2-2\" x=\"260.483184\" y=\"153.476765\"/>\n  <use xlink:href=\"#glyph2-3\" x=\"260.483184\" y=\"146.086059\"/>\n  <use xlink:href=\"#glyph2-4\" x=\"260.483184\" y=\"138.724498\"/>\n  <use xlink:href=\"#glyph2-5\" x=\"260.483184\" y=\"131.099417\"/>\n  <use xlink:href=\"#glyph2-2\" x=\"260.483184\" y=\"127.762306\"/>\n  <use xlink:href=\"#glyph2-1\" x=\"260.483184\" y=\"120.3716\"/>\n  <use xlink:href=\"#glyph2-6\" x=\"260.483184\" y=\"112.129615\"/>\n  <use xlink:href=\"#glyph2-7\" x=\"260.483184\" y=\"104.780198\"/>\n  <use xlink:href=\"#glyph2-2\" x=\"260.483184\" y=\"97.166046\"/>\n</g>\n</g>\n</svg>\n",
      "config.ts": "namespace config {\n    export const NUM_NEOPIXELS = 1;\n    export const USR0 = 1; \n    export const USR1 = 2;    \n    export const USR2 = 3;    \n    export const USR3 = 4;\n    export const P8_07 = 106;\n    export const P8_08 = 107;\n    export const P8_09 = 108;\n    export const P8_10 = 109;\n    export const P8_11 = 110;\n    export const P8_12 = 111;\n    export const P8_13 = 112;\n    export const P8_14 = 113;\n    export const P8_15 = 114;\n    export const P8_16 = 115;    \n    export const P8_17 = 116;\n    export const P8_18 = 117;\n    export const P8_19 = 118;\n    export const P8_26 = 125;\n    export const P9_11 = 160;\n    export const P9_12 = 161;\n    export const P9_13 = 162;\n    export const P9_14 = 163;\n    export const P9_15 = 164;\n    export const P9_16 = 165;    \n    export const P9_17 = 166;\n    export const P9_18 = 167;\n    export const P9_21 = 170;\n    export const P9_22 = 171;\n    export const P9_23 = 172;\n    export const P9_24 = 173;\n    export const P9_25 = 174;\n    export const P9_26 = 175;\n    export const P9_27 = 176;\n    export const P9_30 = 179;\n    export const P9_33 = 182;  \n    export const P9_35 = 184;\n    export const P9_36 = 185;\n    export const P9_37 = 186;\n    export const P9_38 = 187;\n    export const P9_39 = 188;\n    export const P9_40 = 189;\n    export const P9_41 = 190;\n    export const P9_42 = 191;\n    export const P9_43 = 192;\n    export const P9_44 = 193;\n    export const P9_45 = 194;\n    export const P9_46 = 195;\n    // export const PIN_DISPLAY_BL = PIN_D4; plugged to power\n    export const DISPLAY_CFG0 = 0x00000090;\n    export const DISPLAY_CFG1 = 0x000e14ff;\n    export const DISPLAY_CFG2 = 24;\n    export const DISPLAY_WIDTH = 160;\n    export const DISPLAY_HEIGHT = 128;    \n}\n",
      "device.d.ts": "declare namespace pins {\n    //% fixedInstance shim=pxt::getPin(USR0)\n    const USR0: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(USR1)\n    const USR1: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(USR2)\n    const USR2: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(USR3)\n    const USR3: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_07)\n    const P8_07: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_08)\n    const P8_08: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_09)\n    const P8_09: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_10)\n    const P8_10: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_11)\n    const P8_11: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_12)\n    const P8_12: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_13)\n    const P8_13: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(P8_14)\n    const P8_14: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_15)\n    const P8_15: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_16)\n    const P8_16: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_17)\n    const P8_17: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_18)\n    const P8_18: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P8_19)\n    const P8_19: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(P8_26)\n    const P8_26: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_11)\n    const P9_11: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_12)\n    const P9_12: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_13)\n    const P9_13: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_14)\n    const P9_14: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(P9_15)\n    const P9_15: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_16)\n    const P9_16: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(P9_17)\n    const P9_17: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_18)\n    const P9_18: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_21)\n    const P9_21: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(P9_22)\n    const P9_22: PwmOnlyPin;\n    //% fixedInstance shim=pxt::getPin(P9_23)\n    const P9_23: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_24)\n    const P9_24: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_25)\n    const P9_25: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_26)\n    const P9_26: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_27)\n    const P9_27: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_30)\n    const P9_30: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_33)\n    const P9_33: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(P9_35)\n    const P9_35: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(P9_36)\n    const P9_36: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(P9_37)\n    const P9_37: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(P9_38)\n    const P9_38: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(P9_39)\n    const P9_39: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(P9_40)\n    const P9_40: AnalogInPin;\n    //% fixedInstance shim=pxt::getPin(P9_41)\n    const P9_41: DigitalInOutPin;\n    //% fixedInstance shim=pxt::getPin(P9_42)\n    const P9_42: PwmOnlyPin;\n}",
      "pxt.json": "{\n    \"name\": \"beagleboneblack\",\n    \"description\": \"Support for BeagleBone Black\",\n    \"files\": [\n        \"README.md\",\n        \"device.d.ts\",\n        \"config.ts\",\n        \"board.json\",\n        \"board.svg\"\n    ],\n    \"core\": true,\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"public\": true,\n    \"weight\": 100,\n    \"features\": [\n        \"pinled\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"0.0.1\"\n    },\n    \"icon\": \"/pxt-beaglebone/docs/static/libs/beagleboneblack.jpg\"\n}"
    }
  }
}